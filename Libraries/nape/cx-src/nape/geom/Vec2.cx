package nape.geom;
$(import);

!!/**
!! * 2 Dimensional vector.
!! * <br/><br/>
!! * Note that in many cases of a Vec2 object being returned by a Nape function
!! * the Vec2 object will be marked internally as an 'immutable' Vec2. This will
!! * always be documented and trying to mutate such a Vec2 will result in an
!! * error being thrown.
!! * <br/><br/>
!! * Vec2 objects can make use of a global object pool, attempting to make use
!! * of a disposed Vec2 will also result in an error with the object pool
!! * working in a FILO order to increase the likelihood of such misuse being
!! * caught.
!! * <br/><br/>
!! * Additionally Vec2 objects can be created as 'weak'. Passing a weak Vec2 to
!! * any Nape function as an argument will result in the automatic disposal of
!! * the Vec2 once the method has finished with it. There may be exceptions to
!! * this rule which will also be documented; a notable case being the appending
!! * of a weak Vec2 to a Nape Vec2List in which case the disposal of the weak
!! * Vec2 is performed when that Vec2List is handed to a Nape function instead.
!! * <br/><br/>
!! * Example:
!! * <pre>
!! * var vertices = Polygon.box(20, 20, true);
!! * var polygon = new Polygon(vertices);
!! * </pre>
!! * In this example, passing <code>true</code> to the Polygon.box method means
!! * that we will be returned a Vec2List containing only 'weak' Vec2s. Upon
!! * passing this Vec2List to the Polygon constructor, all of the Vec2s from
!! * that list will be automatically disposed.
!! */
@:final class Vec2 {
    !!/**
    !! * @private
    !! */
    public var pr(inner):PR(Vec2) = null;

    // Vec2 is poolable as a public object.
    PublicMixPool(Vec2)

    //
    // Global macros to facilitate auto disposal of weak Vec2's
    //
    $(mixin global isWEAK(x) ({
        /*return*/ x.pr(inner).weak;
    }));
    $(mixin global WEAK(x) ({
        if (isWEAK(x)) {
            x.dispose();
            /*return*/ true;
        }
        else {
            /*return*/ false;
        }
    }));

    !!/**
    !! * Allocate a weak Vec2 from global object pool.
    !! * <br/><br/>
    !! * This object which will be automaticaly released back to the object pool
    !! * when supplied as an argument to a Nape function.
    !! * <br/><br/>
    !! * Note that <code>Vec2.weak(x, y)</code> is exactly equivalent to <code>
    !! * Vec2.get(x, y, true)</code>.
    !! *
    !! * @param x The x coordinate for the vector. (default 0)
    !! * @param y The y coordiante for the vector. (default 0)
    !! * @return  The allocated weak Vec2 with given x/y values.
    !! */
    public static inline function weak(x:Float = 0, y:Float = 0):Vec2 {
        return get(x, y, true);
    }

    !!/**
    !! * Allocates a Vec2 from the global object pool.
    !! * <br/><br/>
    !! * Note that <code>Vec2.get(x, y, true)</code> is exactly equivalent to
    !! * <code>Vec2.weak(x, y)</code> and should be preferred.
    !! *
    !! * @param x    The x coordinate for the vector. (default 0)
    !! * @param y    The y coordinate for the vector. (default 0)
    !! * @param weak If true, then a weak Vec2 will be allocated which will be
    !! *             automatically released to object pool when passed as an
    !! *             argument to a Nape function. (default false)
    !! * @return     The allocated, possibly weak Vec2 with given x/y values.
    !! */
    public static inline function get(x:Float = 0, y:Float = 0, weak:Bool = false):Vec2 {
        DEBUG(
            if (isNaN(x) || isNaN(y)) {
                throw "Error: Vec2 components cannot be NaN";
            }
        )

        var ret; PublicGet(Vec2, ret);
        if (ret.pr(inner) == null) {
            ret.pr(inner) = PR(Vec2).get(x, y);
            ret.pr(inner).outer = ret;
        }else
        {
            ret.setxy(x, y);
        }

        ret.pr(inner).weak = weak;

        return ret;
    }

    !!/**
    !! * Release this Vec2 to global object pool.
    !! * <br/><br/>
    !! * Once diposed this Vec2
    !! * will be accessible to Nape internals for re-allocation and should
    !! * not be touched (Good practice would be to set any references to this
    !! * Vec2 to null to help ensure this).
    !! * <br/><br/>
    !! * In debug mode, should you attempt to access this Vec2 after disposal
    !! * and the Vec2 is still in the object pool, you will be given an Error.
    !! * The object pool operates on a First-In-Last-Out principal in debug
    !! * mode to help catch these sort of errors.
    !! * @throws # If this vector has already been disposed.
    !! * @throws # If this vector is immutable.
    !! * @throws # If this vector is in use in some other manner, such as being
    !! *           an element of a Polygon's vertex list.
    !! */
    public inline function dispose():Void {
        Disposed(this, Vec2);
        pr(inner).immutable();

        DEBUG(
            if (pr(inner)._inuse) {
                throw "Error: This Vec2 is not disposable";
            }
        )

        var inner = pr(inner);
        pr(inner).outer = null;
        pr(inner) = null;
        PublicFree(Vec2, this);
        Free(PR(Vec2), inner);
    }

    !!/**
    !! * Construct a new Vec2.
    !! * <br/><br/>
    !! * This constructor will obviously not make use of
    !! * the global object pool: <code>Vec2.get</code> should be used in
    !! * preference noting that <code>new Vec2(x, y)</code> is semantically
    !! * equivalent to <code>Vec2.get(x, y)</code>.
    !! *
    !! * @param x The x coordinate for the vector. (default 0)
    !! * @param y The y coordinate for the vector. (default 0)
    !! * @return  The newly constructed Vec2 object with given x/y values.
    !! */
    public function new(x:Float = 0, y:Float = 0) {
        DEBUG(
            if (isNaN(x) || isNaN(y)) {
                throw "Error: Vec2 components cannot be NaN";
            }
        )

        pr(inner) = PR(Vec2).get(x, y);
        pr(inner).outer = this;
    }

    !!/**
    !! * Produce a copy of this Vec2.
    !! * <br/><br/>
    !! * The Vec2 will be allocated from the global object pool.
    !! * <br/><br/>
    !! * As would be expected, if you produce a copy of an 'immutable' Vec2, then
    !! * the copy will be 'mutable'.
    !! *
    !! * @param weak If true, then a weak Vec2 will be allocated which will be
    !! *             automatically released to the object pool when passed as an
    !! *             argument to any Nape function. (default false)
    !! * @return     The possibly weak copy of this Vec2.
    !! * @throws # If this vector has been disposed.
    !! */
    keep public inline function copy(weak:Bool = false):Vec2 {
        Disposed(this, Vec2);
        return Vec2.get(x, y, weak);
    }

    #if (flash9||openfl||nme)
        !!
        !!/**
        !! * Allocate a Vec2 from AS3 Point object.
        !! * <br/><br/>
        !! * This Vec2 will be allocated from the global object pool.
        !! * <br/><br/>
        !! * This method is only available on <code>flash</code> and
        !! * <code>openfl||nme</code> targets.
        !! *
        !! * @param point The AS3 Point to initialise Vec2 with
        !! * @param weak  If true, then a weak Vec2 will be allocated which will
        !! *              be automatically released to the object pool when
        !! *              pass as an argument to any Nape function.
        !! *              (default false)
        !! * @return      The possibly weak Vec2 allocated with same values as
        !! *              input Point object.
        !! * @throws # If the point argument is null.
        !! */
        keep public static function fromPoint(
            point:flash.geom.Point, weak:Bool = false
        ):Vec2 {
            DEBUG(
                if (point == null) {
                    throw "Error: Cannot create Vec2 from null Point object";
                }
                if (isNaN(point.x) || isNaN(point.y)) {
                    throw "Error: Error: Vec2 components cannot be NaN";
                }
            )

            return Vec2.get(point.x, point.y, weak);
        }

        !!/**
        !! * Create an AS3 Point object from Vec2.
        !! * <br/><br/>
        !! * This method is only available on <code>flash</code> and
        !! * <code>openfl||nme</code> targets.
        !! *
        !! * @param output If supplied, this Point will have its x/y
        !! *               set instead of creating a new Point.
        !! * @return    The AS3 Point object representing Vec2.
        !! * @throws # If this vector has been disposed of.
        !! */
        keep public function toPoint(output:flash.geom.Point = null):flash.geom.Point {
            Disposed(this, Vec2);
            if (output == null) output = new flash.geom.Point();
            output.x = x;
            output.y = y;
            return output;
        }
    #end

    !!/**
    !! * Allocate a Vec2 given polar coordinates.
    !! * <br/><br/>
    !! * This Vec2 will be allocated from the global object pool.
    !! * <br/><br/>
    !! * This method will assign x/y values equal respectively to:
    !! * <code>length&#42Math.cos(angle)</code>,
    !! * <code>length&#42Math.sin(angle)</code>
    !! *
    !! * @param length The length of the Vec2. This value may be negative.
    !! * @param angle  The angle of the Vec2 as measured in radians clockwise
    !! *               from the positive x axis.
    !! * @param weak   If true, then a weak Vec2 will be allocated which will be
    !! *               automatically released to the object pool when passed as
    !! *               an argument to any Nape function. (default false)
    !! * @return       The possibly weak Vec2 allocated with given polar values.
    !! */
    keep public static function fromPolar(
        length:Float, angle:Float, weak:Bool = false
    ):Vec2 {
        DEBUG(
            if (isNaN(length)) {
                throw "Error: Vec2::length cannot be NaN";
            }
            if (isNaN(angle)) {
                throw "Error: Vec2::angle cannot be NaN";
            }
        )

        return Vec2.get(length*Math.cos(angle), length*Math.sin(angle), weak);
    }

    $(mixin comp(n)
        !!/**
        $doc($$*$$n coordinate of vector.)
        !! *
        !! * @default 0
        !! */
        property(n,Float,{
            Disposed(this, Vec2);

            pr(inner).validate();
            return pr(inner).n;
        }, {
            Disposed(this, Vec2);
            pr(inner).immutable();

            if (this.n != n) {
                DEBUG(
                    if (isNaN(n)) {
                        throw "Error: Vec2::"+$str(n)+" cannot be NaN";
                    }
                )

                pr(inner).n = n;
                pr(inner).invalidate();
            }
        })
    );
    comp(x)
    comp(y)

    !!/**
    !! * Length of this Vec2.
    !! * <br/><br/>
    !! * This value can be set and may be set to negative values so that
    !! * <code>vec.length &#42= -1</code> is a valid - if sub-optimal - way of
    !! * negating a Vec2.
    !! *
    !! * @default 0
    !! */
    property(length,Float,{
        Disposed(this, Vec2);

        // TODO: Cache this value.
        return vec_length_slow(this.);
    },{
        Disposed(this, Vec2);
        pr(inner).immutable();

        DEBUG(
            if (isNaN(length)) {
                throw "Error: Vec2::length cannot be NaN";
            }
            if (vec_lsq(this.) == 0) {
                throw "Error: Cannot set length of a zero vector";
            }
        )

        vec_muleq(this., length / vec_length_slow(this.));
        pr(inner).invalidate();
    })

    !!/**
    !! * Compute squared length of this Vec2.
    !! * <br/><br/>
    !! * This is exactly the same as performing <code>vec.length &#42
    !! * vec.length</code> except for being more effecient.
    !! *
    !! * @return The squared length of this Vec2.
    !! * @throws # If this vector has been disposed.
    !! */
    keep public function lsq():Float {
        Disposed(this, Vec2);

        return vec_lsq(this.);
    }

    !!/**
    !! * Set values of this Vec2 to those of the argument.
    !! * <br/><br/>
    !! * Note that <code>vec.set(p)</code> is semantically equivalent to
    !! * <code>vec.setxy(p.x, p.y)</code>.
    !! *
    !! * @param vector The Vec2 to set the values of this Vec2 with.
    !! * @return       A reference to 'this' Vec2.
    !! * @throws # If this vector, or vector argument  has been disposed.
    !! * @throws # If this vector is immutable.
    !! * @throws # If the vector passed as argument is null.
    !! */
    public inline function set(vector:Vec2):Vec2 {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);
        pr(inner).immutable();

        DEBUG(
            if (vector == null) {
                throw "Error: Cannot assign null Vec2";
            }
        )
        var ret = setxy(vector.x, vector.y);

        WEAK(vector);
        return ret;
    }

    !!/**
    !! * Compute square distance between two points.
    !! *
    !! * @param a The first point Vec2.
    !! * @param b The second point Vec2.
    !! * @return Squared distance between points.
    !! * @throws # If a, b are disposed of or null.
    !! */
    public static inline function dsq(a:Vec2, b:Vec2) {
        Disposed(a, Vec2);
        Disposed(b, Vec2);
        DEBUG(
            if (a == null || b == null)
                throw "Error: Cannot compute squared distance between null Vec2";
        )
        var ret = vec_dsq(a., b.);
        WEAK(a);
        WEAK(b);
        return ret;
    }

    !!/**
    !! * Compute distance between two points.
    !! *
    !! * @param a The first point Vec2.
    !! * @param b The second point Vec2.
    !! * @return Distance between points.
    !! * @throws # If a, b are disposed of or null.
    !! */
    public static inline function distance(a:Vec2, b:Vec2) {
        Disposed(a, Vec2);
        Disposed(b, Vec2);
        DEBUG(
            if (a == null || b == null)
                throw "Error: Cannot compute squared distance between null Vec2";
        )
        var ret = Math.sqrt(vec_dsq(a., b.));
        WEAK(a);
        WEAK(b);
        return ret;
    }

    !!/**
    !! * Set values of this Vec2 given pair of x/y values.
    !! *
    !! * @param x The x value to set this Vec2's x value to.
    !! * @param y The y value to set this Vec2's y value to.
    !! * @return  A reference to 'this' Vec2.
    !! * @throws # If this vector has been disposed.
    !! * @throws # If this vector is immutable.
    !! */
    public inline function setxy(x:Float, y:Float):Vec2 {
        Disposed(this, Vec2);
        pr(inner).immutable();

        DEBUG(
            if (isNaN(x) || isNaN(y)) {
                throw "Error: Vec2 components cannot be NaN";
            }
        )
        if (!vec_eq(this., $(->))) {
            vec_set(pr(inner)., $(->));
            pr(inner).invalidate();
        }
        return this;
    }

    !!/**
    !! * Angle of this Vec2.
    !! *
    !! * Measured in radians as measured clockwise from the positive x axis.
    !! * The value will be given in the range -pi to pi.
    !! * <br/><br/>
    !! * If the x/y values of this Vec2 are both 0, then the angle value will
    !! * default to 0.
    !! * <br/><br/>
    !! * This value can also be set (to any value) so that <code>vec.angle +=
    !! * Math.PI</code> is a valid - if sub-optimial - way of negating a Vec2.
    !! *
    !! * @default 0
    !! */
    property(angle,Float, {
        Disposed(this, Vec2);

        //TODO: cache this value
        if (x==y && x==0) {
            return 0.0;
        }
        else {
            return Math.atan2(y,x);
        }
    }, {
        Disposed(this, Vec2);
        pr(inner).immutable();

        DEBUG(
            if (isNaN(angle)) {
                throw "Error: Vec2::angle cannot be NaN";
            }
        )

        var l = length;
        setxy(l*Math.cos(angle), l*Math.sin(angle));
    })

    !!/**
    !! * Rotate Vec2 in-place by given number of radians..
    !! * <br/><br/>
    !! * Rotation performed in the clockwise direction.
    !! * <br/><br/>
    !! * The Vec2 will be mutated, with it's new x/y values being the result
    !! * of the rotation.
    !! *
    !! * @param angle The number of radians to rotate Vec2 by in the clockwise
    !! *              direction.
    !! * @return A reference to 'this' Vec2.
    !! * @throws # If this vector has been disposed.
    !! * @throws # If this vector is immutable.
    !! */
    keep public function rotate(angle:Float):Vec2 {
        Disposed(this, Vec2);
        pr(inner).immutable();

        DEBUG(
            if (isNaN(angle)) {
                throw "Error: Cannot rotate Vec2 by NaN";
            }
        )

        if ((angle % (Math.PI * 2)) != 0) {
            var ax = Math.sin(angle);
            var ay = Math.cos(angle);
            vec_rotateq(pr(inner)., a);
            pr(inner).invalidate();
        }

        return this;
    }

    !!/**
    !! * Reflect given Vec2 in plane whose normal is this Vec2.
    !! * <br/><br/>
    !! * @param vec The vector to be reflected.
    !! * @param weak If true, the returned Vec2 will be automatically released
    !! *             to object pool when used in another Nape function (default false)
    !! * @return The reflected Vec2.
    !! * @throws # If this vector or argument has been disposed.
    !! * @throws # If this vector has zero length.
    !! */
    keep public function reflect(vec:Vec2, weak:Bool=false):Vec2 {
        Disposed(this, Vec2);
        Disposed(vec, Vec2);
        DEBUG(
            if (this.length == 0) {
                throw "Error: Cannot reflect in zero vector";
            }
        )

        var normal = this.copy(true).normalise();
        var ret = vec.sub(normal.muleq(2 * normal.dot(vec)), weak);
        WEAK(vec);

        return ret;
    }

    !!/**
    !! * Normalise this vector.
    !! * <br/><br/>
    !! * Equivalent to setting the length of the vector to 1, and also to the
    !! * (less-optimal) <code>this.set(this.unit())</code>.
    !! *
    !! * @return A reference to 'this' vector.
    !! * @throws # If this vector has been disposed of or is immutable.
    !! * @throws # If length of this vector is 0.
    !! */
    keep public function normalise():Vec2 {
        Disposed(this, Vec2);
        pr(inner).immutable();

        DEBUG(
            if (this.length == 0) {
                throw "Error: Cannot normalise vector of length 0";
            }
        )

        vec_normalise_slow(this.);
        pr(inner).invalidate();

        return this;
    }

    !!/**
    !! * Return normalisation of this vector.
    !! *
    !! * @param weak If true then the allocated Vec2 will be automatically
    !! *             released to the global object pool when used as an argument
    !! *             to a Nape function. (default false)
    !! * @return A copy of this vector, normalised.
    !! * @throws # If this vector has been disposed of.
    !! * @throws # If length of this vector is 0.
    !! */
    keep public function unit(weak:Bool = false):Vec2 {
        Disposed(this, Vec2);

        DEBUG(
            if (this.length == 0) {
                throw "Error: Cannot normalise vector of length 0";
            }
        )

        var scale = 1 / vec_length(this.);
        return Vec2.get(x * scale, y * scale, weak);
    }

    !!/**
    !! * Add another vector to this vector.
    !! * <br/><br/>
    !! * Returns a newly allocated vector so that
    !! * this vector is not modified.
    !! * <br/><br/>
    !! * @param vector The vector to add to this vector. This value can not be
    !! *               null
    !! * @param weak   If true then the returned vector will be automatically
    !! *               released to the global object pool when used as an
    !! *               argument to another Nape function. (default false)
    !! * @return       The possibly weak vector representing the sum of this
    !! *               and the input vector.
    !! * @throws # If this vector, or the vector argument has been disposed.
    !! * @throws # If the vector passed as argument is null.
    !! */
    keep public function add(vector:Vec2, weak:Bool = false):Vec2 {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);

        DEBUG(
            if(vector == null) {
                throw "Error: Cannot add null vectors";
            }
        )

        var ret = Vec2.get(vec_iadd($(->), vector.), weak);

        WEAK(vector);
        return ret;
    }

    !!/**
    !! * Add a multiple of a vector to this vector.
    !! * <br/><br/>
    !! * This operation is equivalent to:
    !! * <pre>
    !! * this.add(vector.mul(scalar, true));
    !! * </pre>
    !! * <br/><br/>
    !! * Returns a newly allocated vector so that
    !! * this vector is not modified.
    !! * <br/><br/>
    !! * @param vector The vector to add to this vector. This value can not be
    !! *               null
    !! * @param scalar The scalar multiplier for the vector being added.
    !! * @param weak   If true then the returned vector will be automatically
    !! *               released to the global object pool when used as an
    !! *               argument to another Nape function. (default false)
    !! * @return       The possibly weak vector representing the sum of this
    !! *               and the input vector by scalar multiplier.
    !! * @throws # If this vector, or the vector argument has been disposed.
    !! * @throws # If the vector passed as argument is null.
    !! */
    keep public function addMul(vector:Vec2, scalar:Float, weak:Bool = false):Vec2 {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);

        DEBUG(
            if(vector == null) {
                throw "Error: Cannot add null vectors";
            }
        )

        var ret = Vec2.get(x + (vector.x * scalar),
                           y + (vector.y * scalar),
                           weak);

        WEAK(vector);
        return ret;
    }

    !!/**
    !! * Subtract another vector from this vector.
    !! * <br/><br/>
    !! * Returns a newly allocated vector so that this vector is not mutated.
    !! *
    !! * @param vector The vector to subtract from this vector. This value can
    !! *               not be null
    !! * @param weak   If true then the returned vector will be automatically
    !! *               released to the global object pool when used as an
    !! *               argument to another Nape function. (default false)
    !! * @return       The possibly weak vector representing the subtraction of
    !! *               the input vector from this vector.
    !! * @throws # If this vector, or the vector argument has been disposed.
    !! * @throws # If the vector passed as argument is null.
    !! */
    keep public function sub(vector:Vec2, weak:Bool = false):Vec2 {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);

        DEBUG(
            if(vector == null) {
                throw "Error: Cannot subtract null vectors";
            }
        )

        var ret = Vec2.get(vec_isub($(->), vector.), weak);

        WEAK(vector);
        return ret;
    }

    !!/**
    !! * Multiply this vector with a number.
    !! * <br/><br/>
    !! * Returns a newly allocated vector so that this vector is not mutated.
    !! *
    !! * @param scalar The number to multiply this vector with.
    !! * @param weak   If true then the returned vector will be automatically
    !! *               released to the global object pool when used as an
    !! *               argument to another Nape function. (default false)
    !! * @return       The possibly weak vector representing the multiplication
    !! *               of this vector and the input number.
    !! * @throws # If this vector has been disposed.
    !! */
    keep public function mul(scalar:Float, weak:Bool = false):Vec2 {
        Disposed(this, Vec2);

        DEBUG(
            if(isNaN(scalar)) {
                throw "Error: Cannot multiply with NaN";
            }
        )

        return Vec2.get(vec_imul($(->), scalar), weak);
    }

    !!/**
    !! * Add another vector into this vector.
    !! * <br/><br/>
    !! * This vector is mutated to be the result of the operation.
    !! * <br/><br/>
    !! * Semantically equivalent to (the less optimal)
    !! * <code>vec1.set(vec1.add(vec2))</code>
    !! *
    !! * @param vector The vector to add into this vector.
    !! * @return       A reference to this vector.
    !! * @throws # If this vector, or the vector argument has been disposed.
    !! * @throws # If this vector is immutable.
    !! * @throws # If the vector passed as argument is null.
    !! */
    keep public function addeq(vector:Vec2):Vec2 {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);
        pr(inner).immutable();

        DEBUG(
            if(vector == null) {
                throw "Error: Cannot add null vectors";
            }
        )

        setxy(vec_iadd($(->), vector.));

        WEAK(vector);
        return this;
    }

    !!/**
    !! * Subtract another vector from this vector.
    !! * <br/><br/>
    !! * This vector is mutated to be the result of the operation.
    !! * <br/><br/>
    !! * Semantically equivalent to (the less optimal)
    !! * <code>vec1.set(vec1.sub(vec2))</code>
    !! *
    !! * @param vector The vector to subtract from this vector.
    !! * @return       A reference to this vector.
    !! * @throws # If this vector, or the vector argument has been disposed.
    !! * @throws # If this vector is immutable.
    !! * @throws # If the vector passed as argument is null.
    !! */
    keep public function subeq(vector:Vec2):Vec2 {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);
        pr(inner).immutable();

        DEBUG(
            if(vector == null) {
                throw "Error: Cannot subtract null vectors";
            }
        )

        setxy(vec_isub($(->), vector.));

        WEAK(vector);
        return this;
    }

    !!/**
    !! * Multiply this vector with a number.
    !! * <br/><br/>
    !! * This vector is mutated to be the result of the operation.
    !! * <br/><br/>
    !! * Semantically equivalent to (the less optimal)
    !! * <code>vec.set(vec.mul(scalar))</code>
    !! *
    !! * @param scalar The number to multiply this vector with.
    !! * @return       A reference to this vector.
    !! * @throws # If this vector has been disposed.
    !! * @throws # If this vector is immutable.
    !! */
    keep public function muleq(scalar:Float):Vec2 {
        Disposed(this, Vec2);
        pr(inner).immutable();

        DEBUG(
            if(isNaN(scalar)) {
                throw "Error: Cannot multiply with NaN";
            }
        )

        return setxy(vec_imul($(->), scalar));
    }

    !!/**
    !! * Dot product with another vector.
    !! * <br/><br/>
    !! * The dot product is equal to the product of the length of each
    !! * vector, multiplied by the cosine of the smallest angle between them.
    !! * <br/><br/>
    !! * If one of the vectors is of length 1. Then the dot product is the
    !! * length of the projection of the other vector onto it which may be
    !! * computed (assuming 'this' is of length 1) like:
    !! * <code>vec1.mul(vec1.dot(vec2))</code>
    !! *
    !! * @param vector The vector to compute dot product with.
    !! * @return       The dot product of this vector and the other.
    !! * @throws # If this vector, or the vector argument has been disposed.
    !! * @throws # If the vector passed as argument is null.
    !! */
    keep public function dot(vector:Vec2):Float {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);

        DEBUG(
            if(vector == null) {
                throw "Error: Cannot take dot product with null vector";
            }
        )

        var ret = vec_dot($(->), vector.);

        WEAK(vector);
        return ret;
    }

    !!/**
    !! * Cross product with another vector.
    !! * <br/><br/>
    !! * Also known as the perp-dot product, this operation represents
    !! * the determinant of the matrix formed by having the 2 columns
    !! * as the two vectors. This is also the z-value of a 3D cross product
    !! * if you extend the input vectors with a z-value of 0.
    !! * <br/><br/>
    !! * Though not technically a cross-product in the way a 3D cross product
    !! * is, it shares many mathematical similarities.
    !! * <br/><br/>
    !! * If one of the vectors is of length 1. Then the cross product is the
    !! * length of the projection of the other vector onto the
    !! * right-perpendicular of the unit vector.
    !! * <br/><br/>
    !! * The cross and dot product are related like:
    !! * <code>vec1.cross(vec2) == vec1.perp().dot(vec2)</code>
    !! * Hence the name 'perp-dot'
    !! * <br/><br/>
    !! * Another useful property is that if the cross-product of two vectors
    !! * is 0, then the vectors are collinear, if positive then the second
    !! * vector is 'to the right' of the first vector, and if negative then
    !! * the second vector is 'to the left' of the first vector.
    !! *
    !! * @param vector The vector to compute cross product with.
    !! * @return       The cross product of this vector and the other.
    !! * @throws # If this vector, or the vector argument has been disposed.
    !! * @throws # If the vector passed as argument is null.
    !! */
    keep public function cross(vector:Vec2):Float {
        Disposed(this, Vec2);
        Disposed(vector, Vec2);

        DEBUG(
            if(vector == null) {
                throw "Error: Cannot take cross product with null vector";
            }
        )

        var ret = vec_cross($(->), vector.);

        WEAK(vector);
        return ret;
    }

    !!/**
    !! * The right-perpendicular to this vector.
    !! * <br/><br/>
    !! * Computes the result of rotating this vector by 90 degrees clockwise
    !! * returning a newly allocated vector.
    !! * <br/><br/>
    !! * This is semantically equivalent to (the less optimal)
    !! * <code>vec.copy().rotate(Math.PI/2)</code>
    !! * <br/><br/>
    !! * The cross and dot product are related like:
    !! * <code>vec1.cross(vec2) == vec1.perp().dot(vec2)</code>
    !! * Hence the name 'perp-dot'
    !! *
    !! * @param weak If true then the returned vector will be automatically
    !! *             released to the global object pool when used as an argument
    !! *             to another Nape function. (default false)
    !! * @return     The possibly weakly allocated, right-perpendicular to this
    !! *             vector.
    !! * @throws # If this vector has been disposed.
    !! */
    keep public function perp(weak:Bool = false):Vec2 {
        Disposed(this, Vec2);

        return Vec2.get(-y, x, weak);
    }

    !!/**
    !! * @private
    !! */
    @:$keep public function toString():String {
        Disposed(this, Vec2);

        pr(inner).validate();
        return pr(inner).toString();
    }
}
