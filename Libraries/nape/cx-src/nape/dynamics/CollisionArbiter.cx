package nape.dynamics;
$(import);

!!/**
!! * Arbiter sub type for collision interactions.
!! */
@:final class CollisionArbiter extends Arbiter {

    !!/**
    !! * Set of contact points for the related pairs of shapes.
    !! */
    property(contacts,ContactList,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        if(pr(inner).colarb.wrap_contacts==null)
            pr(inner).colarb.setupcontacts();
        return pr(inner).colarb.wrap_contacts;
    })

    !!/**
    !! * Normal of contact for collision interaction.
    !! * <br/><br/>
    !! * This normal will always point from arbiter's shape1, towards shape2 and
    !! * corresponds to the direction of the normal before positional integration
    !! * and erorr resolvement took place (Correct at time of pre-listener).
    !! */
    property(normal,Vec2,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        if(pr(inner).colarb.wrap_normal==null) pr(inner).colarb.getnormal();
        return pr(inner).colarb.wrap_normal;
    })

    !!/**
    !! * This radius property describes the sum of the circle's radii for the pair of shapes, with
    !! * a Polygon having 0 radius. This value is used in positional iterations to resolve penetrations
    !! * between the Shapes.
    !! */
    property(radius,Float,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        return pr(inner).colarb.radius;
    })

    !!/**
    !! * The reference edge for the collision on the first Polygon
    !! * If the first shape in Arbiter is a Circle this value is null.
    !! */
    property(referenceEdge1, Null<Edge>, {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        var edge = pr(inner).colarb.__ref_edge1;
        if (edge != null && (!shape1.isPolygon() || shape1.pr(inner) != edge.polygon)) edge = pr(inner).colarb.__ref_edge2;
        return (edge == null) ? null : edge.wrapper();
    })

    !!/**
    !! * The reference edge for the collision on the second Polygon
    !! * If the second shape in Arbiter is a Circle this value is null.
    !! */
    property(referenceEdge2, Null<Edge>, {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        var edge = pr(inner).colarb.__ref_edge1;
        if (edge != null && (!shape2.isPolygon() || shape2.pr(inner) != edge.polygon)) edge = pr(inner).colarb.__ref_edge2;
        return (edge == null) ? null : edge.wrapper();
    })

    !!/**
    !! * In the case that we have a Circle-Polygon collision, then this
    !! * function will return true, if the circle collided with the first
    !! * vertex of edge.
    !! * <br/><br/>
    !! * If both firstVertex() and secondVertex() are false, it indicates
    !! * the Circle collided with the edge.
    !! *
    !! * @returns True if Circle collided with first reference vertex.
    !! */
    public function firstVertex() {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        var poly2circle = (pr(inner).colarb.__ref_edge1 != null) != (pr(inner).colarb.__ref_edge2 != null);
        return if (poly2circle) (pr(inner).colarb.__ref_vertex == -1) else false;
    }

    !!/**
    !! * Check if colliding Circle hit second vertex of reference edge.
    !! * <br/><br/>
    !! * In the case that we have a Circle-Polygon collision, then this
    !! * function will return true, if the circle collided with the second
    !! * vertex of edge.
    !! * <br/><br/>
    !! * If both firstVertex() and secondVertex() are false, it indicates
    !! * the Circle collided with the edge.
    !! *
    !! * @returns True if Circle collided with second reference vertex.
    !! */
    public function secondVertex() {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        var poly2circle = (pr(inner).colarb.__ref_edge1 != null) != (pr(inner).colarb.__ref_edge2 != null);
        return if (poly2circle) (pr(inner).colarb.__ref_vertex == 1) else false;
    }

    !!/**
    !! * Evaluate normal reactive impulses for collision interaction for a given body.
    !! * <br/><br/>
    !! * If body argument is null, then the sum of the contact normal impulses will be returned instead
    !! * with no angular impulse derivable, the direction of this impulse will be the direction of the normal.
    !! * <br/>
    !! * If body argument is not null, then this will return the actual impulse applied to that specific body
    !! * rather than simply the sum of contact normal impulses, this will include angular impulses due to
    !! * positions of contact points and normal.
    !! *
    !! * @param body The Body to query normal impulse for. (default null)
    !! * @param freshOnly If true, then only 'new' contact points will be considered in computation.
    !! *                  (default false)
    !! * @return The impulse applied to the given body, considering normal reactive forces.
    !! * @throws # If body is non-null, and unrelated to this Arbiter.
    !! */
    keep public function normalImpulse(body:Body=null,freshOnly:Bool=false):Vec3 {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)

        vec3_new(ret, 0,0,0);
        var colarb = pr(inner).colarb;
        $(mixin con(c) {
            if(!freshOnly || c.fresh) {
                var imp = c.wrapper().normalImpulse(body);
                vec3_addeq(ret,imp.);
                imp.dispose();
            }
        });
        con(colarb.oc1);
        if(colarb.hc2) con(colarb.oc2);

        return Vec3.get(retx,rety,retz);
    }

    !!/**
    !! * Evaluate tangent impulses for collision interaction.
    !! * <br/><br/>
    !! * If body argument is null, then the sum of the contact friction impulses is returned with
    !! * no angular impulse derivable, the direction of this impulse will be against the relative
    !! * velocity of the first body against the second.
    !! * <br/>
    !! * If the body argument is non-null, then the actual impulse applied to that body due to tangent
    !! * frictino impulses will be returned, including angular effects due to contact positions and normal.
    !! * <br/><br/>
    !! * These tangent impulses correspond to the forces of static and dynamic friction.
    !! *
    !! * @param body The Body to query tangent impulse for. (default null)
    !! * @param freshOnly If true, then only 'new' contact points will be considered in computation.
    !! *                  (default false)
    !! * @return The impulse applied to the given body, considering standard frictional forces.
    !! * @throws # If body is non-null, and unrelated to this Arbiter.
    !! */
    keep public function tangentImpulse(body:Body=null,freshOnly:Bool=false):Vec3 {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)

        vec3_new(ret, 0,0,0);

        var colarb = pr(inner).colarb;
        $(mixin con(c) {
            if(!freshOnly || c.fresh) {
                var imp = c.wrapper().tangentImpulse(body);
                vec3_addeq(ret,imp.);
                imp.dispose();
            }
        });
        con(colarb.oc1);
        if(colarb.hc2) con(colarb.oc2);

        return Vec3.get(retx,rety,retz);
    }

    !!/**
    !! * Evaluate total contact impulses for collision interaction.
    !! * <br/><br/>
    !! * If body argument is null, then this will return the sum of linear contact impulses, and the sum
    !! * of contact rolling impulses.
    !! * <br/>
    !! * When body argument is non-null, this impulse will be the actual change in (mass weighted)
    !! * velocity that this collision caused to the Body in the previous time step.
    !! *
    !! * @param body The Body to query total impulse for. (default null)
    !! * @param freshOnly If true, then only 'new' contact points will be considered in computation.
    !! *                  (default false)
    !! * @return The impulse applied to the given body
    !! * @throws # If body is non-null, and unrelated to this Arbiter.
    !! */
    keep public override function totalImpulse(body:Body=null,freshOnly:Bool=false):Vec3 {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)

        vec3_new(ret, 0,0,0);

        var colarb = pr(inner).colarb;
        $(mixin con(c) {
            if(!freshOnly || c.fresh) {
                var imp = c.wrapper().totalImpulse(body);
                vec3_addeq(ret,imp.);
                imp.dispose();
            }
        });
        con(colarb.oc1);
        if(colarb.hc2) con(colarb.oc2);

        return Vec3.get(retx,rety,retz);
    }

    !!/**
    !! * Evaluate rolling friction impulses for collision interaction.
    !! * <br/><br/>
    !! * If body argument is null, then the sum of the rolling impulses of each contact will be returned
    !! * instead of the angular impulse applied to the specific body as a result of the rolling impulses.
    !! *
    !! * @param body The Body to query rolling impulse for. (default null)
    !! * @param freshOnly If true, then only 'new' contact points will be considered in computation.
    !! *                  (default false)
    !! * @return The angular impulse applied to the given body.
    !! * @throws # If body is non-null, and unrelated to this Arbiter.
    !! */
    keep public function rollingImpulse(body:Body=null,freshOnly:Bool=false):Float {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)

        var colarb = pr(inner).colarb;
        if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body);
        else return 0.0;
    }

    $(mixin prop(N,n)
        property(N,Float,{
            DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
            var colarb = pr(inner).colarb;
            colarb.validate_props();
            return colarb.n;
        }, {
            DEBUG(if(!pr(inner).colarb.mutable) throw "Error: CollisionArbiter::" + $str(N)+" is only mutable during a pre-handler";)
            DEBUG(
                if (isNaN(N)) throw "Error: CollisionArbiter::" + $str(N)+" cannot be NaN";
                if (N < 0) throw "Error: CollisionArbiter::" + $str(N)+" cannot be negative";
                if ($str(N)=="restitution" && N>1) throw "Error: CollisionArbiter::restitution cannot be greater than 1";
            )
            var colarb = pr(inner).colarb;
            colarb.n = N;
            colarb.userdef_`n = true;
        })
    );

    !!/**
    !! * Coeffecient of combined elasticity for collision interaction.
    !! * <br/><br/>
    !! * The value is computed as the average of the Shape Material's elasticities
    !! * clamped to be in the range [0,1]
    !! * <br/><br/>
    !! * This value may be modified only during a PreListener, and once modified
    !! * will no longer be under Nape's control. Values must be in the range 0
    !! * to 1.
    !! */
    prop(elasticity, restitution)

    !!/**
    !! * Coeffecient of combined dynamic friction for collision interaction.
    !! * <br/><br/>
    !! * The value is computed as the square root of the product of the Shape
    !! * Material's dynamicFriction coeffecients.
    !! * <br/><br/>
    !! * This value may be modified only during a PreListener, and once modified
    !! * will no longer be under Nape's control. Values must not be negative.
    !! */
    prop(dynamicFriction, dyn_fric)

    !!/**
    !! * Coeffecient of combined static friction for collision interaction.
    !! * <br/><br/>
    !! * The value is computed as the square root of the product of the Shape
    !! * Material's staticFriction coeffecients.
    !! * <br/><br/>
    !! * This value may be modified only during a PreListener, and once modified
    !! * will no longer be under Nape's control. Values must not be negative.
    !! */
    prop(staticFriction, stat_fric)

    !!/**
    !! * Coeffecient of combined rolling friction for collision interaction.
    !! * <br/><br/>
    !! * The value is computed as the square root of the product of the Shape
    !! * Material's rollingFriction coeffecients.
    !! * <br/><br/>
    !! * This value may be modified only during a PreListener, and once modified
    !! * will no longer be under Nape's control. Values must not be negative.
    !! */
    prop(rollingFriction, rfric)

    !!/**
    !! * @private
    !! */
    public function new() {
        DEBUG(if(!PR(Arbiter).internal)
            throw "Error: Cannot instantiate CollisionArbiter derp!";
        )
        super();
    }
}

