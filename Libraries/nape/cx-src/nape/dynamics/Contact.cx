package nape.dynamics;
$(import);

!!/**
!! * Contact point for collision interactions
!! * <br/><br/>
!! * These objects are automatically reused and you should not keep references to them.
!! */
@:final class Contact {
    !!/**
    !! * @private
    !! */
    public var pr(inner):PR(Contact) = null;

    !!/**
    !! * Reference to the CollisionArbiter this contact belongs to
    !! */
    property(arbiter,CollisionArbiter,{
        return if(pr(inner).arbiter==null) null else pr(inner).arbiter.outer.collisionArbiter;
    })

    !!/**
    !! * Penetration of bodies along normal for this contact.
    !! * <br/><br/>
    !! * This value may be negative and corresponds to the penetration (if at all)
    !! * of the contact point before positional integration and error resolvement
    !! * took place (correct at time of pre-listeners).
    !! */
    property(penetration,Float,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)
        return (-pr(inner).dist);
    })

    !!/**
    !! * The world-space position of contact.
    !! * <br/><br/>
    !! * This value corresponds to the position
    !! * of the contact point before positional integration and error resolvement
    !! * took place (correct at time of pre-listeners).
    !! */
    property(position,Vec2,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)
        if(pr(inner).wrap_position==null) pr(inner).getposition();
        return pr(inner).wrap_position;
    })

    !!/**
    !! * Whether this contact is newly generated, or persistant from previous step.
    !! */
    property(fresh,Bool,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)
        return pr(inner).fresh;
    })

    !!/**
    !! * Evaluate normal reactive impulses for this contact for a given body.
    !! * <br/><br/>
    !! * If body argument is null, then the contact normal impulses will be returned instead
    !! * with no angular impulse derivable, the direction of this impulse will be the direction of the normal.
    !! * <br/>
    !! * If body argument is not null, then this will return the actual impulse applied to that specific body
    !! * for this contact this will include angular impulses due to position of contact point and normal.
    !! *
    !! * @param body The Body to query normal impulse for. (default null)
    !! * @return The impulse applied to the given body, considering normal reactive forces.
    !! * @throws # If body is non-null, and unrelated to this Contact.
    !! */
    keep public function normalImpulse(body:Body=null) {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)
        var colarb = pr(inner).arbiter.colarb;
        var cin = pr(inner).inner;
        var jnAcc = cin.jnAcc;
        if(body==null)
            return Vec3.get(vec_imul(colarb.n, jnAcc));
        else {
            DEBUG(if(body!=colarb.b1.outer && body!=colarb.b2.outer) throw "Error: Contact does not relate to the given body";)
            if(body==colarb.b1.outer)
                 return Vec3.get(vec_imul(colarb.n, -jnAcc), -vec_cross(cin.r1,colarb.n)*jnAcc);
            else return Vec3.get(vec_imul(colarb.n,  jnAcc),  vec_cross(cin.r2,colarb.n)*jnAcc);
        }
    }

    !!/**
    !! * Evaluate tangent impulses for this contact for a given body.
    !! * <br/><br/>
    !! * If body argument is null, then the contact friction impulses is returned with
    !! * no angular impulse derivable, the direction of this impulse will be against the relative
    !! * velocity of the first body against the second.
    !! * <br/>
    !! * If the body argument is non-null, then the actual impulse applied to that body due to tangent
    !! * frictino impulses will be returned, including angular effects due to contact position and normal.
    !! * <br/><br/>
    !! * These tangent impulses correspond to the forces of static and dynamic friction for this contact.
    !! *
    !! * @param body The Body to query tangent impulse for. (default null)
    !! * @return The impulse applied to the given body, considering standard frictional forces.
    !! * @throws # If body is non-null, and unrelated to this Contact.
    !! */
    keep public function tangentImpulse(body:Body=null) {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)
        var colarb = pr(inner).arbiter.colarb;
        var cin = pr(inner).inner;
        var jtAcc = cin.jtAcc;
        if(body==null)
            return Vec3.get(-colarb.ny*jtAcc, colarb.nx*jtAcc);
        else {
            DEBUG(if(body!=colarb.b1.outer && body!=colarb.b2.outer) throw "Error: Contact does not relate to the given body";)
            if(body==colarb.b1.outer)
                 return Vec3.get( colarb.ny*jtAcc, -colarb.nx*jtAcc, -vec_dot(cin.r1,colarb.n)*jtAcc);
            else return Vec3.get(-colarb.ny*jtAcc,  colarb.nx*jtAcc,  vec_dot(cin.r2,colarb.n)*jtAcc);
        }
    }

    !!/**
    !! * Evaluate rolling friction impulses for this contact for a given body.
    !! * <br/><br/>
    !! * If body argument is null, then the rolling impulse of this contact will be returned
    !! * instead of the angular impulse applied to the specific body as a result of the rolling impulse.
    !! *
    !! * @param body The Body to query rolling impulse for. (default null)
    !! * @return The angular impulse applied to the given body.
    !! * @throws # If body is non-null, and unrelated to this Contact.
    !! */
    keep public function rollingImpulse(body:Body=null) {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)
        var colarb = pr(inner).arbiter.colarb;
        var jrAcc = pr(inner).arbiter.colarb.jrAcc;
        if(body==null)
            return jrAcc;
        else {
            DEBUG(if(body!=colarb.b1.outer && body!=colarb.b2.outer) throw "Error: Contact does not relate to the given body";)
            if(body==colarb.b1.outer) return -jrAcc;
            else                      return  jrAcc;
        }
    }

    !!/**
    !! * Evaluate total contact impulse for a given body.
    !! * <br/><br/>
    !! * If body argument is null, then this will return the sum of normal and tangent contact impulse, and the contact
    !! * rolling impulse.
    !! * <br/>
    !! * When body argument is non-null, this impulse will be the actual change in (mass weighted)
    !! * velocity that this contact caused to the Body in the previous time step.
    !! *
    !! * @param body The Body to query total impulse for. (default null)
    !! * @return The impulse applied to the given body
    !! * @throws # If body is non-null, and unrelated to this Contact.
    !! */
    keep public function totalImpulse(body:Body=null) {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)

        var colarb = pr(inner).arbiter.colarb;
        var cin = pr(inner).inner;

        var jnAcc = cin.jnAcc;
        var jtAcc = cin.jtAcc;
        var jrAcc = colarb.jrAcc;

        if(body==null) {
            return Vec3.get(colarb.nx*jnAcc - colarb.ny*jtAcc,
                            colarb.ny*jnAcc + colarb.nx*jtAcc,
                            jrAcc);
        }else {
            DEBUG(if(body!=colarb.b1.outer && body!=colarb.b2.outer) throw "Error: Contact does not relate to the given body";)
            vec_new(j, colarb.nx*jnAcc - colarb.ny*jtAcc,
                       colarb.ny*jnAcc + colarb.nx*jtAcc);
            if(body==colarb.b1.outer)
                 return Vec3.get(-jx,-jy,-vec_cross(cin.r1,j)-jrAcc);
            else return Vec3.get( jx, jy, vec_cross(cin.r2,j)+jrAcc);
        }
    }

    !!/**
    !! * The specific coeffecient of friction for this contact.
    !! * <br/><br/>
    !! * This value is equal either to the static or dynamic friction coeffecient of the arbiter
    !! * based on the relative velocity at contact point.
    !! * <br/><br/>
    !! * This value cannot be set, though you may implicitly set it exactly by modifying
    !! * the arbiter to have the same static and dynamic friction in the PreListener.
    !! */
    property(friction,Float, {
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Contact not currently in use";)
        return pr(inner).inner.friction;
    })

    !!/**
    !! * @private
    !! */
    public function new() {
        DEBUG(if(!PR(Contact).internal) throw "Error: Cannot instantiate Contact derp!";)
    }

    !!/**
    !! * @private
    !! */
    @:$keep public function toString() {
        if(pr(inner).arbiter==null || pr(inner).arbiter.cleared)
            return "{object-pooled}";
        else
            return "{Contact}";
    }
}
