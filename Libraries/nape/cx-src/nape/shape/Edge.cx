package nape.shape;
$(import);

!!/**
!! * Edge class providing internal details of Polygon.
!! */
@:final class Edge {
    !!/**
    !! * @private
    !! */
    public var pr(inner):PR(Edge) = null;

    !!/**
    !! * @private
    !! */
    public function new() {
        DEBUG(if(!PR(Edge).internal) throw "Error: Cannot instantiate an Edge derp!";)
    }

    !!/**
    !! * Reference to Polygon this Edge belongs to.
    !! */
    property(polygon, Polygon, {
        DEBUG(if(pr(inner).polygon==null) throw "Error: Edge not current in use";)
        return pr(inner).polygon.outer_zn;
    })

    !!/**
    !! * Normal of edge in local coordinates.
    !! * <br/><br/>
    !! * This Vec2 is immutable.
    !! */
    property(localNormal,Vec2,{
        DEBUG(if(pr(inner).polygon==null) throw "Error: Edge not current in use";)
        if(pr(inner).wrap_lnorm==null) pr(inner).getlnorm();
        return pr(inner).wrap_lnorm;
    })

    !!/**
    !! * Normal of edge in world coordinates.
    !! * <br/><br/>
    !! * This Vec2 is immutable, and may be accessed even if the related Polygon
    !! * is not part of a Body but queries to its values will result in a debug
    !! * build error.
    !! */
    property(worldNormal,Vec2,{
        DEBUG(if(pr(inner).polygon==null) throw "Error: Edge not current in use";)
        if(pr(inner).wrap_gnorm==null) pr(inner).getgnorm();
        return pr(inner).wrap_gnorm;
    })

    !!/**
    !! * Length of edge.
    !! */
    property(length,Float,{
        DEBUG(if(pr(inner).polygon==null) throw "Error: Edge not current in use";)
        pr(inner).polygon.validate_laxi();
        return pr(inner).length;
    })

    !!/**
    !! * Local projection of polygon onto edge axis.
    !! */
    property(localProjection,Float,{
        DEBUG(if(pr(inner).polygon==null) throw "Error: Edge not current in use";)
        pr(inner).polygon.validate_laxi();
        return pr(inner).lprojection;
    })

    !!/**
    !! * World projection of polygon to edge axis.
    !! * <br/><br/>
    !! * This value can only be accessed if related Polygon is part of a Body.
    !! */
    property(worldProjection,Float,{
        DEBUG(
            if(pr(inner).polygon==null) throw "Error: Edge not current in use";
            if(pr(inner).polygon.body==null)
                throw "Error: Edge world projection only makes sense for Polygons contained within a rigid body";
        )
        pr(inner).polygon.validate_gaxi();
        return pr(inner).gprojection;
    })

    !!/**
    !! * Reference to first local vertex for edge.
    !! */
    property(localVertex1, Vec2, {
        DEBUG(
            if(pr(inner).polygon==null) throw "Error: Edge not current in use";
        )
        pr(inner).polygon.validate_laxi();
        return pr(inner).lp0.wrapper();
    })

    !!/**
    !! * Reference to second local vertex for edge.
    !! */
    property(localVertex2, Vec2, {
        DEBUG(
            if(pr(inner).polygon==null) throw "Error: Edge not current in use";
        )
        pr(inner).polygon.validate_laxi();
        return pr(inner).lp1.wrapper();
    })

    !!/**
    !! * Reference to first world vertex for edge.
    !! */
    property(worldVertex1, Vec2, {
        DEBUG(
            if(pr(inner).polygon==null) throw "Error: Edge not current in use";
        )
        pr(inner).polygon.validate_gaxi();
        return pr(inner).gp0.wrapper();
    })

    !!/**
    !! * Reference to second world vertex for edge.
    !! */
    property(worldVertex2, Vec2, {
        DEBUG(
            if(pr(inner).polygon==null) throw "Error: Edge not current in use";
        )
        pr(inner).polygon.validate_gaxi();
        return pr(inner).gp1.wrapper();
    })

    !!/**
    !! * @private
    !! */
    @:$keep public function toString() {
        if(pr(inner).polygon==null)
            return "Edge(object-pooled)";
        else if(pr(inner).polygon.body==null) {
            pr(inner).polygon.validate_laxi();
            return "{ localNormal : "+vec_str(pr(inner).lnorm)+" }";
        } else {
            pr(inner).polygon.validate_gaxi();
            return "{ localNormal : "+vec_str(pr(inner).lnorm)
                   +" worldNormal : "+vec_str(pr(inner).gnorm)
                 +" }";
        }
    }
}
