package nape.constraint;
$(import);

!!/**
!! * Base type for all Nape joints and constraints
!! */
class Constraint {
    !!/**
    !! * @private
    !! */
    public var pr(inner):PR(Constraint); // don't set to null as super() is deferred in children

    PublicUserData(pr(inner))

    !!/**
    !! * Set to disable debug drawing/
    !! * <br/><br/>
    !! * When true, this Constraint will not be drawn during debug draw operations
    !! * unless specifically given as argument to Debug draw() method.
    !! * @default true
    !! */
    public var debugDraw:Bool = true;

    !!/**
    !! * Compound this Constraints belong to.
    !! * <br/><br/>
    !! * If this constraint is in a Space or another Compound and you change
    !! * its compound, then it will be removed from that Space or Compound.
    !! *
    !! * @default null
    !! */
    property(compound, Null<Compound>, {
        return if (pr(inner).compound == null) null
               else pr(inner).compound.outer;
    }, {
        if (this.compound != compound) {
            if(this.compound != null) {
                this.compound.constraints.remove(this);
            }
            if(compound != null) {
                compound.constraints.add(this);
            }
        }
    })

    !!/**
    !! * Space this constraint is inside of.
    !! * <br/><br/>
    !! * Whether this constraint is directly in a Space, or part of a Compound
    !! * which is inside of a space, this value will be equal to that Space.
    !! * <br/><br/>
    !! * If this constraint is inside of a Compound, then you cannot modify its
    !! * Space as the constraint belongs to that Compound.
    !! *
    !! * @default null
    !! */
    property(space, Null<Space>, {
        return if (pr(inner).space == null) null
               else pr(inner).space.outer;
    }, {
        DEBUG(
            if (pr(inner).compound != null) {
                throw "Error: Cannot set the space of a Constraint belonging to"
                    + " a Compound, only the root Compound space can be set";
            }
        )

        if(this.space != space) {
            // Prevent a WAKE callback being issued for constraint.
            if (pr(inner).component != null)
                pr(inner).component.woken = false;

            pr(inner).clearcache();

            if (pr(inner).space != null) {
                pr(inner).space.outer.constraints.remove(this);
            }

            if (space != null) {
                space.constraints.add(this);
            }
            else {
                pr(inner).space = null;
            }
        }
    })

    !!/**
    !! * Whether this constraint is sleeping or not.
    !! * <br/><br/>
    !! * This property is only defined if the constraint is inside of a Space
    !! * and is active, otherwise an error will be thrown should you access this
    !! * property.
    !! * <br/><br/>
    !! * This value is immutable, In Nape you do not ever need to manually
    !! * wake up a Constraint. It will always be done automatically without error.
    !! * <br/><br/>
    !! * To manually put a Constraint to sleep is against the very nature of Nape
    !! * API and so is excluded from the core of Nape. If you really want to do this
    !! * you should make use of the nape-hacks module.
    !! */
    property(isSleeping, Bool, {
        DEBUG(
            if (pr(inner).space == null || !pr(inner).active) {
                throw "Error: isSleeping only makes sense if constraint is"
                    + " active and inside a space";
            }
        )

        return pr(inner).component.sleeping;
    })

    !!/**
    !! * Whether this constraint is active or not.
    !! * <br/><br/>
    !! * Setting a constraint to be no longer active is a useful way of
    !! * temporarigly disabling a constraint without having to remove it
    !! * from a Space.
    !! *
    !! * @default true
    !! */
    property(active, Bool, {
        return pr(inner).active;
    }, {
        if (this.active != active) {
            // Prevent a WAKE callback being issued for constraint.
            if (pr(inner).component != null)
                pr(inner).component.woken = false;

            pr(inner).clearcache();

            if (active) {
                pr(inner).active = active;
                pr(inner).activate();
                if (pr(inner).space != null) {
                    // Ensure that constraint is 'woken' even if component
                    // Exists and was set to be asleep.
                    if (pr(inner).component != null)
                        pr(inner).component.sleeping = true;

                    // Passing true ensure in this case no WAKE callback
                    // will be issued.
                    pr(inner).space.wake_constraint(pr(inner), true);
                }
            } else {
                if (pr(inner).space != null) {
                    // Wake the constraint if sleeping to ensure any
                    // Linked objects are woken up before constraint is
                    // removed.
                    pr(inner).wake();
                    pr(inner).space.live_constraints.remove(pr(inner));
                }
                pr(inner).active = active;
                pr(inner).deactivate();
            }
        }
    })

    !!/**
    !! * Whether interactions between related Bodys will be ignored.
    !! * <br/><br/>
    !! * If true, then the Bodys related to this constraint will not
    !! * be permitted to interact in anyway, including callbacks.
    !! *
    !! * @default false
    !! */
    property(ignore, Bool, {
        return pr(inner).ignore;
    }, {
        if (this.ignore != ignore) {
            pr(inner).ignore = ignore;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Whether constraint is stiff, or elastic.
    !! * <br/><br/>
    !! * A stiff constraint has its positional error resolved directly
    !! * as with contact penetrations. This is generally a more stable
    !! * way of solving positional errors but has a side-effect that for example
    !! * changing the pivot point on a constraint used for mouse control will not
    !! * cause the objects to swing as the positional error is solved without
    !! * effecting the velocity of the object which may not be wanted.
    !! * <br/><br/>
    !! * If false, then the positional error of the constraint will be
    !! * resolved in an elastic way using changes in velocity.
    !! *
    !! * @default true
    !! */
    property(stiff, Bool, {
        return pr(inner).stiff;
    }, {
        if (this.stiff != stiff) {
            pr(inner).stiff = stiff;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Frequency of elastic properties of constraint.
    !! * <br/><br/>
    !! * This property only has an effect when constraint is not stiff.
    !! * <br/><br/>
    !! * This value corresponds to in an ideal situation, the number of
    !! * spring like oscillations the constraint will make per second.
    !! * <br/><br/>
    !! * This value must be strictly positive (0 not allowed).
    !! *
    !! * @default 10
    !! */
    property(frequency, Float, {
        return pr(inner).frequency;
    }, {
        DEBUG(
            if (isNaN(frequency)) {
                throw "Error: Constraint::Frequency cannot be NaN";
            }
            if (frequency <= 0) {
                throw "Error: Constraint::Frequency must be >0";
            }
        )

        if (this.frequency != frequency) {
            pr(inner).frequency = frequency;
            if (!pr(inner).stiff) {
                pr(inner).wake();
            }
        }
    })

    !!/**
    !! * Damping ratio of elastic properties of constraint.
    !! * <br/><br/>
    !! * This property only has an effect when constraint is not stiff.
    !! * <br/><br/>
    !! * This value corresponds to in the ideal situation, the damping
    !! * ratio of the constraints oscillations with 1 corresponding to
    !! * a total dampening, and values greater than one being over-dampening.
    !! * <br/><br/>
    !! * This value must be zero or positive.
    !! *
    !! * @default 1
    !! */
    property(damping, Float, {
        return pr(inner).damping;
    }, {
        DEBUG(
            if (isNaN(damping)) {
                throw "Error: Constraint::Damping cannot be Nan";
            }
            if (damping < 0) {
                throw "Error: Constraint::Damping must be >=0";
            }
        )

        if (this.damping != damping) {
            pr(inner).damping = damping;
            if (!pr(inner).stiff) {
                pr(inner).wake();
            }
        }
    })

    !!/**
    !! * The maximum amount of force this constraint is allowed to use.
    !! * <br/><br/>
    !! * This value, whilst still used in a stiff constraint will not work
    !! * as you might hope for; since a stiff constraint resolves positional
    !! * error without using impulses, the maxForce will not have any effect
    !! * on how positional errors are resolved.
    !! * <br/><br/>
    !! * This value must be zero or positive.
    !! *
    !! * @default infinity
    !! */
    property(maxForce, Float, {
        return pr(inner).maxForce;
    }, {
        DEBUG(
            if (isNaN(maxForce)) {
                throw "Error: Constraint::maxForce cannot be NaN";
            }
            if (maxForce < 0) {
                throw "Error: Constraint::maxForce must be >=0";
            }
        )

        if (this.maxForce != maxForce) {
            pr(inner).maxForce = maxForce;
            pr(inner).wake();
        }
    })

    !!/**
    !! * The maximum amount of error this constraint is allowed to use.
    !! * <br/><br/>
    !! * For stiff constraints, this value only serves to work in conjunction
    !! * with breakUnderError to permit breaking of the constraint.
    !! * <br/><br/>
    !! * For non-stiff constraints, this value will also effect how the constraint
    !! * behaves when breakUnderError is false by restricting the amount of error
    !! * that will be resolved; this will not work for stiff constraints.
    !! *
    !! * @default infinity
    !! */
    property(maxError, Float, {
        return pr(inner).maxError;
    }, {
        DEBUG(
            if (isNaN(maxError)) {
                throw "Error: Constraint::maxError cannot be NaN";
            }
            if (maxError < 0) {
                throw "Error: Constraint::maxError must be >=0";
            }
        )

        if (this.maxError != maxError) {
            pr(inner).maxError = maxError;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Whether constraint will break once maxForce is reached.
    !! * <br/><br/>
    !! * This property effects both stiff and non-stiff constraints, though
    !! * for the same reasons as those of maxForce, does not make much sense
    !! * to be used in stiff constraints.
    !! *
    !! * @default false
    !! */
    property(breakUnderForce, Bool, {
        return pr(inner).breakUnderForce;
    }, {
        if (this.breakUnderForce != breakUnderForce) {
            pr(inner).breakUnderForce = breakUnderForce;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Whether constraint will break once maxError is reached.
    !! * <br/><br/>
    !! * This property effects both stiff and non-stiff constraints.
    !! *
    !! * @default false
    !! */
    property(breakUnderError, Bool, {
        return pr(inner).breakUnderError;
    }, {
        if (this.breakUnderError != breakUnderError) {
            pr(inner).breakUnderError = breakUnderError;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Whether constraint will be removed when it breaks.
    !! * <br/><br/>
    !! * If true, then when constraint is broken it will be removed from
    !! * the Space. Otherwise it will simple be made inactive.
    !! *
    !! * @default true
    !! */
    property(removeOnBreak, Bool, {
        return pr(inner).removeOnBreak;
    }, {
        pr(inner).removeOnBreak = removeOnBreak;
    })

    // (Abstract)
    //public function jacobian     ():MatMN { return null; }
    //public function effectiveMass():MatMN { return null; }

    //constraint space
    //public function positionError():MatMN { return null; }
    //public function velocityError():MatMN { return null; }

    !!/**
    !! * Return the constraint-space impulse applied in previous step.
    !! *
    !! * @return A new MatMN representing the constraint space impulse.
    !! */
    public function impulse():MatMN { return null; }

    !!/**
    !! * Compute impulse that was applied to the given Body.
    !! * <br/><br/>
    !! * This impulse is the actual (mass weighted) change in velocity
    !! * that occured due to this constraint.
    !! *
    !! * @param body The Body to compute impulse for.
    !! * @return The impulse that was applied to the body in the previous step.
    !! * @throws # If Body is not related to the Constraint.
    !! */
    public function bodyImpulse(body:Body):Vec3 { return null; }

    !!/**
    !! * Apply given function to all Bodys linked to the constraint.
    !! * <br/><br/>
    !! * If a body is duplicated in a constraint then it will only
    !! * be visited once.
    !! *
    !! * @param lambda The function to apply to each Body.
    !! * @throws # If lambda is null.
    !! */
    public function visitBodies(lambda:Body->Void):Void {}

    !!/**
    !! * Set of CbTypes for this constraints for callbacks.
    !! * <br/><br/>
    !! * This value cannot at present be set, but can be modified.
    !! *
    !! * @default [CbType.ANY_CONSTRAINT]
    !! */
    property(cbTypes, CbTypeList, {
        if(pr(inner).wrap_cbTypes == null) {
            pr(inner).setupcbTypes();
        }

        return pr(inner).wrap_cbTypes;
    })

    !!/**
    !! * @private
    !! */
    DEBUG(public static var pr(internalAlloc) = false;)
    public function new() {
        //implicit ANY type
        pr(inner).insert_cbtype(CbType.ANY_CONSTRAINT.pr(inner));
        DEBUG(if (!pr(internalAlloc)) throw "Error: Constraint cannot be instantiated derp!";)
    }

    !!/**
    !! * @private
    !! */
    @:$keep public function toString():String {
        return "{Constraint}";
    }

    !!/**
    !! * Produce copy of constraint.
    !! * <br/><br/>
    !! * All constraint properties except for internal impulse cache
    !! * and userData field will be copied.
    !! *
    !! * @return The copied Constraint.
    !! */
    public function copy():Constraint {
        return pr(inner).copy();
    }
}
