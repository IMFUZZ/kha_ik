package nape.constraint;
$(import);

withConstraint(
!!/**
!! * AngleJoint constraining the relative angles of two Bodies.
!! * <br/><br/>
!! * The equation for this constraint is:
!! * <pre>
!! * jointMin <= ratio * body2.rotation - body1.rotation <= jointMax
!! * </pre>
!! */
@:final class AngleJoint extends Constraint {
    !!/**
    !! * @private
    !! */
    public var pr(inner_zn):PR(AngleJoint) = null;

    !!/**
    !! * First Body in constraint.
    !! * <br/><br/>
    !! * This value may be null, but trying to simulate the constraint whilst
    !! * this body is null will result in an error.
    !! */
    wrap_body_new(body1, b1, $(mixin isNew(b) pr(inner_zn).b2 != b) isNew)

    !!/**
    !! * Second Body in constraint.
    !! * <br/><br/>
    !! * This value may be null, but trying to simulate the constraint whilst
    !! * this body is null will result in an error.
    !! */
    wrap_body_new(body2, b2, $(mixin isNew(b) pr(inner_zn).b1 != b) isNew)

    !!/**
    !! * Lower bound for constraint.
    !! * <br/><br/>
    !! * This value must be less than or equal to jointMax.
    !! *
    !! * @default -infinity
    !! */
    property(jointMin, Float, {
        return pr(inner_zn).jointMin;
    }, {
        pr(inner).immutable_midstep("AngleJoint::jointMin");
        DEBUG(
            if (isNaN(jointMin)) {
                throw "Error: AngleJoint::jointMin cannot be NaN";
            }
        )

        if (this.jointMin != jointMin) {
            pr(inner_zn).jointMin = jointMin;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Upper bound for constraint.
    !! * <br/><br/>
    !! * This value must be greater than or equal to jointMin.
    !! *
    !! * @default infinity
    !! */
    property(jointMax, Float, {
        return pr(inner_zn).jointMax;
    }, {
        pr(inner).immutable_midstep("AngleJoint::jointMax");
        DEBUG(
            if (isNaN(jointMax)) {
                throw "Error: AngleJoint::jointMax cannot be NaN";
            }
        )

        if (this.jointMax != jointMax) {
            pr(inner_zn).jointMax = jointMax;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Ratio property of constraint.
    !! *
    !! * @default 1
    !! */
    property(ratio, Float, {
        return pr(inner_zn).ratio;
    }, {
        pr(inner).immutable_midstep("AngleJoint::ratio");
        DEBUG(
            if (isNaN(ratio)) {
                throw "Error: AngleJoint::ratio cannot be NaN";
            }
        )

        if (this.ratio != ratio) {
            pr(inner_zn).ratio = ratio;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Determine if constraint is slack.
    !! * <br/><br/>
    !! * This constraint is slack if the positional error is within
    !! * the bounds of (jointMin, jointMax).
    !! *
    !! * @return True if positional error of constraint is between the limits
    !! *              indicating that the constraint is not doing any work.
    !! * @throws # If either of the bodies is null.
    !! */
    public inline function isSlack():Bool {
        DEBUG(
            if (body1 == null || body2 == null) {
                throw "Error: Cannot compute slack for AngleJoint if either body is null.";
            }
        )
        return pr(inner_zn).is_slack();
    }

    !!/**
    !! * Construct a new AngleJoint.
    !! *
    !! * @param body1 The first body in AngleJoint.
    !! * @param body2 The second body in AngleJoint.
    !! * @param jointMin The lower bound for constraint.
    !! * @param jointMax The upper bound for constraint.
    !! * @param ratio The ratio of joint (default 1)
    !! * @return The constructed AngleJoint.
    !! */
    flibopts(0)
    public function new(
        body1:Null<Body>,
        body2:Null<Body>,
        jointMin:Float,
        jointMax:Float,
        ratio:Float = 1.0
    ) {
        pr(inner_zn) = new PR(AngleJoint)();
        pr(inner) = pr(inner_zn);
        pr(inner).outer = this;
        pr(inner_zn).outer_zn = this;

        DEBUG(Constraint.pr(internalAlloc) = true; super(); Constraint.pr(internalAlloc) = false;)
        RELEASE(super();)

        this.body1 = body1;
        this.body2 = body2;
        this.jointMin = jointMin;
        this.jointMax = jointMax;
        this.ratio = ratio;
    }

    !!/**
    !! * @inheritDoc
    !! * <br/><br/>
    !! * For this constraint, the MatMN will be 1x1.
    !! */
    public override function impulse():MatMN {
        var ret = new MatMN(1,1);
        ret.setx(0, 0, pr(inner_zn).jAcc);
        return ret;
    }

    !!/**
    !! * @inheritDoc
    !! * <br/><br/>
    !! * For this constraint, only the z coordinate will be non-zero.
    !! */
    public override function bodyImpulse(body:Body):Vec3 {
        DEBUG(
            if (body == null) {
                throw "Error: Cannot evaluate impulse on null body";
            }
            if (body != body1 && body != body2) {
                throw "Error: Body is not linked to this constraint";
            }
        )

        if(!active) {
            return Vec3.get(0, 0, 0);
        }
        else {
            return pr(inner_zn).bodyImpulse(body.pr(inner));
        }
    }

    !!/**
    !! * @inheritDoc
    !! */
    public override function visitBodies(lambda:Body->Void):Void {
        DEBUG(
            if (lambda == null) {
                throw "Error: Cannot apply null lambda to bodies";
            }
        )

        if(body1 != null) {
            lambda(body1);
        }
        if(body2 != null && body2 != body1) {
            lambda(body2);
        }
    }
})
