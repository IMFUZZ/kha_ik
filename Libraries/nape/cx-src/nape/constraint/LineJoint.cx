package nape.constraint;
$(import);

withConstraint(
!!/**
!! * LineJoint constraining anchor of one body, to a line segment of the other.
!! * <br/><br/>
!! * The equation for this constraint could be written like:
!! * <pre>
!! *        0  = [dir.cross(delta)]  = 0
!! * jointMin <= [dor.dot  (delta)] <= jointMax
!! * </pre>
!! * where:
!! * <pre>
!! * dir   = body1.localVectorToWorld(direction).unit();
!! * delta = body2.localPointToWorld(anchor2).sub(body1.localPointToWorld(anchor1));
!! * </pre>
!! * This is a 2 dimensional constraint, and is (when at the limits) solved as a
!! * block constraint for better stability. This is however not the most stable
!! * of joint when chained and put under stress and is a rather rare case where
!! * using a non-stiff joint can actually be more stable than
!! * using a stiff one.
!! * <br/><br/>
!! * When <code> jointMin = jointMax </code>, it would be better to use a PivotJoint
!! *instead with suitable
!! * placed anchors.
!! * <br/><br/>
!! * The line segment is defined implicitly via the
!! * <code>anchor1, direction, jointMin and jointMax</code> properties with end
!! * points defined in local coordinate system of body1 like:
!! * <pre>
!! * start = anchor1.add(direction.unit().mul(jointMin))
!! * end   = anchor1.add(direction.unit().mul(jointMax))
!! * </pre>
!! * The reason for this more general description of a line segment is that one or
!! * both of jointMin, jointMax are permitted to be infinite and a line segment
!! * defined with a start and end point is not sufficient to describe such lines.
!! */
@:final class LineJoint extends Constraint {
    !!/**
    !! * @private
    !! */
    public var pr(inner_zn):PR(LineJoint) = null;

    !!/**
    !! * First Body in constraint, defining the line segment.
    !! * <br/><br/>
    !! * This value may be null, but trying to simulate the constraint whilst
    !! * this body is null will result in an error.
    !! */
    wrap_body_new(body1, b1, $(mixin isNew(b) pr(inner_zn).b2 != b) isNew)

    !!/**
    !! * Second Body in constraint.
    !! * <br/><br/>
    !! * This value may be null, but trying to simulate the constraint whilst
    !! * this body is null will result in an error.
    !! */
    wrap_body_new(body2, b2, $(mixin isNew(b) pr(inner_zn).b1 != b) isNew)

    !!/**
    !! * Anchor point on first Body, defining position on line.
    !! * <br/><br/>
    !! * This anchor point is defined in the local coordinate system of body1.
    !! */
    wrap_anchor_new(anchor1, a1)

    !!/**
    !! * Anchor point on second Body.
    !! * <br/><br/>
    !! * This anchor point is defined in the local coordinate system of body2.
    !! */
    wrap_anchor_new(anchor2, a2)

    !!/**
    !! * Direction of line on first Body.
    !! * <br/><br/>
    !! * This direction is defined in the local coordinate system of body1 and
    !! * need not be normalised.
    !! */
    wrap_anchor_new(direction, n)

    !!/**
    !! * Lower bound for constraint.
    !! * <br/><br/>
    !! * This value must be less than or equal to jointMax.
    !! */
    property(jointMin, Float, {
        return pr(inner_zn).jointMin;
    }, {
        pr(inner).immutable_midstep("LineJoint::jointMin");
        DEBUG(
            if (isNaN(jointMin)) {
                throw "Error: AngleJoint::jointMin cannot be NaN";
            }
        )

        if (this.jointMin != jointMin) {
            pr(inner_zn).jointMin = jointMin;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Upper bound for constraint.
    !! * <br/><br/>
    !! * This value must be greater than or equal to jointMin.
    !! */
    property(jointMax, Float, {
        return pr(inner_zn).jointMax;
    }, {
        pr(inner).immutable_midstep("LineJoint::jointMax");
        DEBUG(
            if (isNaN(jointMax)) {
                throw "Error: AngleJoint::jointMax cannot be NaN";
            }
        )

        if (this.jointMax != jointMax) {
            pr(inner_zn).jointMax = jointMax;
            pr(inner).wake();
        }
    })

    !!/**
    !! * Construct a new LineJoint.
    !! *
    !! * @param body1 The first body in LineJoint.
    !! * @param body2 The second body in LineJoint.
    !! * @param anchor1 The first local anchor for joint.
    !! * @param anchor2 The second local anchor for joint.
    !! * @param direction The direction of local line for joint.
    !! * @param jointMin The lower bound for constraint.
    !! * @param jointMax The upper bound for constraint.
    !! * @return The constructed LineJoint.
    !! */
    flibopts(0)
    public function new(
        body1:Null<Body>,
        body2:Null<Body>,
        anchor1:Vec2,
        anchor2:Vec2,
        direction:Vec2,
        jointMin:Float,
        jointMax:Float
    ) {
        pr(inner_zn) = new PR(LineJoint)();
        pr(inner) = pr(inner_zn);
        pr(inner).outer = this;
        pr(inner_zn).outer_zn = this;

        DEBUG(Constraint.pr(internalAlloc) = true; super(); Constraint.pr(internalAlloc) = false;)
        RELEASE(super();)

        this.body1 = body1;
        this.body2 = body2;
        this.anchor1 = anchor1;
        this.anchor2 = anchor2;
        this.direction = direction;
        this.jointMin = jointMin;
        this.jointMax = jointMax;
    }

    !!/**
    !! * @inheritDoc
    !! * <br/><br/>
    !! * For this constraint, the MatMN will be 2x1.
    !! */
    public override function impulse():MatMN {
        var ret = new MatMN(2, 1);
        ret.setx(0, 0, pr(inner_zn).jAccx);
        ret.setx(1, 0, pr(inner_zn).jAccy);
        return ret;
    }

    !!/**
    !! * @inheritDoc
    !! */
    public override function bodyImpulse(body:Body):Vec3 {
        DEBUG(
            if (body == null) {
                throw "Error: Cannot evaluate impulse on null body";
            }
            if (body != body1 && body != body2) {
                throw "Error: Body is not linked to this constraint";
            }
        )

        if(!active) {
            return Vec3.get();
        }
        else {
            return pr(inner_zn).bodyImpulse(body.pr(inner));
        }
    }

    !!/**
    !! * @inheritDoc
    !! */
    public override function visitBodies(lambda:Body->Void):Void {
        if (body1 != null) {
            lambda(body1);
        }
        if (body2 != null && body2 != body1) {
            lambda(body2);
        }
    }
})
