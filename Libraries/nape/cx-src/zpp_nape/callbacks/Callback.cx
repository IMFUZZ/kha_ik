package zpp_nape.callbacks;
$(import);

class PR(Callback) {
    // Public sub-type references.
    // Any one of these may be non-null as Callback objects are shared
    // ubiquitously
    public var outer_body:Null<BodyCallback> = null;
    public var outer_con :Null<ConstraintCallback> = null;
    public var outer_int :Null<InteractionCallback> = null;

    // Used to avoid user misuse of Callback constructor.
    DEBUG(public static var internal = false;)
    public function wrapper_body() {
        if (outer_body == null) {
            DEBUG(internal = true;)
            outer_body = new BodyCallback();
            DEBUG(internal = false;)
            outer_body.pr(inner) = this;
        }
        return outer_body;
    }
    public function wrapper_con() {
        if (outer_con == null) {
            DEBUG(internal = true;)
            outer_con = new ConstraintCallback();
            DEBUG(internal = false;)
            outer_con.pr(inner) = this;
        }
        return outer_con;
    }
    public function wrapper_int() {
        if (outer_int == null) {
            DEBUG(internal = true;)
            outer_int = new InteractionCallback();
            DEBUG(internal = false;)
            outer_int.pr(inner) = this;
        }
        genarbs();
        return outer_int;
    }

    // Event type and listener.
    public var event:Flag(CbEvent) = 0;
    public var listener:PR(Listener) = null;

    // Used to check for validity in API.
    public var space:PR(Space) = null;
    public var index:Int = 0;

    // Operates as a mix-in defined queue
    QueueMix(PR(Callback))

    // Pool implementors
    MixPoolNoNext(PR(Callback))
    flibmdel public inline function free():Void {
        int1 = int2 = null;
        body = null;
        constraint = null;
        listener = null;
        if(wrap_arbiters != null) {
            wrap_arbiters.pr(inner).inner = null;
        }
        set = null;
    }
    flibmdel public inline function alloc():Void {
    }

    // For Interaction events.
    public var int1:PR(Interactor) = null;
    public var int2:PR(Interactor) = null;
    public var set:PR(CallbackSet) = null;
    // Public arbiter lists
    public var wrap_arbiters:ArbiterList = null;

    // For PreInteraction events
    public var pre_arbiter:PR(Arbiter) = null;
    public var pre_swapped:Bool = false;

    flibmdel public inline function genarbs() {
        assert(set != null, "after ongoing event was added, this should never be the case");
        if(wrap_arbiters == null) {
            wrap_arbiters = PR(ArbiterList).get(set.arbiters,true);
        }
        else {
            wrap_arbiters.pr(inner).inner = set.arbiters;
        }

        // We 'could' have arbiters track their sets and only do this if necessary
        // but.... the fact is these lists are either ignored, or iterated from the beginning
        // so it is really not necessary. (TODO)
        wrap_arbiters.pr(inner).inv(length) = true;
        wrap_arbiters.pr(inner).at_ite = null;
    }

    // For Body events.
    public var body:PR(Body) = null;

    // For Constraint events.
    public var constraint:PR(Constraint) = null;

    public function new() {
        // length of queue!
        length = 0;
    }
}
