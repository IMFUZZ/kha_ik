package zpp_nape.callbacks;
$(import);

//
// Tracks all listeners suitable for a given pairs of interacting objects
// With the given CbSet's.
//
// Constructed to avoid continous runtime merging of the lists and set
// lookups during the merges.
//
// Automatically released when CbSet's are removed from space.
//

class PR(CbSetPair) {
    public var a:PR(CbSet) = null;
    public var b:PR(CbSet) = null;

    // Object pool implementors
    MixPool(PR(CbSetPair))
    flibmdel public inline function free():Void {
        a = b = null;
        listeners.clear();
    }
    flibmdel public inline function alloc():Void {
        inv(listeners) = true;
    }

    // Construct not to be used directly
    // Instead use of the getter.
    public function new() {
        listeners = new List(PR(InteractionListener))();
    }
    public static inline function get(a:PR(CbSet), b:PR(CbSet)):PR(CbSetPair) {
        var ret; Get(PR(CbSetPair), ret);
        if (PR(CbSet).setlt(a, b)) {
            ret.a = a; ret.b = b;
        }else {
            ret.a = b; ret.b = a;
        }
        return ret;
    }

    // Defines a total ordering of CbSetPair's based on lexicographical sorting of
    // the CbSet's with == for equality due to unique nature of CbSets's
    public static inline function setlt(x:PR(CbSetPair), y:PR(CbSetPair)):Bool {
        assert((x.a==y.a) == (!PR(CbSet).setlt(x.a,y.a) && !PR(CbSet).setlt(y.a,x.a)),
            "Assumption that CbSet's are unique!! Aka we can compare for 'equal' CbSet with == is wrong?? :("
        );

        return PR(CbSet).setlt(x.a,y.a) || (x.a==y.a && PR(CbSet).setlt(x.b,y.b));
    }

    // Check a given listener is actually usable for the two given cbset.
    flibmdel inline function compatible(i:PR(InteractionListener)):Bool {
        return (i.options1.compatible(a.cbTypes) && i.options2.compatible(b.cbTypes))
            || (i.options2.compatible(a.cbTypes) && i.options1.compatible(b.cbTypes));
    }

    // Lazily compute updated lists of listeners from CbSet's.
    public var inv(listeners):Bool = false;
    public var listeners:List(PR(InteractionListener)) = null;
    flibmdel public inline function invalidate():Void {
        inv(listeners) = true;
    }
    flibmdel public inline function validate():Void {
        if (inv(listeners)) {
            inv(listeners) = false;
            __validate();
        }
    }

    public function __validate():Void {
        listeners.clear();
        assert(!a.inv(listeners), "a.listeners not validated??");
        assert(!b.inv(listeners), "b.listeners not validated??");

        var aite = a.listeners.begin();
        var bite = b.listeners.begin();
        while(aite!=null && bite!=null) {
            var ax = aite.elem(); var bx = bite.elem();
            if(ax==bx) {
                if(compatible(ax)) {
                    listeners.add(ax);
                }
                aite = aite.next;
                bite = bite.next;
            }elif(PR(Listener).setlt(ax,bx))
                 aite = aite.next;
            else bite = bite.next;
        }
    }

    // Determine if cbSetPair has no valid listeners.
    flibmdel public inline function empty_intersection():Bool {
        assert(!inv(listeners), "not validated before empty_intersection");
        return listeners.empty();
    }

    // Determine if cbSetPair has only the single given listener.
    flibmdel public inline function single_intersection(i:PR(InteractionListener)):Bool {
        assert(!inv(listeners), "not validated before single_intersection");
        var ite = listeners.begin();
        return ite != null && ite.elem() == i && ite.next == null;
    }

    // For all valid listeners given the event type, call callback.
    flibmdel public inline function forall(event:Int, cb:PR(InteractionListener)->Void):Void {
        assert(!inv(listeners), "not validated before forall");
        Iter(x, listeners, {
            if (x.event == event) cb(x);
        });
    }
}
