package zpp_nape.phys;
$(import);

class PR(Body) extends PR(Interactor) {
    public var outer:Body = null;

    public var world:Bool = false; //used for Space::static

    //----------------------------------------------------------------------------------------------

    public var type:Int = 0;
    flibmdel public inline function isStatic   () { return type == Flag(BodyType,STATIC); }
    flibmdel public inline function isDynamic  () { return type == Flag(BodyType,DYNAMIC); }
    flibmdel public inline function isKinematic() { return type == Flag(BodyType,KINEMATIC); }
    public static var types:Array<BodyType> = [null, BodyType.STATIC, BodyType.DYNAMIC, BodyType.KINEMATIC];

    public function invalidate_type() {
        invalidate_mass();
        invalidate_inertia();
    }

    //----------------------------------------------------------------------------------------------

    public var compound:PR(Compound) = null;

    public var shapes:List(PR(Shape)) = null;
    public var wrap_shapes:ShapeList = null;

    public function invalidate_shapes() {
        //dependancy checked
        invalidate_aabb();
        invalidate_localCOM();
        invalidate_mass();
        invalidate_inertia();
    }

    //----------------------------------------------------------------------------------------------

    public var space:PR(Space) = null;

    public var arbiters   :List(PR(Arbiter)) = null;    public var wrap_arbiters   :ArbiterList = null;
    public var constraints:List(PR(Constraint)) = null; public var wrap_constraints:ConstraintList = null;

    //disjoint set forest.
    public var component:PR(Component) = null;

    //----------------------------------------------------------------------------------------------

    //avoid use of closures, and re-use list/set
    static var bodystack:List(PR(Body)) = null;
    static var bodyset:Set(PR(Body)) = null;
    static function bodysetlt(a:PR(Body), b:PR(Body)) { return a.id < b.id; }
    public var graph_depth:Int = 0;

    inline function init_bodysetlist() {
        if(bodyset==null) {
            bodyset = new Set(PR(Body))();
            bodyset.lt = bodysetlt;
            bodystack = new List(PR(Body))();
        }
        assert(bodyset.empty(),"non-empty bodyset in connected bodies at init.");
        assert(bodystack.empty(),"non-empty bodystack in connected bodies at init.");
    }

    //----------------------------------------------------------------------------------------------

    //avoid use of closures.
    static var cur_graph_depth:Int = 0;
    function connectedBodies_cont(b:Body) {
        if(bodyset.try_insert_bool(b.pr(inner))) {
            bodystack.add(b.pr(inner));
            b.pr(inner).graph_depth = cur_graph_depth + 1;
        }
    }
    public function connectedBodies(depth:Int, output:BodyList):BodyList {
        init_bodysetlist();

        var ret = (output == null ? new BodyList() : output);
        bodystack.add(this);
        bodyset.insert(this);
        graph_depth = 0;
        while(!bodystack.empty()) {
            var cur = bodystack.pop_unsafe();
            if(cur.graph_depth == depth) continue;

            cur_graph_depth = cur.graph_depth;
            Iter(c, cur.constraints, c.outer.visitBodies(connectedBodies_cont));
        }

        //clear_with inlined, so no closure generated.
        bodyset.clear_with(function (b:PR(Body)) { if (b != this) ret.add(b.outer); });

        return ret;
    }

    //----------------------------------------------------------------------------------------------

    public function interactingBodies(arbiter_type:Int, depth:Int, output:BodyList):BodyList {
        init_bodysetlist();

        var ret = (output == null ? new BodyList() : output);
        bodyset.insert(this);
        bodystack.add(this);
        graph_depth = 0;
        while(!bodystack.empty()) {
            var cur = bodystack.pop_unsafe();
            if(cur.graph_depth == depth) continue;

            Iter(arb, cur.arbiters, {
                if((arb.type&arbiter_type)!=0) {
                    var other = if(arb.b1==cur) arb.b2 else arb.b1;
                    if(bodyset.try_insert_bool(other)) {
                        bodystack.add(other);
                        other.graph_depth = cur.graph_depth + 1;
                    }
                }
            });
        }

        //clear_width inlined, so no closure generated.
        bodyset.clear_with(function (b:PR(Body)) { if (b != this) ret.add(b.outer); });

        return ret;
    }

    //----------------------------------------------------------------------------------------------

    public function atRest(dt:Float) {
        if(!isDynamic()) return component.sleeping;
        else {
            var linSq = Config.linearSleepThreshold; linSq *= linSq;
            var cansleep =
                if(vec_lsq(vel) > linSq) false;
                else if(vec_dsq(pos,pre_pos) > 0.25*linSq*dt*dt) false
                else {
                    //approximated 'radius' (or actual radius if only shape is a circle)
                    vec_new(d); vec_sub(aabb.max,aabb.min,d);
                    var idl = vec_lsq(d);
                    var angSq = Config.angularSleepThreshold; angSq *= angSq;
                    if(4*angvel*angvel*idl > angSq) false
                    else {
                        var dr = rot - pre_rot;
                        if(dr*dr*idl > angSq*dt*dt) false
                        else true;
                    }
                }

            if(!cansleep) component.waket = space.stamp;
            return component.waket + Config.sleepDelay < space.stamp;
        }
    }

    public function refreshArbiters() {
        Iter(arb, arbiters, arb.invalidated = true);
    }

    //----------------------------------------------------------------------------------------------

    // current integration time for optimised sweepIntegrate
    public var sweepTime:Float = 0.0;

    // normalised angualr velocity to interpolate transforms.
    // Too large rotations cause errors in making iterations take too long and giving up.
    public var sweep_angvel:Float = 0.0;

    // True if object has been frozen early.
    public var sweepFrozen:Bool = false;

    // Max of shape sweepRadius
    public var sweepRadius:Float = 0.0;

    public var bullet:Bool = false; // internal flag based on velocity + below.
    public var bulletEnabled:Bool = false; // public API
    public var disableCCD:Bool = false; // disable CCD for any pair including this object.

    flibmdel public inline function sweepIntegrate(dt:Float) {
        var delta = dt - sweepTime;
        if (delta != 0) {
            assert(!isNaN(delta), delta+" "+dt+" "+sweepTime);
            sweepTime = dt;
            vec_addeq(pos, vel, delta);
            if (angvel != 0)
                delta_rot(sweep_angvel * delta);
        }
    }

    flibmdel public inline function sweepValidate(s:PR(Shape)) {
        assert(s.body == this, "sweepValidate with non owned shape");

        if (s.isCircle()) {
            // force validate worldCOM.
            vec_localglobal(axis, pos, s.localCOM, s.worldCOM);
        }
        else {
            // force validate world vertices
            var p = s.polygon;
            var li = p.lverts.begin();
            Iter(g, p.gverts, {
                var l = li.elem(); li = li.next;
                vec_localglobal(axis, pos, l., g.);
            });

            // force validate world edges
            var ite = p.edges.begin();
            Iter2_fast(u, v, p.gverts, {
                var e = ite.elem(); ite = ite.next;
                vec_rotate(e.lnorm, axis, e.gnorm);
                e.gprojection = vec_dot(pos, e.gnorm) + e.lprojection;

                e.tp0 = vec_cross(e.gnorm,u.);
                e.tp1 = vec_cross(e.gnorm,v.);
            });
        }
    }

    //--------------------------------------------------------------------

    vec_new(public,pre_pos);
    vec_new(public,pos);   public var wrap_pos:Vec2 = null;
    vec_new(public,vel);   public var wrap_vel:Vec2 = null;
    vec_new(public,force); public var wrap_force:Vec2 = null;

    vec_new(public,kinvel); //kinematic velocity.
    public var wrap_kinvel:Vec2 = null;

    vec_new(public,svel); //surface velocity
    public var wrap_svel:Vec2 = null;

    flibmdel public inline function invalidate_pos() {
        //dependancy checked
        Iter(s,shapes,{
            if(s.type==Flag(ShapeType,POLYGON)) {
                s.polygon.invalidate_gverts();
                s.polygon.invalidate_gaxi();
            }
            s.invalidate_worldCOM();
        });
        invalidate_worldCOM();
        //don't wake object here, this method is called by space each step!
    }

    //--------------------------------------------------------------------

    //previously were lambdas
    private function pos_invalidate(pos:PR(Vec2)) {
        immutable_midstep("Body::position");
        DEBUG(if(isStatic() && space!=null)
            throw "Error: Cannot move a static object once inside a Space";
        )
        if(!vec_eq(pos,pos.)) {
            vec_set(pos,pos.);
            invalidate_pos();
            wake();
        }
    }
    private function pos_validate() {
        vec_set(wrap_pos.pr(inner).,pos);
    }

    //--------------------------------------------------------------------

    //previously were lambdas
    private function vel_invalidate(vel:PR(Vec2)) {
        DEBUG(
            if (isStatic()) throw "Error: Static body cannot have its velocity set.";
        )
        vec_set(vel,vel.);
        invalidate_wake();
    }
    private function vel_validate() {
        vec_set(wrap_vel.pr(inner).,vel);
    }

    //--------------------------------------------------------------------

    //previously were lambdas
    private function kinvel_invalidate(vel:PR(Vec2)) {
        vec_set(kinvel,vel.);
        invalidate_wake();
    }
    private function kinvel_validate() {
        vec_set(wrap_kinvel.pr(inner).,kinvel);
    }

    //--------------------------------------------------------------------

    //previously were lambdas
    private function svel_invalidate(vel:PR(Vec2)) {
        vec_set(svel,vel.);
        invalidate_wake();
    }
    private function svel_validate() {
        vec_set(wrap_svel.pr(inner).,svel);
    }

    //--------------------------------------------------------------------

    //previously were lambdas
    private function force_invalidate(force:PR(Vec2)) {
        DEBUG(
            if(!isDynamic()) throw "Error: Non-dynamic body cannot have force applied.";
        )
        vec_set(force,force.);
        invalidate_wake();
    }
    private function force_validate() vec_set(wrap_force.pr(inner).,force)

    //--------------------------------------------------------------------

    public function setupPosition() {
        wrap_pos = Vec2.get(posx,posy);
        wrap_pos.pr(inner)._inuse = true;
        if(world) wrap_pos.pr(inner)._immutable = true;
        else {
            wrap_pos.pr(inner)._invalidate = pos_invalidate;
            wrap_pos.pr(inner)._validate = pos_validate;
        }
    }
    public function setupVelocity() {
        wrap_vel = Vec2.get(velx,vely);
        wrap_vel.pr(inner)._inuse = true;
        if(world) wrap_vel.pr(inner)._immutable = true;
        else {
            wrap_vel.pr(inner)._invalidate = vel_invalidate;
            wrap_vel.pr(inner)._validate = vel_validate;
        }
    }
    public function setupkinvel() {
        wrap_kinvel = Vec2.get(kinvelx,kinvely);
        wrap_kinvel.pr(inner)._inuse = true;
        if(world) wrap_kinvel.pr(inner)._immutable = true;
        else {
            wrap_kinvel.pr(inner)._invalidate = kinvel_invalidate;
            wrap_kinvel.pr(inner)._validate = kinvel_validate;
        }
    }
    public function setupsvel() {
        wrap_svel = Vec2.get(svelx,svely);
        wrap_svel.pr(inner)._inuse = true;
        if(world) wrap_svel.pr(inner)._immutable = true;
        else {
            wrap_svel.pr(inner)._invalidate = svel_invalidate;
            wrap_svel.pr(inner)._validate = svel_validate;
        }
    }

    public function setupForce() {
        wrap_force = Vec2.get(forcex,forcey);
        wrap_force.pr(inner)._inuse = true;
        if(world) wrap_force.pr(inner)._immutable = true;
        else {
            wrap_force.pr(inner)._invalidate = force_invalidate;
            wrap_force.pr(inner)._validate = force_validate;
        }
    }

    //----------------------------------------------------------------------------------------------

    //was previous lambda
    private function cvel_validate() {
        wrapcvel.pr(inner).x = velx + kinvelx;
        wrapcvel.pr(inner).y = vely + kinvely;
        wrapcvel.pr(inner).z = angvel + kinangvel;
    }

    public var wrapcvel:Vec3 = null;
    public function setup_cvel() {
        var me = this;
        wrapcvel = Vec3.get();
        wrapcvel.pr(inner).immutable = true;
        wrapcvel.pr(inner)._validate = cvel_validate;
    }

    //----------------------------------------------------------------------------------------------

    public var angvel:Float = 0.0;
    public var torque:Float = 0.0;
    //public var bias_angvel:Float = 0.0;

    public var kinangvel:Float = 0.0;
    public var pre_rot:Float = 0.0;

    public var rot:Float = 0.0;
    flibmdel public inline function invalidate_rot() {
        //dual with invalidate_axis
        //dependancy checked
        inv(axis) = true;
        Iter(s,shapes,{
            if(s.type==Flag(ShapeType,POLYGON)) {
                s.polygon.invalidate_gverts();
                s.polygon.invalidate_gaxi();
            }
            s.invalidate_worldCOM();
        });
        invalidate_worldCOM();
        //don't wake object here, this method is called by space.step!
    }
    vec_new(public,axis); public var inv(axis):Bool = false;
    /*used by nape-hacks*/
    /*flibmdel*/ public inline function validate_axis() {
        //dependancy checked
        if(inv(axis)) {
            inv(axis) = false;
            quick_validate_axis();
        }
    }
    flibmdel public inline function quick_validate_axis() {
        vec_set(axis,Math.sin(rot),Math.cos(rot));
    }
    flibmdel public inline function delta_rot(dr:Float) {
        rot += dr;
        //stay defensive; if dr is even remotely big; recalculate axis exactly.
        if(dr*dr>0.0001) quick_validate_axis();
        else {
            //approximation of axis rotation
            //p, dr provide small angle approximations
            //whilst m provides an approximation to 1/|axis| after
            //the small angle rotation approximation to approximate
            //the normalisation and hugely reduce errors over many calls.
            //
            //in testing, even with dr = 0.01 (the threshold) occuring
            //100 times, the error in axisx and axisy is limited to 0.00002
            //(remembering that each space.step, a true sine/cosine is performed
            // so this accumulation of error (which is very well limited)
            // occurs only within a step)
            var d2 = dr*dr;
            var p = 1-0.5*d2;
            var m = 1-d2*d2/8;
            var nx = (p*axisx+dr*axisy)*m;
            axisy = (p*axisy-dr*axisx)*m;
            axisx = nx;
        }
    }

    //----------------------------------------------------------------------------------------------

    // Buf fix for issue #57
    public var kinematicDelaySleep:Bool;

    //----------------------------------------------------------------------------------------------

    public var mass:Float = 0.0; public var inv(mass):Bool = false;
    public var massMode:Int = 0; //DEFAULT, FIXED

    public var imass:Float = 0.0; //0 when asleep
    public var smass:Float = 0.0; //1/mass even when asleep
    public var cmass:Float = 0.0; //mass even if converted to kinematic/static

    public var nomove:Bool = false; //stopMovement()/allowMovement() calls

    public function invalidate_mass() {
        //dependancy checked
        inv(mass) = true;
        invalidate_gravMass();
    }
    public function validate_mass() {
        //dependancy checked
        // # changes to Material memory use (see Shape.cx)
        var exist = false;//Exists(s,shapes,s.refmaterial.density!=s.material.density);
        // #
        if(inv(mass)
        // #
         || (massMode==Flag(MassMode,DEFAULT) && exist)
        // #
        ) {
            inv(mass) = false;
            if(massMode==Flag(MassMode,DEFAULT)) {
                cmass = 0;
                Iter(s,shapes,{
                    // #
                    s.refmaterial.density = s.material.density;
                    // #
                    s.validate_area_inertia();
                    cmass += s.area*s.material.density;
                });
            }
            if(isDynamic() && !nomove) {
                mass = cmass;
                imass = smass = 1.0/mass;
            }else {
                mass = PR(Const).POSINF();
                imass = smass = 0.0;
            }
            // #
            if(exist) invalidate_inertia();
            // #
        }
    }

    public var gravMass:Float = 0.0; public var inv(gravMass):Bool = false;
    public var gravMassMode:Int = 0; //DEFAULT,FIXED,SCALED
    public var gravMassScale:Float = 0.0; public var inv(gravMassScale):Bool = false;

    public function invalidate_gravMass() {
        //dependancy checked
        if(gravMassMode!=Flag(GravMassMode,FIXED))
            inv(gravMass) = true;
        if(gravMassMode!=Flag(GravMassMode,SCALED))
            inv(gravMassScale) = true; //cannot recursively methods

        wake();
    }
    public function validate_gravMass() {
        //dependacny checked
        if(inv(gravMass)) {
            inv(gravMass) = false;
            validate_mass();
            if(gravMassMode==Flag(GravMassMode,DEFAULT)) {
                validate_mass();
                gravMass = cmass;
            }else if(gravMassMode==Flag(GravMassMode,SCALED)) {
                validate_mass();
                //gravMassScale not verified as defined here.
                gravMass = cmass*gravMassScale;
            }
        }
    }

    public function invalidate_gravMassScale() {
        //dependancy checked
        if(gravMassMode!=Flag(GravMassMode,SCALED))
            inv(gravMassScale) = true;
        else
            invalidate_gravMass();
    }
    public function validate_gravMassScale() {
        //dependancy checked
        if(inv(gravMassScale)) {
            inv(gravMassScale) = false;
            if(gravMassMode==Flag(GravMassMode,DEFAULT)) gravMassScale = 1.0;
            else if(gravMassMode==Flag(GravMassMode,FIXED)) {
                validate_mass();
                //gravMass not verified as defined here
                gravMassScale = gravMass/cmass;
            }
        }
    }

    //----------------------------------------------------------------------------------------------

    public var inertiaMode:Int = 0;
    public var inertia:Float = 0.0; public var inv(inertia):Bool = false;
    public var cinertia:Float = 0.0;
    public var iinertia:Float = 0.0;
    public var sinertia:Float = 0.0;

    public var norotate:Bool = false; //stopRotation/allowRotation() calls

    public function invalidate_inertia() {
        //dependancy checked
        inv(inertia) = true;
        wake();
    }
    public function validate_inertia() {
        //dependancy checked
        // # changes to Material memory use (see Shape.cx)
        var exist = false;//Exists(s,shapes,s.refmaterial.density!=s.material.density);
        // #
        if(inv(inertia)
        // #
         || (inertiaMode==Flag(InertiaMode,DEFAULT) && exist)
        // #
        ) {
            inv(inertia) = false;
            if(inertiaMode==Flag(InertiaMode,DEFAULT)) {
                cinertia = 0;
                Iter(s,shapes,{
                    // #
                    s.refmaterial.density = s.material.density;
                    // #
                    s.validate_area_inertia();
                    cinertia += s.inertia*s.area*s.material.density;
                });
            }
            if(isDynamic() && !norotate) {
                inertia = cinertia;
                sinertia = iinertia = 1.0/inertia;
            }else {
                inertia = PR(Const).POSINF();
                sinertia = iinertia = 0;
            }
            // #
            if(exist) invalidate_inertia();
            // #
        }
    }

    //----------------------------------------------------------------------------------------------

    //called when body needs waking due to a property change.
    flibmdel public inline function invalidate_wake() {
        wake();
    }

    //----------------------------------------------------------------------------------------------

    public var aabb:PR(AABB) = null; public var inv(aabb):Bool = false;
    /*used by nape-hacks*/
    /*flibmdel*/ public inline function validate_aabb() {
        DEBUG(if(shapes.empty())
            throw "Error: Body bounds only makes sense if it contains shapes";
        )
        //dependancy checked
        if(inv(aabb)) {
            inv(aabb) = false;
            vec_set(aabb.min,PR(Const).POSINF(),PR(Const).POSINF());
            vec_set(aabb.max,PR(Const).NEGINF(),PR(Const).NEGINF());
            Iter(s,shapes,{
                s.validate_aabb();
                aabb.combine(s.aabb);
            });
        }
    }
    flibmdel public inline function invalidate_aabb() {
        //dependancy checked
        inv(aabb) = true;
    }

    //----------------------------------------------------------------------------------------------

    vec_new(public,localCOM); public var inv(localCOM):Bool = false;
    vec_new(public,worldCOM); public var inv(worldCOM):Bool = false;
    public var wrap_localCOM:Vec2 = null;
    public var wrap_worldCOM:Vec2 = null;

    flibmdel public inline function invalidate_localCOM() {
        //dependancy checked
        inv(localCOM) = true;
        invalidate_worldCOM();
    }
    flibmdel public inline function invalidate_worldCOM() {
        //dependancy checked
        inv(worldCOM) = true;
    }

    public function validate_localCOM() {
        //dependancy checked
        if(inv(localCOM)) {
            inv(localCOM) = false;

            vec_new(temp,0,0);
            var msum = 0.0;
            Iter(s,shapes,{
                s.validate_localCOM();
                s.validate_area_inertia();

                vec_addeq(temp,s.localCOM,s.area*s.material.density);
                msum += s.area*s.material.density;
            });
            if (msum != 0) {
                vec_div(temp,msum,localCOM);
            }

            if(wrap_localCOM!=null) vec_set(wrap_localCOM.pr(inner).,localCOM);

            if(inv(mass) && massMode==Flag(MassMode,DEFAULT)) {
                inv(mass) = false;
                cmass = msum;
                if(isDynamic()) {
                    mass = cmass;
                    imass = smass = 1.0/mass;
                }else {
                    mass = PR(Const).POSINF();
                    imass = smass = 0.0;
                }
            }
        }
    }

    public function validate_worldCOM() {
        //dependancy checked
        if(inv(worldCOM)) {
            inv(worldCOM) = false;
            validate_localCOM();
            validate_axis();

            vec_localglobal(axis,pos, localCOM,worldCOM);
            if(wrap_worldCOM!=null)
                vec_set(wrap_worldCOM.pr(inner).,worldCOM);
        }
    }

    public function getlocalCOM() {
        DEBUG(if(shapes.empty()) throw "Error: localCOM only makes sense when Body has Shapes";)
        validate_localCOM();
    }
    public function getworldCOM() {
        DEBUG(if(shapes.empty()) throw "Error: worldCOM only makes sense when Body has Shapes";)
        validate_worldCOM();
    }

    //----------------------------------------------------------------------------------------------

    flibmdel public inline function __immutable_midstep(name:String) {
        DEBUG(if(space!=null && space.midstep) throw "Error: "+name+" cannot be set during a space step()";)
    }

    //----------------------------------------------------------------------------------------------

    public function clear() {
        DEBUG(if(space!=null) throw "Error: Cannot clear a Body if it is currently being used by a Space!";)
        DEBUG(if(!constraints.empty()) throw "Error: Cannot clear a Body if it is currently being used by a constraint!";)

        ClearWith(s,shapes, {
            s.removedFromBody();
            s.body = null;
        });
        invalidate_shapes();

        vec_set(pre_pos,0,0);
        vec_set(pos,0,0);
        vec_set(vel,0,0);
        vec_set(force,0,0);
        vec_set(kinvel,0,0);
        vec_set(svel,0,0);

        angvel = torque = kinangvel = pre_rot = rot = 0;

        invalidate_pos();
        invalidate_rot();
        vec_set(axis,0,1); inv(axis) = false;

        massMode = Flag(MassMode,DEFAULT);
        gravMassMode = Flag(GravMassMode,DEFAULT);
        gravMassScale = 1.0;
        inertiaMode = Flag(InertiaMode,DEFAULT);

        norotate = false;
        nomove = false;
    }

    //----------------------------------------------------------------------------------------------

    //used for space.world static rogue body.
    public static function __static():Body {
        var ret = new Body(BodyType.STATIC);
        var si = ret.pr(inner);
        si.world = true;
        si.wrap_shapes.pr(inner).immutable = true;
        si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
        si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;

        //remove default ANY_BODY type.
        si.cbTypes.clear();

        return ret;
    }

    //----------------------------------------------------------------------------------------------

    //was previously a lambda
    private function aabb_validate() {
        DEBUG(if(shapes.empty()) throw "Error: bounds only makes sense when Body has shapes";)
        validate_aabb();
    }

    //were previously lambdas
    private function shapes_adder(s:Shape) {
        if(s.pr(inner).body!=this) {
            if(s.pr(inner).body!=null) s.pr(inner).body.wrap_shapes.remove(s);
            s.pr(inner).body = this;
            s.pr(inner).addedToBody();

            if(space!=null) space.added_shape(s.pr(inner));
            if (s.pr(inner).isPolygon())
            {
                s.pr(inner).polygon.invalidate_gaxi();
                s.pr(inner).polygon.invalidate_gverts();
            }

            return true;
        }else return false;
    }
    private function shapes_subber(s:Shape) {
        if(space!=null) space.removed_shape(s.pr(inner));

        s.pr(inner).body=null;
        s.pr(inner).removedFromBody();
    }
    private function shapes_invalidate(_) {
        invalidate_shapes();
    }
    DEBUG(private function shapes_modifiable() {
        immutable_midstep("Body::shapes");
        if(isStatic() && space!=null)
            throw "Error: Cannot modifiy shapes of static object once added to Space";
    })

    public function new() {
        super();
        ibody = this;
        world = false;
        bulletEnabled = false;
        sweepTime = 0;
        sweep_angvel = 0;

        norotate = nomove = false;
        disableCCD = false;

        vec_set(pos,0,0);
        rot = 0;
        vec_set(axis,0,1);

        vec_set(svel,0,0);
        vec_set(vel,0,0);
        vec_set(kinvel,0,0);
        vec_set(force,0,0);
        torque = angvel = kinangvel = 0;

        vec_set(pre_pos,PR(Const).POSINF(),PR(Const).POSINF());
        pre_rot = PR(Const).POSINF();

        vec_set(localCOM,0,0);
        vec_set(worldCOM,0,0);

        inv(aabb) = true;
        aabb = PR(AABB).get(0,0,0,0);
        aabb._immutable = true;
        var me = this;
        aabb._validate = aabb_validate;

        massMode = Flag(MassMode,DEFAULT);
        gravMassMode = Flag(GravMassMode,DEFAULT);
        gravMassScale = 1.0;
        inertiaMode = Flag(InertiaMode,DEFAULT);

        arbiters = new List(PR(Arbiter))();

        constraints = new List(PR(Constraint))();

        shapes = new List(PR(Shape))();
        wrap_shapes = PR(ShapeList).get(shapes);
        wrap_shapes.pr(inner).adder = shapes_adder;
        wrap_shapes.pr(inner).subber = shapes_subber;
        wrap_shapes.pr(inner)._invalidate = shapes_invalidate;
        DEBUG(wrap_shapes.pr(inner)._modifiable = shapes_modifiable;)

        kinematicDelaySleep = false;
    }

    //----------------------------------------------------------------------------------------------

    public function addedToSpace() {
        assert(component==null,"already has a component?");

        Get(PR(Component), component);
        component.isBody = true;
        component.body = this;

        __iaddedToSpace();
    }

    public function removedFromSpace() {
        while(!arbiters.empty()) {
            var arb = arbiters.pop_unsafe();
            arb.lazyRetire(space,this);
        }

        Free(PR(Component),component);
        component = null;

        __iremovedFromSpace();
    }

    //----------------------------------------------------------------------------------------------

    public function copy() {
        var ret = new Body().pr(inner);

        ret.type = type;

        ret.bulletEnabled = bulletEnabled;
        ret.disableCCD = disableCCD;

        Iter(s,shapes,{
            ret.outer.shapes.add(s.outer.copy());
        });

        vec_set(ret.pos,pos);
        vec_set(ret.vel,vel);
        vec_set(ret.force,force);

        ret.rot = rot;
        ret.angvel = angvel;
        ret.torque = torque;

        vec_set(ret.kinvel, kinvel);
        ret.kinangvel = kinangvel;

        vec_set(ret.svel, svel);

        if(!inv(axis))
            vec_set(ret.axis,axis);
        else ret.invalidate_rot();
        ret.rot = rot;

        ret.massMode = massMode;
        ret.gravMassMode = gravMassMode;
        ret.inertiaMode = inertiaMode;

        ret.norotate = norotate;
        ret.nomove = nomove;

        ret.cmass = cmass;
        ret.cinertia = cinertia;

        if(!inv(mass))
            ret.mass = mass;
        else ret.invalidate_mass();

        if(!inv(gravMass))
            ret.gravMass = gravMass;
        else ret.invalidate_gravMass();

        if(!inv(gravMassScale))
            ret.gravMassScale = gravMassScale;
        else ret.invalidate_gravMassScale();

        if(!inv(inertia))
            ret.inertia = inertia;
        else ret.invalidate_inertia();

        if(!inv(aabb)) {
            vec_set(ret.aabb.min,aabb.min);
            vec_set(ret.aabb.max,aabb.max);
        }else ret.invalidate_aabb();

        if(!inv(localCOM))
            vec_set(ret.localCOM,localCOM);
        else ret.invalidate_localCOM();

        if(!inv(worldCOM))
            vec_set(ret.worldCOM,worldCOM);
        else ret.invalidate_worldCOM();

        copyto(ret.outer);
        return ret.outer;
    }
}
