package zpp_nape.phys;
$(import);

$(mixin global FeatureMix(T,t)

    !!/**
    !! * @private
    !! */
    public var pr(inner):PR(T) = null;

    PublicUserData(pr(inner))

    !!/**
    !! * Set of all active shapes using this object.
    !! * <br/><br/>
    !! * Activeness of a shape in the sense that the Shape's Body is inside of a Space.
    !! * <br/><br/>
    !! * This list is immutable.
    !! */
    property(shapes,ShapeList,{
        if(pr(inner).wrap_shapes==null) pr(inner).wrap_shapes = PR(ShapeList).get(pr(inner).shapes, true);
        return pr(inner).wrap_shapes;
    })

);

//--------------------------------------------------------------------------------------------------

$(mixin global PRFeatureMix(T,t)

    MixPool(PR(T))
    PrivateUserData

    public var outer:T = null;
    public function wrapper() {
        if(outer==null) {
            outer = new T();
            Free(PR(T),outer.pr(inner));
            outer.pr(inner) = this;
        }
        return outer;
    }
    flibmdel public inline function free() {
        outer = null;
    }
    flibmdel public inline function alloc() {}

    //----------------------------------------------------------------------------------------------

    public var shapes:List(PR(Shape)) = null; public var wrap_shapes:ShapeList = null;

    //----------------------------------------------------------------------------------------------

    flibmdel public inline function feature_cons() {
        shapes = new List(PR(Shape))();
    }

    //----------------------------------------------------------------------------------------------

    flibmdel public inline function addShape(shape:PR(Shape)) { shapes.add(shape); }
    flibmdel public inline function remShape(shape:PR(Shape)) { shapes.remove(shape); }

);
