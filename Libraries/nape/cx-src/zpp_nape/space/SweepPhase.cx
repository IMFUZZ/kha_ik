package zpp_nape.space;
$(import);

class PR(SweepData) {
    MixPool(PR(SweepData))
    public var prev:PR(SweepData) = null;

    public var shape:PR(Shape) = null;
    public var aabb:PR(AABB) =null; //=shape.aabb
    flibmdel public inline function free() {
        prev = null;
        shape = null;
        aabb = null;
    }
    flibmdel public inline function alloc() {}

    public function new() {}

    flibmdel public inline function gt(x:PR(SweepData)) {
        return aabb.minx > x.aabb.minx;
    }
}


//1D sweep and prune.
class PR(SweepPhase) extends PR(Broadphase) {
    public var list:PR(SweepData) = null;

    public function new(space:PR(Space)) {
        this.space = space;
        is_sweep = true;
        sweep = this;
    }

    //======================================================================================

    public function __insert(shape:PR(Shape)) {
        assert(shape.sweep==null,"SweepPhase::insert");

        var dat; Get(PR(SweepData), dat);
        shape.sweep = dat;
        dat.shape = shape;
        dat.aabb = shape.aabb;
        //insert at beginning, let broadphase deal with it.
        dat.next = list;
        if(list!=null) list.prev = dat;
        list = dat;
    }
    public function __remove(shape:PR(Shape)) {
        assert(shape.sweep!=null,"SweepPhase::remove");

        var dat = shape.sweep;
        if(dat.prev==null) list = dat.next;
        else dat.prev.next = dat.next;
        if(dat.next!=null) dat.next.prev = dat.prev;
        shape.sweep = null;
        Free(PR(SweepData),dat);
    }
    flibmdel public inline function __sync(shape:PR(Shape)) {
        assert(!shape.body.isStatic(),"static shape being synced?");
        if (!space.continuous) shape.validate_aabb();
    }

    //======================================================================================

    public function sync_broadphase() {
        ///TODO: make this use the invalidation system.
        //validate shape aabb's and other properties.
        space.validation();
        if (list != null)
            sync_broadphase_fast();
    }

    flibmdel public inline function sync_broadphase_fast() {
        //sort list.
        var a = list.next;
        while(a!=null) {
            #if NAPE_TIMES Debug.BROADTOTAL++; #end
            var n = a.next;
            var b = a.prev;
            if(a.gt(b)) { a = n; continue; }
            #if NAPE_TIMES Debug.BROADCLASH++; #end
            while(b.prev != null && b.prev.gt(a)) b = b.prev;
            //remove a
            var prev = a.prev;
            prev.next = a.next;
            if(a.next!=null) a.next.prev = prev;
            //insert a before b
            if(b.prev==null) {
                a.prev = null; list = a;
                a.next = b; b.prev = a;
            }else {
                a.prev = b.prev; b.prev = a;
                a.prev.next = a; a.next = b;
            }
            a = n;
        }
    }

    public override function broadphase(space:PR(Space), discrete:Bool) {
        if(list!=null) {
            //validation is already done on aabb's
            sync_broadphase_fast();

            //collide
            var d1 = list;
            while(d1!=null) {
                var d2 = d1.next;
                var s1 = d1.shape;
                var b1 = s1.body;

                var bottom = d1.aabb.maxx;
                while(d2!=null) {
                    if(d2.aabb.minx > bottom) break;

                    var s2 = d2.shape;
                    var b2 = s2.body;

                    if(b2==b1) {
                        d2 = d2.next;
                        continue;
                    }

                    if(b1.isStatic() && b2.isStatic()) {
                        d2 = d2.next;
                        continue;
                    }
                    if(b1.component.sleeping && b2.component.sleeping) {
                        d2 = d2.next;
                        continue;
                    }
                    if(s1.aabb.intersectY(s2.aabb)) {
                        if (discrete) {
                            space.narrowPhase(s1,s2, !b1.isDynamic()||!b2.isDynamic(), null, false);
                        }else {
                            space.continuousEvent(s1,s2, !b1.isDynamic()||!b2.isDynamic(), null, false);
                        }
                    }

                    d2 = d2.next;
                }
                d1 = d1.next;
            }
        }
    }

    //==============================================================================================

    //could be optimised, but not necessary really.
    public override function clear() {
        while(list!=null) {
            list.shape.removedFromSpace();
            __remove(list.shape);
        }
    }

    //==============================================================================================

    public override function shapesUnderPoint(x:Float,y:Float,filter:PR(InteractionFilter),output:ShapeList) {
        sync_broadphase();

        var v = PR(Vec2).get(x,y);
        var ret = (output == null ? new ShapeList() : output);
        var a = list;
        while(a!=null && a.aabb.minx> x) a = a.next;
        while(a!=null && a.aabb.minx<=x) {
            if(a.aabb.maxx>=x && a.aabb.miny<=y && a.aabb.maxy>=y) {
                var shape = a.shape;
                if(filter==null || shape.filter.shouldCollide(filter)) {
                    if(shape.isCircle()) {
                        if(PR(Collide).circleContains(shape.circle,v))
                            ret.push(shape.outer);
                    }else {
                        if(PR(Collide).polyContains(shape.polygon,v))
                            ret.push(shape.outer);
                    }
                }
            }
            a = a.next;
        }
        Free(PR(Vec2),v);
        return ret;
    }
    public override function bodiesUnderPoint(x:Float,y:Float,filter:PR(InteractionFilter),output:BodyList) {
        sync_broadphase();

        var v = PR(Vec2).get(x,y);
        var ret = (output == null ? new BodyList() : output);
        var a = list;
        while(a!=null && a.aabb.minx> x) a = a.next;
        while(a!=null && a.aabb.minx<=x) {
            if(a.aabb.maxx>=x && a.aabb.miny<=y && a.aabb.maxy>=y) {
                var shape = a.shape;
                var body = shape.body.outer;
                if(!ret.has(body)) {
                    if(filter==null || shape.filter.shouldCollide(filter)) {
                        if(shape.isCircle()) {
                            if(PR(Collide).circleContains(shape.circle,v))
                                ret.push(body);
                        }else {
                            if(PR(Collide).polyContains(shape.polygon,v))
                                ret.push(body);
                        }
                    }
                }
            }
            a = a.next;
        }
        Free(PR(Vec2),v);
        return ret;
    }

    //==============================================================================================

    public override function shapesInAABB(aabb:PR(AABB),strict:Bool,containment:Bool,filter:PR(InteractionFilter), output:ShapeList) {
        sync_broadphase();
        updateAABBShape(aabb);

        var ab = aabbShape.pr(inner).aabb;
        var ret = (output == null ? new ShapeList() : output);
        var a = list;
        while(a!=null && a.aabb.maxx< ab.minx) a = a.next;
        while(a!=null && a.aabb.minx<=ab.maxx) {
            var shape = a.shape;
            if(filter==null || shape.filter.shouldCollide(filter)) {
                if(strict) {
                    if(containment) {
                        if(PR(Collide).containTest(aabbShape.pr(inner),shape))
                            ret.push(shape.outer);
                    }else {
                        if(ab.contains(a.aabb))
                            ret.push(shape.outer);
                        else if(a.aabb.intersect(ab)) {
                            if(PR(Collide).testCollide_safe(shape,aabbShape.pr(inner)))
                                ret.push(shape.outer);
                        }
                    }
                }else if(containment ? ab.contains(a.aabb) : a.aabb.intersect(ab))
                    ret.push(shape.outer);
            }
            a = a.next;
        }
        return ret;
    }
    public var failed:BodyList = null;
    public override function bodiesInAABB(aabb:PR(AABB),strict:Bool,containment:Bool,filter:PR(InteractionFilter), output:BodyList) {
        sync_broadphase();
        updateAABBShape(aabb);

        var ab = aabbShape.pr(inner).aabb;
        var ret = (output == null ? new BodyList() : output);
        if (failed == null) failed = new BodyList();
        var a = list;
        while(a!=null && a.aabb.maxx< ab.minx) a = a.next;
        while(a!=null && a.aabb.minx<=ab.maxx) {
            var shape = a.shape;
            var body = shape.body.outer;
            if (a.aabb.intersect(ab)) {
                if (filter==null || shape.filter.shouldCollide(filter)) {
                    if (strict) {
                        if (containment) {
                            if (!failed.has(body)) {
                                var col = PR(Collide).containTest(aabbShape.pr(inner), shape);
                                if (!ret.has(body) && col) ret.push(body);
                                else if (!col) { ret.remove(body); failed.push(body); }
                            }
                        }
                        else if (!ret.has(body) && PR(Collide).testCollide_safe(shape,aabbShape.pr(inner))) {
                            ret.push(body);
                        }
                    }else {
                        if (containment) {
                            if (!failed.has(body)) {
                                var col = ab.contains(shape.aabb);
                                if (!ret.has(body) && col) ret.push(body);
                                else if (!col) { ret.remove(body); failed.push(body); }
                            }
                        }
                        else if (!ret.has(body) && ab.contains(shape.aabb)) {
                            ret.push(body);
                        }
                    }
                }
            }
            a = a.next;
        }
        failed.clear();
        return ret;
    }

    //==============================================================================================

    public override function shapesInCircle(x:Float,y:Float,r:Float,containment:Bool,filter:PR(InteractionFilter), output:ShapeList) {
        sync_broadphase();
        updateCircShape(x,y,r);

        var ab = circShape.pr(inner).aabb;
        var ret = (output == null ? new ShapeList() : output);
        var a = list;
        while(a!=null && a.aabb.maxx< ab.minx) a = a.next;
        while(a!=null && a.aabb.minx<=ab.maxx) {
            if(a.aabb.intersect(ab)) {
                var shape = a.shape;
                if(filter==null || shape.filter.shouldCollide(filter)) {
                    if(containment) {
                        if(PR(Collide).containTest(circShape.pr(inner),shape))
                            ret.push(shape.outer);
                    }else if(PR(Collide).testCollide_safe(shape,circShape.pr(inner)))
                        ret.push(shape.outer);
                }
            }
            a = a.next;
        }
        return ret;
    }
    public override function bodiesInCircle(x:Float,y:Float,r:Float,containment:Bool,filter:PR(InteractionFilter), output:BodyList) {
        sync_broadphase();
        updateCircShape(x,y,r);

        var ab = circShape.pr(inner).aabb;
        var ret = (output == null ? new BodyList() : output);
        if (failed == null) failed = new BodyList();
        var a = list;
        while(a!=null && a.aabb.maxx< ab.minx) a = a.next;
        while(a!=null && a.aabb.minx<=ab.maxx) {
            if(a.aabb.intersect(ab)) {
                var shape = a.shape;
                var body = shape.body.outer;
                if (filter==null || shape.filter.shouldCollide(filter)) {
                    if (containment) {
                        if (!failed.has(body)) {
                            var col = PR(Collide).containTest(circShape.pr(inner), shape);
                            if (!ret.has(body) && col) ret.push(body);
                            else if (!col) { ret.remove(body); failed.push(body); }
                        }
                    }
                    else if (!ret.has(body) && PR(Collide).testCollide_safe(shape,circShape.pr(inner))) {
                        ret.push(body);
                    }
                }
            }
            a = a.next;
        }
        failed.clear();
        return ret;
    }

    //==============================================================================================

    public override function shapesInShape(shape:PR(Shape),containment:Bool,filter:PR(InteractionFilter), output:ShapeList) {
        sync_broadphase();
        validateShape(shape);

        var ab = shape.aabb;
        var ret = (output == null ? new ShapeList() : output);
        var a = list;
        while(a!=null && a.aabb.maxx< ab.minx) a = a.next;
        while(a!=null && a.aabb.minx<=ab.maxx) {
            if(a.aabb.intersect(ab)) {
                var shape2 = a.shape;
                if(filter==null || shape2.filter.shouldCollide(filter)) {
                    if(containment) {
                        if(PR(Collide).containTest(shape,shape2))
                            ret.push(shape2.outer);
                    }else if(PR(Collide).testCollide_safe(shape2,shape))
                        ret.push(shape2.outer);
                }
            }
            a = a.next;
        }
        return ret;
    }
    public override function bodiesInShape(shape:PR(Shape),containment:Bool,filter:PR(InteractionFilter), output:BodyList) {
        sync_broadphase();
        validateShape(shape);

        var ab = shape.aabb;
        var ret = (output == null ? new BodyList() : output);
        if (failed == null) failed = new BodyList();
        var a = list;
        while(a!=null && a.aabb.maxx< ab.minx) a = a.next;
        while(a!=null && a.aabb.minx<=ab.maxx) {
            if(a.aabb.intersect(ab)) {
                var shape2 = a.shape;
                var body = shape2.body.outer;
                if (filter==null || shape2.filter.shouldCollide(filter)) {
                    if (containment) {
                        if (!failed.has(body)) {
                            var col = PR(Collide).containTest(shape, shape2);
                            if (!ret.has(body) && col) ret.push(body);
                            else if (!col) { ret.remove(body); failed.push(body); }
                        }
                    }
                    else if (!ret.has(body) && PR(Collide).testCollide_safe(shape,shape2)) {
                        ret.push(body);
                    }
                }
            }
            a = a.next;
        }
        failed.clear();
        return ret;
    }

    //==============================================================================================

    public override function rayCast(ray:PR(Ray),inner:Bool,filter:PR(InteractionFilter)) {
        sync_broadphase();
        ray.validate_dir();

        var rayab = ray.rayAABB();

        var mint = ray.maxdist;
        var minres:RayResult = null;
        //special case for dirx <,=,> 0 to abuse sweep space a little if possible.
        if(ray.dirx==0) {
            var a = list;
            while(a!=null && a.aabb.minx <= rayab.minx) {
                if(a.aabb.intersect(rayab) && (filter==null || a.shape.filter.shouldCollide(filter))) {
                    var t = ray.aabbsect(a.aabb);
                    if(t>=0 && t<mint) {
                        var result =
                            if(a.shape.isCircle()) ray.circlesect(a.shape.circle,inner,mint)
                            else ray.polysect(a.shape.polygon,inner,mint);

                        if(result!=null) {
                            mint = result.distance;
                            if (minres != null) {
                                minres.dispose();
                            }
                            minres = result;
                        }
                    }
                }
                a = a.next;
            }
        }else if(ray.dirx<0) {
            var a = list;
            //use reverse order.
            var b = null;
            while(a!=null && a.aabb.minx <= rayab.maxx) { b = a; a = a.next; }
            a = b;
            while(a!=null) {
                if(a.aabb.intersect(rayab) && (filter==null || a.shape.filter.shouldCollide(filter))) {
                    var t = ray.aabbsect(a.aabb);
                    if(t>=0 && t<mint) {
                        var result =
                            if(a.shape.isCircle()) ray.circlesect(a.shape.circle,inner,mint)
                            else ray.polysect(a.shape.polygon,inner,mint);

                        if(result!=null) {
                            mint = result.distance;
                            if (minres != null) {
                                minres.dispose();
                            }
                            minres = result;
                        }
                    }
                }
                a = a.prev;
            }
        }else {
            var a = list;
            while(a!=null && a.aabb.minx <= rayab.maxx && a.aabb.minx < ray.originx+ray.dirx*mint) {
                if(a.aabb.intersect(rayab) && (filter==null || a.shape.filter.shouldCollide(filter))) {
                    var t = ray.aabbsect(a.aabb);
                    if(t>=0 && t<mint) {
                        var result =
                            if(a.shape.isCircle()) ray.circlesect(a.shape.circle,inner,mint)
                            else ray.polysect(a.shape.polygon,inner,mint);

                        if(result!=null) {
                            mint = result.distance;
                            if (minres != null) {
                                minres.dispose();
                            }
                            minres = result;
                        }
                    }
                }
                a = a.next;
            }
        }

        Free(PR(AABB), rayab);
        return minres;
    }

    public override function rayMultiCast(ray:PR(Ray),inner:Bool,filter:PR(InteractionFilter), output:RayResultList) {
        sync_broadphase();
        ray.validate_dir();

        var rayab = ray.rayAABB();
        var ret = (output == null ? new RayResultList() : output);

        //special case for dirx <,=,> 0 to abuse sweep space a little if possible.
        if(ray.dirx==0) {
            var a = list;
            while(a!=null && a.aabb.minx <= rayab.minx) {
                if(a.aabb.intersect(rayab) && (filter==null || a.shape.filter.shouldCollide(filter))) {
                    var t = ray.aabbsect(a.aabb);
                    if(t>=0) {
                        if(a.shape.isCircle()) ray.circlesect2(a.shape.circle,inner,ret);
                        else ray.polysect2(a.shape.polygon,inner,ret);
                    }
                }
                a = a.next;
            }
        }else if(ray.dirx<0) {
            var a = list;
            //use reverse order.
            var b = null;
            while(a!=null && a.aabb.minx <= rayab.maxx) { b = a; a = a.next; }
            a = b;
            while(a!=null) {
                if(a.aabb.intersect(rayab) && (filter==null || a.shape.filter.shouldCollide(filter))) {
                    var t = ray.aabbsect(a.aabb);
                    if(t>=0) {
                        if(a.shape.isCircle()) ray.circlesect2(a.shape.circle,inner,ret);
                        else ray.polysect2(a.shape.polygon,inner,ret);
                    }
                }
                a = a.prev;
            }
        }else {
            var a = list;
            while(a!=null && a.aabb.minx <= rayab.maxx) {
                if(a.aabb.intersect(rayab) && (filter==null || a.shape.filter.shouldCollide(filter))) {
                    var t = ray.aabbsect(a.aabb);
                    if(t>=0) {
                        if(a.shape.isCircle()) ray.circlesect2(a.shape.circle,inner,ret);
                        else ray.polysect2(a.shape.polygon,inner,ret);
                    }
                }
                a = a.next;
            }
        }

        Free(PR(AABB), rayab);
        return ret;
    }
}


