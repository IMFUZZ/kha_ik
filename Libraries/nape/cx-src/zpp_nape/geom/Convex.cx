package zpp_nape.geom;
$(import);

$(mixin Vertex() PR(PartitionVertex));

mix_circular(Vertex,
class PR(Convex) {
    static function isinner(a:Vertex,b:Vertex,c:Vertex) {
        vec_new(u); vec_sub(a.,b.,u);
        vec_new(v); vec_sub(c.,b.,v);
        return vec_cross(u,v)>=0;
    }
    public static function optimise(P:PR(PartitionedPoly)) {
        for_iter(p, P.vertices, p.sort());
        for_iter(p, P.vertices,{
            var pright = p.prev;
            var ppre = null;
            Iter(pdiag, p.diagonals, {
                var pleft = if(cx_ite.next==null) p.next else cx_ite.next.elem();
                //canot remove diagonal from p side.
                if(!isinner(pleft,p,pright)) {
                    ppre = cx_ite;
                    pright = pdiag;
                    cx_continue;
                }

                //now check q side
                var removable = true;
                var q = pdiag;
                var qright = q.prev;
                var qpre = null;
                Iter(qdiag, q.diagonals, {
                    if(qdiag==p) {
                        var qleft = if(cx_ite.next==null) q.next else cx_ite.next.elem();
                        removable = isinner(qleft,q,qright);
                        cx_break;
                    }
                    qright = qdiag;
                    qpre = cx_ite;
                });

                //and remove it if possible
                if(removable) {
                    cx_ite = p.diagonals.erase(ppre);
                    q.diagonals.erase(qpre);
                    continue;
                }

                pright = pdiag;
                ppre = cx_ite;
            });
        });
    }
}
)
