package zpp_nape.geom;
$(import);

/**

    Intrusive 2D and 3D vectors.

**/

$(mixin global vec_new(acc,n) acc var n`x:Float = 0.0; acc var n`y:Float = 0.0);
$(mixin global vec_new(n)     vec_new(,n));
$(mixin global vec_new(n,X,Y)
    var n`x:Float = X; var n`y:Float = Y;
    assert(!assert_isNaN(n`x),"vec_new(in n: "+$str(n)+",in x: "+$str(X)+",in y: "+$str(Y)+")");
    assert(!assert_isNaN(n`y),"vec_new(in n: "+$str(n)+",in x: "+$str(X)+",in y: "+$str(Y)+")")
);

//------------------------------------------------------------------------------

$(mixin global vec_str(n) ("{ x: "+n`x+" y: "+n`y+" }"));
$(mixin global mat_str(n) ("{ "+n`a+"  "+n`b+",, "+n`c+"  "+n`d+" }"));

//------------------------------------------------------------------------------

$(mixin global vec_set(n,X,Y) {
    n`x = X; n`y = Y;
    assert(!assert_isNaN(n`x),"vec_set(in n: "+$str(n)+",in x: "+$str(X)+",in y: "+$str(Y)+")");
    assert(!assert_isNaN(n`y),"vec_set(in n: "+$str(n)+",in x: "+$str(X)+",in y: "+$str(Y)+")");
});
$(mixin global vec_set(n,v)   vec_set(n,v`x,v`y));
$(mixin global vec_setneg(n, v) vec_set(n,-v`x,-v`y));

//------------------------------------------------------------------------------

class PR(VecMath) {
    public static inline function vec_dsq(ax:Float, ay:Float, bx:Float, by:Float):Float
    {
        vec_new(d);
        vec_sub(a, b, d);
        return vec_lsq(d);
    }

    public static inline function vec_distance(ax:Float, ay:Float, bx:Float, by:Float):Float {
        vec_new(d);
        vec_sub(a, b, d);
        return vec_length(d);
    }
}

$(mixin global vec_dot   (a,b) (a`x*b`x + a`y*b`y));
$(mixin global vec_cross (a,b) (b`y*a`x - b`x*a`y));
$(mixin global vec_lsq   (a)   vec_dot(a,a));
$(mixin global vec_length(a)   PR(Math).sqrt(vec_lsq(a)));
$(mixin global vec_length_slow(a) Math.sqrt(vec_lsq(a)));
$(mixin global vec_dsq   (a,b) PR(VecMath).vec_dsq(a`x, a`y, b`x, b`y));
$(mixin global vec_distance(a,b) PR(VecMath).vec_distance(a`x, a`y, b`x, b`y));

$(mixin global vec_interp(a,b,t, c) {
    var T = (t);
    assert(!(assert_isNaN(T) || T<0.0 || T>1.0), "vec_interp(in a: "+$str(a)+",in b: "+$str(b)+",in t: "+$str(t)+",out c: "+$str(c)+")");
    c`x = a`x + (b`x-a`x)*T;
    c`y = a`y + (b`y-a`y)*T;
});

//------------------------------------------------------------------------------

$(mixin global vec_normalise(n) {
    var d = vec_lsq(n);
    assert(d!=0.0, "vec_normalise(in n: "+$str(n)+")");
    var imag = PR(Math).invsqrt(d);
    vec_muleq(n,imag);
});
$(mixin global vec_normalise_slow(n) {
    var d = vec_lsq(n);
    assert(d!=0.0, "vec_normalise(in n: "+$str(n)+")");
    var imag = 1.0/Math.sqrt(d);
    vec_muleq(n,imag);
});

$(mixin global vec_normal(n) {
    vec_normalise(n);
    vec_perp(n);
});
$(mixin global vec_normal_slow(n) {
    vec_normalise_slow(n);
    vec_perp(n);
});

//------------------------------------------------------------------------------

$(mixin global vec_negate(n) {
    n`x = -n`x;
    n`y = -n`y;
});
$(mixin global vec_perp(n) {
    var t = n`x;
    n`x = -n`y;
    n`y = t;
});
$(mixin global vec_perp(n,r) vec_set(r,-n`y,n`x));

//------------------------------------------------------------------------------

$(mixin global vec_addmul(a, b, s, r) {
    var t = (s);
    assert(!assert_isNaN(t), "vec_addmul()");
    r`x = a`x + (b`x * t);
    r`y = a`y + (b`y * t);
});

$(mixin global vec_add(a,b, r) { r`x = a`x+b`x; r`y = a`y+b`y; });
$(mixin global vec_sub(a,b, r) { r`x = a`x-b`x; r`y = a`y-b`y; });
$(mixin global vec_mul(a,s, r) {
    var t = (s);
    assert(!assert_isNaN(t), "vec_mul(in a: "+$str(a)+",in s: "+$str(s)+",out r: "+$str(r)+")");
    r`x = a`x*t; r`y = a`y*t;
});
$(mixin global vec_div(a,s, r) vec_mul(a,1.0/(s),r));

//------------------------------------------------------------------------------

$(mixin global vec_addeq(a,b,s) {
    var t = (s);
    assert(!assert_isNaN(t), "vec_addeq(in a: "+$str(a)+",in b: "+$str(b)+",in s: "+$str(s)+")");
    a`x += b`x*t; a`y += b`y*t;
});
$(mixin global vec_subeq(a,b,s) {
    var t = (s);
    assert(!assert_isNaN(t), "vec_subeq(in a: "+$str(a)+",in b: "+$str(b)+",in s: "+$str(s)+")");
    a`x -= b`x*t; a`y -= b`y*t;
});
$(mixin global vec_addeq(a,b) vec_addeq(a,b,1.0));
$(mixin global vec_subeq(a,b) vec_subeq(a,b,1.0));
$(mixin global vec_muleq(a,s) {
    var t = (s);
    assert(!assert_isNaN(t), "vec_muleq(in a: "+$str(a)+",in s: "+$str(s)+")");
    a`x *= t; a`y *= t;
});
$(mixin global vec_diveq(a,s) vec_muleq(a,1.0/(s)));

//------------------------------------------------------------------------------

$(mixin global vec_iadd(a,b) a`x+b`x, a`y+b`y);
$(mixin global vec_isub(a,b) a`x-b`x, a`y-b`y);
$(mixin global vec_imul(a,s) a`x*s,   a`y*s  );
$(mixin global vec_ineg(a)   -a`x,   -a`y    );
$(mixin global vec_iperp(a)  -a`y,    a`x    );

//------------------------------------------------------------------------------

$(mixin global vec_rotate(a,axis,r) { r`x = vec_cross(a,axis); r`y = vec_dot(a,axis); });
$(mixin global vec_revrot(a,axis,r) {
    r`x = a`x*axis`y+a`y*axis`x;
    r`y = a`y*axis`y-a`x*axis`x;
});

$(mixin global vec_rotateq(a,axis) {
    var t = vec_cross(a,axis);
    a`y = vec_dot(a,axis);
    a`x = t;
});
$(mixin global vec_revroteq(a,axis) {
    var t = a`x*axis`y+a`y*axis`x;
    a`y = a`y*axis`y-a`x*axis`x;
    a`x = t;
});

//------------------------------------------------------------------------------

$(mixin global vec_clamp(n,m) {
    var t = (m);
    assert(!assert_isNaN(t),"vec_clamp(in n: "+$str(n)+", in m: "+$str(m)+")");
    var ls = vec_lsq(n);
    if(ls > t*t) {
        assert(ls!=0.0,"vec_clamp(in n: "+$str(n)+", in m: "+$str(m)+")");
        vec_muleq(n,t*PR(Math).invsqrt(ls));
    }
});

$(mixin global vec_project(v,n) vec_mul(n,vec_dot(n,v),v));

//STRICT equality, don't 'want' an epsilon here.
$(mixin global vec_eq(a,b) (a`x == b`x && a`y == b`y));

$(mixin global vec_localglobal(axis,p, v,r) {
    r`x = p`x + vec_cross(v,axis);
    r`y = p`y + vec_dot  (v,axis);
});

//--------------------------------------------------------------------------------------------------

$(mixin global vec3_new(acc, n)
    vec_new(acc,n); acc var n`z:Float = 0.0
);
$(mixin global vec3_new(n) vec3_new(,n));

$(mixin global vec3_new(n,X,Y,Z)
    vec_new(n,X,Y); var n`z:Float = Z
);

$(mixin global vec3_set(n,X,Y,Z) {
    vec_set(n,X,Y); n`z = Z;
});
$(mixin global vec3_set(n,m) {
    vec_set(n,m); n`z = m`z;
});

$(mixin global vec3_addeq(n,m) vec3_addeq(n,m,1));
$(mixin global vec3_subeq(n,m) vec3_subeq(n,m,1));
$(mixin global vec3_addeq(n,m,s) {
    var t = (s);
    vec_addeq(n,m,t); n`z += m`z*t;
});
$(mixin global vec3_subeq(n,m,s) {
    var t = (s);
    vec_subeq(n,m,t); n`z -= m`z*t;
});

$(mixin global vec3_add(n,m, r) {
    vec_add(n,m,r); r`z = n`z+m`z;
});
$(mixin global vec3_sub(n,m, r) {
    vec_sub(n,m,r); r`z = n`z-m`z;
});

$(mixin global vec3_muleq(n,s) {
    var t = (s);
    vec_muleq(n,t);
    n`z *= t;
});

$(mixin global vec3_lsq(n) (vec_lsq(n)+n`z*n`z));

$(mixin global vec3_length(n) PR(Math).sqrt(vec3_lsq(n)));
$(mixin global vec3_length_slow(n) Math.sqrt(vec3_lsq(n)));

$(mixin global vec3_clamp(n,m) {
    var t = (m);
    assert(!assert_isNaN(t),"vec3_clamp(in n: "+$str(n)+", in m: "+$str(m)+")");
    var ls = vec3_lsq(n);
    if(ls > t*t) {
        assert(ls!=0.0,"vec3_clamp(in n: "+$str(n)+", in m: "+$str(m)+")");
        vec3_muleq(n,t*PR(Math).invsqrt(ls));
    }
});
