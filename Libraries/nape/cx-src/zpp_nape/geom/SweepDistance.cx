package zpp_nape.geom;
$(import);

class PR(ToiEvent) {
    MixPool(PR(ToiEvent))
    flibmdel public inline function alloc() {
        failed = false;
        s1 = s2 = null;
        arbiter = null;
    }
    flibmdel public inline function free() {
    }

    public var toi:Float = 0.0;
    public var s1:PR(Shape) = null;
    public var s2:PR(Shape) = null;
    public var arbiter:PR(ColArbiter) = null;

    // Check for invalidations.
    public var frozen1:Bool = false;
    public var frozen2:Bool = false;

    // witness points.
    public var c1:PR(Vec2) = null;
    public var c2:PR(Vec2) = null;

    // axis to deal with degenerate case
    // where c1 === c2
    public var axis:PR(Vec2) = null;

    // handle case where object is rotating fast, and in such a way
    // that the time advancement tends to 0 and continous collision fails
    public var slipped:Bool = false;

    public var failed:Bool = false;
    public var kinematic:Bool = false;

    public function new() {
        c1 = new PR(Vec2)();
        c2 = new PR(Vec2)();
        axis = new PR(Vec2)();
    }
}

class PR(SweepDistance) {

    static public function dynamicSweep(toi:PR(ToiEvent), timeStep:Float, lowerBound:Float, negRadius:Float, userAPI:Bool=false) {
        var s1:PR(Shape) = toi.s1;
        var s2:PR(Shape) = toi.s2;

        var b1:PR(Body) = s1.body;
        var b2:PR(Body) = s2.body;

        // relative linear velocity and angular bias for distance.
        vec_new(delta); vec_sub(b2.vel, b1.vel, delta);
        var ang1 = b1.angvel; if (ang1 < 0) ang1 = -ang1;
        var ang2 = b2.angvel; if (ang2 < 0) ang2 = -ang2;
        var angBias = (s1.sweepCoef * ang1) + (s2.sweepCoef * ang2);

        if (!userAPI && !toi.kinematic &&
            vec_lsq(delta) < (Config.dynamicSweepLinearThreshold * Config.dynamicSweepLinearThreshold) &&
            angBias < Config.dynamicSweepAngularThreshold)
        {
            toi.toi = -1;
            toi.failed = true;
            return;
        }

        var c1 = toi.c1;
        var c2 = toi.c2;
        var axis = toi.axis;

        var curTOI = lowerBound;
        var curIter = 0;
        while (true) {
            b1.sweepIntegrate(curTOI * timeStep);
            b1.sweepValidate(s1);

            b2.sweepIntegrate(curTOI * timeStep);
            b2.sweepValidate(s2);

            var sep = distance(s1, s2, c1, c2, axis) + negRadius;
            var dot = vec_dot(delta, axis.);

            // objects intersecting!
            if (sep < Config.distanceThresholdCCD) {
                if (userAPI)
                {
                    break;
                }
                // check objects not seperating at collision point.
                vec_new(d1); vec_sub(c1., b1.pos, d1);
                vec_new(d2); vec_sub(c2., b2.pos, d2);
                var proj = dot - b1.sweep_angvel * vec_cross(d1, axis.)
                               + b2.sweep_angvel * vec_cross(d2, axis.);
                if (proj > 0)
                {
                    toi.slipped = true;
                }
                if (proj <= 0 || sep < Config.distanceThresholdCCD * 0.5)
                {
                    break;
                }
            }

            // lower bound on TOI advancement
            var denom = (angBias - dot) * timeStep;
            if (denom <= 0) {
                curTOI = -1;
                break;
            }

            var delta = sep / denom;
            if (delta < 1e-6) delta = 1e-6;
            curTOI += delta;
            if (curTOI >= 1) {
                // Numerical inaccuracies and slight overshooting
                // can mean we go beyond curTOI = 1... but curTOI = 1
                // is actually a valid CCD intersection time.
                //
                // so we check.. JUST IN CASE! (can happen.)
                curTOI = 1;
                b1.sweepIntegrate(curTOI * timeStep);
                b1.sweepValidate(s1);

                b2.sweepIntegrate(curTOI * timeStep);
                b2.sweepValidate(s2);

                var sep = distance(s1, s2, c1, c2, axis) + negRadius;
                var dot = vec_dot(delta, axis.);

                // objects intersecting!
                if (sep < Config.distanceThresholdCCD) {
                    if (userAPI)
                    {
                        break;
                    }
                    // check objects not seperating at collision point.
                    vec_new(d1); vec_sub(c1., b1.pos, d1);
                    vec_new(d2); vec_sub(c2., b2.pos, d2);
                    var proj = dot - b1.sweep_angvel * vec_cross(d1, axis.)
                                   + b2.sweep_angvel * vec_cross(d2, axis.);
                    if (proj > 0)
                    {
                        toi.slipped = true;
                    }
                    if (proj <= 0 || sep < Config.distanceThresholdCCD * 0.5)
                    {
                        break;
                    }
                }

                curTOI = -1;
                break;
            }

            if ((++curIter) >= 40)
            {
                if (sep > negRadius) {
                    toi.failed = true;
                }
                break;
            }
        }
        toi.toi = curTOI;
    }

    static public function staticSweep(toi:PR(ToiEvent), timeStep:Float, lowerBound:Float, negRadius:Float) {
        var s1:PR(Shape) = toi.s1; //dynamic
        var s2:PR(Shape) = toi.s2; //static

        var b1:PR(Body) = s1.body;
        var b2:PR(Body) = s2.body;

        // relative linear velocity and angular bias for distance.
        vec_new(delta); vec_setneg(delta, b1.vel);
        var ang1 = b1.sweep_angvel; if (ang1 < 0) ang1 = -ang1;
        var angBias = (s1.sweepCoef * ang1);

        var c1 = toi.c1;
        var c2 = toi.c2;
        var axis = toi.axis;

        var curTOI = lowerBound;
        var curIter = 0;

        while (true) {
            assert(!isNaN(curTOI*timeStep), curTOI+" "+timeStep);
            assert(!isNaN(b1.sweepTime), "sweeeeep");
            b1.sweepIntegrate(curTOI * timeStep);
            b1.sweepValidate(s1);

            var sep = distance(s1, s2, c1, c2, axis) + negRadius;
            var dot = vec_dot(delta, axis.);

            // objects intersecting!
            if (sep < Config.distanceThresholdCCD) {
                vec_new(d1); vec_sub(c1., b1.pos, d1);
                var proj = dot - b1.sweep_angvel * vec_cross(d1, axis.);
                if (proj > 0)
                {
                    toi.slipped = true;
                }
                if (proj <= 0 || sep < Config.distanceThresholdCCD * 0.5)
                {
                    break;
                }
            }

            // lower bound on TOI advancement
            var denom = (angBias - dot) * timeStep;
            if (denom <= 0) {
                curTOI = -1;
                break;
            }

            var delta = sep / denom;
            if (delta < 1e-6) delta = 1e-6;
            assert(!isNaN(delta), delta + " " + (s1.sweepCoef) + " " + ang1);
            curTOI += delta;
            if (curTOI >= 1) {
                // Numerical inaccuracies and slight overshooting
                // can mean we go beyond curTOI = 1... but curTOI = 1
                // is actually a valid CCD intersection time.
                //
                // so we check.. JUST IN CASE! (can happen.)
                curTOI = 1;

                assert(!isNaN(curTOI*timeStep), curTOI+" "+timeStep);
                assert(!isNaN(b1.sweepTime), "sweeeeep");
                b1.sweepIntegrate(curTOI * timeStep);
                b1.sweepValidate(s1);

                var sep = distance(s1, s2, c1, c2, axis) + negRadius;
                var dot = vec_dot(delta, axis.);

                // objects intersecting!
                if (sep < Config.distanceThresholdCCD) {
                    vec_new(d1); vec_sub(c1., b1.pos, d1);
                    var proj = dot - b1.sweep_angvel * vec_cross(d1, axis.);
                    if (proj > 0)
                    {
                        toi.slipped = true;
                    }
                    if (proj <= 0 || sep < Config.distanceThresholdCCD * 0.5)
                    {
                        break;
                    }
                }

                curTOI = -1;
                break;
            }

            if ((++curIter) >= 40) {
                if (sep > negRadius) {
                    toi.failed = true;
                }
                break;
            }
        }
        toi.toi = curTOI;
    }

    static public function distanceBody(
        b1:PR(Body), b2:PR(Body),
        w1:PR(Vec2), w2:PR(Vec2)
    ):Float
    {
        var t1; Get(PR(Vec2), t1);
        var t2; Get(PR(Vec2), t2);
        var ax; Get(PR(Vec2), ax);
        var min = PR(Const).FMAX;
        Iter(s1, b1.shapes, {
            Iter(s2, b2.shapes, {
                var dist = distance(s1, s2, t1, t2, ax, min);
                if (dist < min)
                {
                    min = dist;
                    vec_set(w1., t1.);
                    vec_set(w2., t2.);
                }
            });
        });
        Free(PR(Vec2), t1);
        Free(PR(Vec2), t2);
        Free(PR(Vec2), ax);
        return min;
    }

    $(mixin circle2circle(c1, c2, r1, r2, w1, w2, ax, dist, upperBound) {
        vec_new(n);
        vec_sub(c2, c1, n);
        var len = vec_length(n);
        dist = len - (r1 + r2);
        if (dist < upperBound) {
            if (len == 0) vec_set(n, 1, 0);
            else vec_diveq(n, len);

            vec_addmul(c1, n,  r1, w1);
            vec_addmul(c2, n, -r2, w2);
            vec_set(ax, n);
        }
    });

    // Compute signed distance between shapes with witnesses.
    static public inline function distance(
        s1:PR(Shape), s2:PR(Shape),
        w1:PR(Vec2), w2:PR(Vec2),
        axis:PR(Vec2),
        upperBound : Float = 1e100
    ):Float
    {
        if (s1.isCircle() && s2.isCircle()) {
            var c1 = s1.circle;
            var c2 = s2.circle;

            var dist;
            circle2circle(
                c1.worldCOM, c2.worldCOM, c1.radius, c2.radius,
                w1., w2., axis., dist, upperBound
            );
            return dist;
        }
        else {
            var swapped = false;
            if(s1.isCircle() && s2.isPolygon()) {
                var tmp = s1;
                s1 = s2;
                s2 = tmp;

                var tmp2 = w1;
                w1 = w2;
                w2 = tmp2;
                swapped = true;
            }

            if (s1.isPolygon() && s2.isCircle()) {
                var poly = s1.polygon;
                var circle = s2.circle;

                // Find candidate edge on polygon.
                // If circle is beyond an edge projection, then this is the largest
                //   positive distance edge based on projection.
                // Else it is the smallest negative distance edge based on projection.
                var best = -PR(Const).FMAX;
                var a0 = null;

                Iter(a, poly.edges, {
                    var dist = vec_dot(a.gnorm, circle.worldCOM) - a.gprojection - circle.radius;
                    if (dist > upperBound) {
                        best = dist;
                        cx_break;
                    }
                    if (dist > 0) {
                        if (dist > best) {
                            best = dist;
                            a0 = a;
                        }
                    }
                    else if (best < 0 && dist > best) {
                        best = dist;
                        a0 = a;
                    }
                });

                if (best < upperBound) {
                    var v0 = a0.gp0;
                    var v1 = a0.gp1;
                    var dt = vec_cross(a0.gnorm, circle.worldCOM);
                    if (dt <= vec_cross(a0.gnorm, v0.)) {
                        circle2circle(
                            v0., circle.worldCOM, 0, circle.radius,
                            w1., w2., axis., best, upperBound
                        );
                    }
                    else if (dt >= vec_cross(a0.gnorm, v1.)) {
                        circle2circle(
                            v1., circle.worldCOM, 0, circle.radius,
                            w1., w2., axis., best, upperBound
                        );
                    }
                    else {
                        vec_addmul(circle.worldCOM, a0.gnorm, -circle.radius, w2.);
                        vec_addmul(w2., a0.gnorm, -best, w1.);
                        vec_set(axis., a0.gnorm);
                    }
                }

                if (swapped) vec_negate(axis.);
                return best;
            }
            else {
                var p1 = s1.polygon;
                var p2 = s2.polygon;

                // Find candidate edge on polygons.
                // If polygons are intersecting, this is smallest penetration edge.
                // Else the largest distance edge by projection.
                var best = -PR(Const).FMAX;
                var a1 = null;
                var a2 = null;
                var besti = 0;

                $(mixin doaxis(i, pa, pb)
                    Iter(a, pa.edges, {
                        var min = PR(Const).FMAX;
                        Iter(v, pb.gverts, {
                            var k = vec_dot(a.gnorm, v.);
                            if (k < min) min = k;
                        });
                        min -= a.gprojection;
                        if (min > upperBound) {
                            best = min;
                            cx_break;
                        }
                        if (min > 0) {
                            if (min > best) {
                                best = min;
                                a`i = a;
                                besti = i;
                            }
                        }
                        else if (best < 0 && min > best) {
                            best = min;
                            a`i = a;
                            besti = i;
                        }
                    })
                );

                doaxis(1, p1, p2);
                if (best < upperBound) {
                    doaxis(2, p2, p1);
                    if (best < upperBound) {
                        var q1, q2;
                        var ax;
                        if (besti == 1) {
                            q1 = p1; q2 = p2;
                            ax = a1;
                        }
                        else {
                            q1 = p2; q2 = p1;
                            ax = a2;
                            var tmp = w1;
                            w1 = w2;
                            w2 = tmp;
                            swapped = !swapped;
                        }

                        // Find most similar edge on q2 for axis ax on q1.
                        var ay:PR(Edge) = null;
                        var min = PR(Const).FMAX;
                        Iter(a, q2.edges, {
                            var k = vec_dot(ax.gnorm, a.gnorm);
                            if (k < min)
                            {
                                min = k;
                                ay = a;
                            }
                        });

                        if (swapped) vec_setneg(axis., ax.gnorm);
                        else vec_set(axis., ax.gnorm);

                        // Find witness points on edges.
                        // In seperation case, this is the closest points on lines.
                        // In penetration case, we find the deepest of the vertices clamped to
                        //   the region defined by the edge.
                        if (best >= 0) {
                            var v0 = ax.gp0;
                            var v1 = ax.gp1;

                            var q0 = ay.gp0;
                            var q1 = ay.gp1;

                            vec_new(v); vec_new(q);
                            vec_sub(v1., v0., v);
                            vec_sub(q1., q0., q);
                            var vdot = 1 / vec_dot(v, v);
                            var qdot = 1 / vec_dot(q, q);

                            var t1 = - (vx * (v0.x - q0.x) + vy * (v0.y - q0.y)) * vdot;
                            var t2 = - (vx * (v0.x - q1.x) + vy * (v0.y - q1.y)) * vdot;
                            var s1 = - (qx * (q0.x - v0.x) + qy * (q0.y - v0.y)) * qdot;
                            var s2 = - (qx * (q0.x - v1.x) + qy * (q0.y - v1.y)) * qdot;
                            if (t1 < 0) t1 = 0; else if (t1 > 1) t1 = 1;
                            if (t2 < 0) t2 = 0; else if (t2 > 1) t2 = 1;
                            if (s1 < 0) s1 = 0; else if (s1 > 1) s1 = 1;
                            if (s2 < 0) s2 = 0; else if (s2 > 1) s2 = 1;

                            vec_new(f1); vec_addmul(v0., v, t1, f1);
                            vec_new(f2); vec_addmul(v0., v, t2, f2);
                            vec_new(g1); vec_addmul(q0., q, s1, g1);
                            vec_new(g2); vec_addmul(q0., q, s2, g2);

                            var d1 = vec_dsq(f1, q0.);
                            var d2 = vec_dsq(f2, q1.);
                            var e1 = vec_dsq(g1, v0.);
                            var e2 = vec_dsq(g2, v1.);

                            vec_new(minf); var minq = null;
                            if (d1 < d2) {
                                vec_set(minf, f1); minq = q0;
                            }
                            else {
                                vec_set(minf, f2); minq = q1;
                                d1 = d2;
                            }

                            vec_new(ming); var minv = null;
                            if (e1 < e2) {
                                vec_set(ming, g1); minv = v0;
                            }
                            else {
                                vec_set(ming, g2); minv = v1;
                                e1 = e2;
                            }

                            if (d1 < e1) {
                                vec_set(w1., minf);
                                vec_set(w2., minq.);
                                best = Math.sqrt(d1);
                            }
                            else {
                                vec_set(w2., ming);
                                vec_set(w1., minv.);
                                best = Math.sqrt(e1);
                            }

                            if (best != 0) {
                                vec_sub(w2., w1., axis.);
                                vec_diveq(axis., best);
                                if (swapped) vec_negate(axis.);
                            }

                            return best;
                        }
                        else {
                            vec_new(c0); vec_set(c0,ay.gp0.);
                            vec_new(c1); vec_set(c1,ay.gp1.);

                            vec_new(dv); vec_sub(c1,c0,dv);
                            var d0 = vec_cross(c0,ax.gnorm);
                            var d1 = vec_cross(c1,ax.gnorm);
                            var den = 1/(d1-d0);
                            //clip c0
                            var t = (-ax.tp1 - d0)*den;
                            if(t>Config.epsilon) vec_addeq(c0,dv,t);
                            //clip c1
                            var t = (-ax.tp0 - d1)*den;
                            if(t<-Config.epsilon) vec_addeq(c1,dv,t);

                            var c0d = vec_dot(c0,ax.gnorm)-ax.gprojection;
                            var c1d = vec_dot(c1,ax.gnorm)-ax.gprojection;
                            if (c0d < c1d) {
                                vec_set(w2., c0);
                                vec_addmul(w2., ax.gnorm, -c0d, w1.);
                                return c0d;
                            }
                            else {
                                vec_set(w2., c1);
                                vec_addmul(w2., ax.gnorm, -c1d, w1.);
                                return c1d;
                            }
                        }
                    }else
                        return upperBound;
                }else
                    return upperBound;
            }
        }
    }

}
