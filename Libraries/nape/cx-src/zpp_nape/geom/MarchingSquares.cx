package zpp_nape.geom;
$(import);

$(mixin Vertex() PR(GeomVert));
$(mixin Polygon() Vertex);

$(mixin VPair() PR(MarchPair));
$(mixin Span() PR(MarchSpan));

class Span {
    //disjoint set forest to make sure we only output unique poly
    DSF(Mixin(Span));
    public var out:Bool = false;

    MixPool(Span)
    flibmdel public inline function free() {
        parent = this;
    }
    flibmdel public inline function alloc() {
        out = false;
        rank = 0;
    }

    public function new() {
        parent = this;
    }
}

class VPair {
    //saddle points may generate 2 polygons.
    // p1 may not always combine left (dangerous degenerate removals)
    // p2 will always combine right
    public var p1:Polygon = null; public var key1:Int = 0; public var okey1:Int = 0;
    public var p2:Polygon = null; public var key2:Int = 0; public var okey2:Int = 0;

    // right polygon (might not be combRight'able)
    // pr = p2 if p2!=null else p1
    public var pr:Polygon = null; public var keyr:Int = 0; public var okeyr:Int = 0;

    // pointer to downlink (as connections get destroyed in LR comb)
    public var pd:Polygon = null;

    //to compare polygons with since Polygon is a pointer to some vertex, not the whole polygon.
    public var span1:Span = null;
    public var span2:Span = null;
    public var spanr:Span = null;

    MixPool(VPair)
    flibmdel public inline function free() {
        p1 = p2 = pr = pd = null;
        span1 = span2 = spanr = null;
    }
    flibmdel public inline function alloc() {}

    public function new() {}
}

class PR(MarchingSquares) {

    static var me:PR(MarchingSquares) = new PR(MarchingSquares)();
    function new() {}

    static var isos:Array2(Float);  // resized on demand
    static var ints:Array2(Vertex); // resized on demand
    static var map :Array2(VPair);  // resized on demand

    public static function run(iso:IsoFunctionDef,bx0:Float,by0:Float,bx1:Float,by1:Float,cell:Vec2,quality:Int,combine:Bool,ret:GeomPolyList) {

        var xp = (bx1-bx0)/cell.x; var xn:Int = fastint(xp);
        var yp = (by1-by0)/cell.y; var yn:Int = fastint(yp);
        if(xp!=xn) xn++;
        if(yp!=yn) yn++;

        if(combine) {
            if (map == null) {
                map = new Array2(VPair)(xn,yn);
            }
            else {
                map.resize(xn, yn, null);
            }
        }

        //so as to make sure each logical vertex is computed only once
        //and avoid any possible corner cases with a logical vertex marked
        //somtimes inside, sometimes outside etc.
        if (isos == null) {
            isos = new Array2(Float)(xn+1, yn+1);
        }
        else {
            isos.resize(xn+1, yn+1, 0);
        }

        for(y in 0...yn+1) {
            var yc = if(y==0) by0 else if(y<=yn) by0 + cell.y*y else by1;
            for(x in 0...xn+1) {
                var xc = if(x==0) bx0 else if(x<=xn) bx0 + cell.x*x else bx1;
                isos.set(x,y,ISO(iso,xc,yc));
            }
        }

        //store interpolated vertices
        //and we can avoid recomputing them all the time.
        if (ints == null) {
            ints = new Array2(Vertex)(xn+1, (yn<<1)+1);
        }
        else {
            ints.resize(xn+1, (yn<<1)+1, null);
        }

        //Relationship for spans is complex. Keep a simple stack of all spans used
        //to be freed at end.
        var spans:Span = null;
        if (combine) {
            Get(Span, spans);
        }

        var py = by0;
        for(y in 0...yn) {
            var y0 = py;
            var y1 = if(y==yn-1) by1 else by0+cell.y*(y+1);
            py = y1;

            var px = bx0;
            var pre:VPair = null;
            for(x in 0...xn) {
                var x0 = px;
                var x1 = if(x==xn-1) bx1 else bx0+cell.x*(x+1);
                px = x1;

                var fstx = x==0 || !combine;
                var fsty = y==0 || !combine;
                var sndx = x==xn-1 || !combine;
                var sndy = y==yn-1 || !combine;

                var pp = me.marchSquare(iso,isos,ints,x0,y0,x1,y1,x,y,fstx,fsty,sndx,sndy,quality);
                if(pp==null) { pre = null; continue; }

                if(combine) {
                    //determine which poly is down
                    //and store down link prematurely
                    //since links are destroyed in LR comb
                    var pd = if(pp.p2!=null && pp.okey2!=14) pp.p2 else pp.p1;
                    pp.pd = me.linkdown(pd,pd==pp.p2 ? pp.okey2 : pp.okey1);

                    map.set(x,y, pp);
                    //no longer a valid assertion due to removal of dangerously degenerate polys
                    //assert((pre!=null)==combLeft(pp.key1) || x==0, "left exists =/= can combine "+x+","+y);
                    if(pre!=null && me.combLeft(pp.key1)) {
                        assert(me.combRight(pre.keyr), "left poly cannot comb right?");
                        me.combLR(pre,pp);
                        pp.span1 = pre.spanr;
                    }else {
                        assert(pp.span1==null,"oops");
                        Get(Span, pp.span1);
                        pp.span1.next = spans;
                        spans = pp.span1;
                    }

                    if(pp.p2!=null) {
                        Get(Span, pp.span2);
                        pp.span2.next = spans;
                        spans = pp.span2;
                        pp.spanr = pp.span2;
                    }else pp.spanr = pp.span1;

                    if(me.combRight(pp.keyr)) pre = pp;
                    else pre = null;
                }else {
                    me.output(ret,pp.p1);
                    if(pp.p2!=null) me.output(ret,pp.p2);
                    Free(VPair, pp);
                }
            }
        }

        if (!combine) {
            return;
        }

        for(y in 1...yn) {
            var pre:Span = null;
            for(x in 0...xn) {
                var b = map.get(x,y);
                if(b==null) { pre = null; continue; }

                var bkey = if(b.p2!=null && b.okey2==0x0e) b.okey2 else b.okey1;
                if(!me.combUp(bkey)) { pre = null; continue; }

                var a = map.get(x,y-1);
                //no longer a valid assertion due to removal of dangeriously degenerate polys.
                //assert(a!=null,"combine up, but no poly?");
                if(a==null) { pre = null; continue; }

                var akey = if(a.p2!=null && a.okey2==0x38) a.okey2 else a.okey1;
                if(!me.combDown(akey)) { pre = null; continue; }

                //determine up/down spans on a,b
                var ad = if(a.p2!=null && a.okey2==0x38) a.span2 else a.span1;
                var bu = if(b.p2!=null && b.okey2==0x0e) b.span2 else b.span1;

                //cannot combine up as either scan line already combined
                //or it would introduce a hole if not.
                if(DSF(find(ad)==find(bu))) {
                    if(pre!=bu) {
                        //set vertices for forced inclusion
                        //in simplifications.
                        me.combUD_virtual(a,b);
                    }
                }else {
                    DSF(union(ad,bu));
                    me.combUD(a,b);
                }
                var key = if(bu==b.span2) b.okey2 else b.okey1;
                pre = if((key&4)!=0) bu else null;
            }
        }

        for(y in 0...yn) {
            for(x in 0...xn) {
                var p = map.get(x,y);
                if(p==null) continue;

                var root = DSF(find(p.span1));
                if(!root.out) {
                    root.out = true;
                    me.output(ret,p.p1);
                }

                if(p.p2!=null) {
                    root = DSF(find(p.span2));
                    if(!root.out) {
                        root.out = true;
                        me.output(ret, p.p2);
                    }
                }

                Free(VPair,p);
                map.set(x,y,null);
            }
        }

        // Release all Span objects to pool for re-use.
        while (spans != null) {
            var t = spans;
            spans = t.next;
            Free(Span, t);
        }
    }

    // remove redundancies from out-polygon
    function output(ret:GeomPolyList,poly:Vertex) {
    mix_circular(Vertex,
        if(geom(degenerate(poly))) {
            clear(poly);
            return;
        }

        var gp = GeomPoly.get();
        gp.pr(inner).vertices = poly;
        ret.add(gp);
    )}

    // given a polygon from a VPair with it's key
    // return vertex for start of merge in a combLR.
    // values determined via analysis of all cases.
    //
    // possible configurations for a combRight'able VPair poly:
    // ( p = current pointer, t = target pointer)
    //
    //   p                       p                   p
    //   o---o t               . o-o t               o---o t
    //   |-#-| key = 01010101  . .`o key = 00001110  o---o key = 10001101
    //   o---o                 . . .                 . . .
    //
    //     p
    //   . o-o t               . . . key = 00111000  . . . key = 10011000
    //   . | | key = 00110110  . .,o pt              o---o pt
    //   . o-o                 . o-o                 o---o
    //
    //   p                       p                     p
    //   o-o . key = 10111011  . o-o t               . o-o t
    //   o #`o t               o`#-o key = 11101110  o-#-| key = 11010110
    //   .`o-o                 o-o`.                 o---o
    //
    //   p                     p                     p
    //   o---o t               o---o t               o-o . key = 01011011
    //   o-#-| key = 10110101  |-#-o key = 01101101  |-#`o t
    //   .`o-o                 o-o`,                 o---o
    //
    // pointer either needs to be skipped forward 0,1 or 2 times.
    //
    // 1 time: 01010101  0 times: 00111000  2 times: 10111011
    //         10110101           10011000           01011011
    //         01101101                ^^^                ^^^
    //         10001101
    //         00001110
    //         11101110
    //         00110110
    //         11010110
    //              ^^^
    // first 3 bits are enough to classify the number of skips needed.
    //
    flibmdel inline function linkright(poly:Polygon,key:Int) {
        var kind = key&7;
        if  (kind==0) return poly;
        elif(kind==3) return poly.next.next;
        else          return poly.next;
    }

    // given a polygon from a VPair with it's key
    // return vertex from start of merge in a combLR.
    // values determined via analysis of all cases.
    //
    // possible configurations for a combLeft'able VPair poly:
    // ( p = current pointer, t = target pointer)
    //
    //  pt                    pt                    pt
    //   o---o                 o-o .                 o---o
    //   |-#-| key = 01010101  o`. . key = 10000011  o---o key = 10001101
    //   o---o                 . . .                 . . .
    //
    //  pt
    //   o-o .                  . . . key = 00111000  . . . key = 10011000
    //   | | . key = 01100011 t o,. .               t o---o p
    //   o-o .                  o-o .                 o---o
    //                            p
    //  pt                       p                      p
    //   o-o . key = 10111011  . o-o                  . o-o
    //   o #`o               t o`#-o key = 11101110 t o-#-| key = 11010110
    //   .`o-o                 o-o`.                  o---o
    //
    //  pt                    pt                    pt
    //   o---o                 o---o                 o-o . key = 01011011
    //   o-#-| key = 10110101  |-#-o key = 01101101  |-#`o
    //   .`o-o                 o-o`,                 o---o
    //
    // pointer either needs to be skipped backwards once or not at all.
    //
    // 0 times: 01010101  1 times: 00111000
    //          01100011           11101110
    //          10111011           11010110
    //          10111011           10011000
    //          10110101                  ^
    //          10000011
    //          01101101
    //          10001101
    //          01011011
    //                 ^
    // first bit is enough to classify number of skips needed
    //
    flibmdel inline function linkleft(poly:Polygon,key:Int) {
        return if((key&1)==0) poly.prev else poly;
    }

    // given a polygon from a VPair with it's key
    // return vertex from start of merge in combUD.
    // values determined via analysis of all cases.
    //
    // possible configurations for a combDown'able VPair poly:
    // ( p = current point, t = target point)
    //
    //   p
    //   o---o                . . . key = 00111000 . . . key = 10011000
    //   |-#-| key = 01010101 . .,o p              o---o p
    // t o---o                . o-o              t o---o
    //                          t
    //   p                                           p
    //   o-o .                . . . key = 11100000 . o-o
    //   | | . key = 01100011 o,. .                . | | key = 00110110
    // t o-o .              t o-o .                . o-o
    //                          p                    t
    //   p                      p
    //   o-o . key = 10111011 . o-o                  p
    //   o #`o                o`#-o key = 11101110 . o-o
    //   .`o-o                o-o`.                o`#-| key = 11010110
    //     t                  t                  t o---o
    //   p                    p
    //   o---o                o---o                p
    //   o-#-| key = 10110101 |-#-o key = 01101101 o-o . key = 01011011
    //   .`o-o              t o-o`.                |-#`o
    //     t                                     t o---o
    //
    // pointer either needs to be skipped backwards once or twice.
    //
    // 1 time: 01010101  2 times: 10011000
    //         00111000           11100000
    //         01100011           10111011
    //         00110110           11101110
    //         01101101           11010110
    //         01011011           10110101
    //         ^                  ^
    // last bit is enough to classify number of skips needed
    //
    flibmdel inline function linkdown(poly:Polygon,key:Int) {
        return if((key&0x80)==0) poly.prev else poly.prev.prev;
    }

    // given a polygon from a VPair with it's key
    // return vertex from start of merge in combUD.
    // trivially, this is simply the start vertex.
    flibmdel inline function linkup(poly:Polygon,key:Int) { return poly; }

    function combLR(a:VPair,b:VPair) {
        //set up pointers for merge
        var ap:Polygon = linkright(a.pr,a.okeyr);
        var bp:Polygon = linkleft (b.p1,b.okey1);

        // we now have ap==bp and ap.next == bp.prev (implicitly; not by reference)
        // we now merge, discarding bp and bp.prev (trivial duplicates)
        // as well as discarding ap if (a.keyr&0x04 != 0)
        //              and ap.next if (a.keyr&0x10 != 0)
        // so as to discard collinear horizontal vertices along scan line
        // (simplifies combUD)

        var ap2 = ap.next;
        var bp2 = bp.prev;

        // merge on top.
        if((a.keyr&0x04)!=0) {
            //in this case we must fix VPair pointer p1 (and possible pr) on b
            if(b.pr==b.p1) b.pr = ap.prev;
            b.p1 = ap.prev;
            //discard both ap and bp
            ap.prev.next = bp.next;
            bp.next.prev = ap.prev;
            Free(Vertex,ap);
        }else {
            //discard bp only
            ap.next = bp.next;
            bp.next.prev = ap;
        }
        Free(Vertex,bp);

        // merge on bottom.
        if((a.keyr&0x10)!=0) {
            //in this case we must fix VPair pointer pd on b
            b.pd = ap2.next;
            //discard both ap2 and bp2
            ap2.next.prev = bp2.prev;
            bp2.prev.next = ap2.next;
            Free(Vertex,ap2);
        }else {
            //discard only bp2
            ap2.prev = bp2.prev;
            bp2.prev.next = ap2;
        }
        Free(Vertex,bp2);
    }

    function combUD(a:VPair,b:VPair) {
        //determine up/down polys on a,b
        var ad = if(a.p2!=null && a.key2==0x38) a.p2 else a.p1;
        var bu = if(b.p2!=null && b.key2==0x0e) b.p2 else b.p1;

        //set up pointers for merge
        var ap:Polygon = a.pd; //already been calced as LR comb destroys links required
        var bp:Polygon = linkup(bu,bu==b.p2 ? b.okey2 : b.okey1);

        //skip back from ap to end of merge
        //skip forward from bp to end of merge
        //since we removed collinear horizontals, this is trivial
        var ap2 = ap.prev;
        var bp2 = bp.next;

        // we now have ap==bp && ap2 == bp2 (implicitly; not by reference)
        // we now merge, disacrding ap and ap2 (trivial duplicates)
        // merge on left.
        bp.next = ap.next;
        ap.next.prev = bp;
        Free(Vertex,ap);

        // merge on right.
        // it's possible that a.p1 needs to be reassigned here!
        bp2.prev = ap2.prev;
        ap2.prev.next = bp2;
        if(ap2==a.p1) a.p1 = bp2;
        Free(Vertex,ap2);
    }

    function combUD_virtual(a:VPair,b:VPair) {
        var ad = if(a.p2!=null && a.key2==0x38) a.p2 else a.p1;
        var bu = if(b.p2!=null && b.key2==0x0e) b.p2 else b.p1;

        var ap:Polygon = a.pd; //already been calced as LR comb destroys links required
        var bp:Polygon = linkup(bu,bu==b.p2 ? b.key2 : b.key1);

        var ap2 = ap.prev;
        var bp2 = bp.next;

        ap.forced = bp.forced = ap2.forced = bp2.forced = true;
    }

    // can combLeft if mid-left exists, or both left-vertices exist
    // similarly for others.
    flibmdel inline function combLeft (key:Int) {
        var flag = (key&1)|((key&0xC0)>>5);
        return comb(flag);
    }
    flibmdel inline function combRight(key:Int) {
        var flag = (key&0x1C)>>2;
        return comb(flag);
    }
    flibmdel inline function combUp(key:Int) {
        var flag = (key&0x07);
        return comb(flag);
    }
    flibmdel inline function combDown(key:Int) {
        var flag = (key&0x70)>>4;
        return comb(flag);
    }

    flibmdel inline function comb(flag:Int) {
        var cnt = 0;
        if((flag&1)!=0) cnt++;
        if((flag&2)!=0) cnt++;
        if((flag&4)!=0) cnt++;
        return cnt>=2;
        //return flag==5 || ((flag&2)!=0);
    }

    // generate polygon for a single cell.
    // we do 'NOT' remove degenerate edges for duplicated vertices
    // as we rely on the strict configurations to simplify the rest of the algorithms.
    //
    public static var look_march = [-1,0xE0,0x38,0xD8,0x0E,-1,0x36,0xD6,0x83,0x63,-1,0x5B,0x8D,0x6D,0xB5,0x55];
    function marchSquare(
        iso:IsoFunctionDef,isos:Array2(Float),ints:Array2(Vertex),
        x0:Float,y0:Float,x1:Float,y1:Float,
        xn:Int, yn:Int, fstx:Bool, fsty:Bool, sndx:Bool, sndy:Bool,
        quality:Int)
    {
        var key = 0;
        var v0 = isos.get(xn,  yn);   if(v0<0) key |= 8;
        var v1 = isos.get(xn+1,yn);   if(v1<0) key |= 4;
        var v2 = isos.get(xn+1,yn+1); if(v2<0) key |= 2;
        var v3 = isos.get(xn,  yn+1); if(v3<0) key |= 1;

        if(key==0) return null;
        else {
            var ret; Get(VPair, ret);
            if(key!=10 && key!=5) {
                var val = look_march[key];
                poly(val,1);
                if(val==0) ret = null;
                else setright(1);
            }else {
                var mid = ISO(iso,0.5*(x0+x1),0.5*(y0+y1)) < 0;
                if(key==10) {
                    if(mid) {
                        var val = 0xBB;
                        poly(val,1);
                        if(val==0) ret = null;
                        else setright(1);
                    } else {
                        var val = 0x83;
                        poly(val,1);
                        if(val!=0) {
                            var val = 0x38;
                            poly(val,2);
                            if(val==0) setright(1);
                            else setright(2);
                        }else {
                            var val = 0x38;
                            poly(val,1);
                            if(val==0) ret = null;
                            else setright(1);
                        }
                    }
                }else {
                    if(mid) {
                        var val = 0xEE;
                        poly(val,1);
                        if(val==0) ret = null;
                        else setright(1);
                    } else {
                        var val = 0xE0;
                        poly(val,1);
                        if(val!=0) {
                            var val = 0x0E;
                            poly(val,2);
                            if(val==0) setright(1);
                            else setright(2);
                        }else {
                            var val = 0x0E;
                            poly(val,1);
                            if(val==0) ret = null;
                            else setright(1);
                        }
                    }
                }
            }
            $(mixin setright(n) {
                ret.pr = ret.p`n;
                ret.okeyr = ret.okey`n;
                ret.keyr = ret.key`n;
            });
            return ret;
        }

        $(mixin poly(val,out) {
            mix_circular(Vertex,
                ret.okey`out = val;
                for(i in 0...8) {
                    if((val&(1<<i))!=0) {
                        var p:Vertex = null;
                        if  (i==0) { p = Vertex.get(x0,y0); if(fstx || fsty) p.forced = true; }
                        elif(i==2) { p = Vertex.get(x1,y0); if(sndx || fsty) p.forced = true; }
                        elif(i==4) { p = Vertex.get(x1,y1); if(sndx || sndy) p.forced = true; }
                        elif(i==6) { p = Vertex.get(x0,y1); if(fstx || sndy) p.forced = true; }

                        elif(i==1) {
                            p = ints.get(xn,yn<<1);
                            if(p==null) { p = Vertex.get(xlerp(x0,x1,y0,v0,v1,iso,quality),y0); ints.set(xn,yn<<1,p); }
                            else p = Vertex.get(p.x,p.y);
                            if(fsty) p.forced = true;

                            //check degeneracy
                            if(p.x==x0 || p.x==x1) {
                                if((p.x==x0 && (val&1)!=0)
                                || (p.x==x1 && (val&4)!=0))
                                    val ^= 0x02;
                            }
                        }
                        elif(i==5) {
                            p = ints.get(xn,(yn<<1)+2);
                            if(p==null) { p = Vertex.get(xlerp(x0,x1,y1,v3,v2,iso,quality),y1); ints.set(xn,(yn<<1)+2,p); }
                            else p = Vertex.get(p.x,p.y);
                            if(sndy) p.forced = true;

                            //check degeneracy
                            if(p.x==x0 || p.x==x1) {
                                if((p.x==x0 && (val&0x40)!=0)
                                || (p.x==x1 && (val&0x10)!=0))
                                    val ^= 0x20;
                            }
                        }
                        elif(i==3) {
                            p = ints.get(xn+1,(yn<<1)+1);
                            if(p==null) { p = Vertex.get(x1,ylerp(y0,y1,x1,v1,v2,iso,quality)); ints.set(xn+1,(yn<<1)+1,p); }
                            else p = Vertex.get(p.x,p.y);
                            if(sndx) p.forced = true;

                            //check degeneracy
                            if(p.y==y0 || p.y==y1) {
                                if((p.y==y0 && (val&4)!=0)
                                || (p.y==y1 && (val&0x10)!=0))
                                    val ^= 0x08;
                            }
                        }
                        else {
                            p = ints.get(xn,(yn<<1)+1);
                            if(p==null) { p = Vertex.get(x0,ylerp(y0,y1,x0,v0,v3,iso,quality)); ints.set(xn,(yn<<1)+1,p); }
                            else p = Vertex.get(p.x,p.y);
                            if(fstx) p.forced = true;

                            //check degeneracy
                            if(p.y==y0 || p.y==y1) {
                                if((p.y==y0 && (val&1)!=0)
                                || (p.y==y1 && (val&0x40)!=0))
                                    val ^= 0x80;
                            }
                        };
                        ret.p`out = push_after(ret.p`out,p);
                    }
                }
                ret.p`out = ret.p`out.next;
            )
            ret.key`out = val;

            //check for fully degenerate polys.
            if(val==0x01 || val==0x04 || val==0x10 || val==0x40
            || val==0x03 || val==0x0c || val==0x30 || val==0xc0
            || val==0x81 || val==0x06 || val==0x18 || val==0x60
            || val==0x05 || val==0x14 || val==0x50 || val==0x41
            || val==0x11 || val==0x44) {
                val = 0x00;
                ret.key`out = 0;
                ret.p`out = null;
            }
        });
    }

    inline function lerp(x0:Float,x1:Float,v0:Float,v1:Float) {
        if  (v0==0) return x0;
        elif(v1==0) return x1;
        else {
            var dv = v0-v1;
            var t = if(dv*dv<(Config.epsilon * Config.epsilon)) 0.5 else v0/dv;
            if(t<0) t = 0; elif(t>1) t = 1;
            return x0 + t*(x1-x0);
        }
    }
    function xlerp(x0:Float,x1:Float,y:Float,v0:Float,v1:Float,iso:IsoFunctionDef,quality:Int) {
        var xm = lerp(x0,x1,v0,v1);
        while(quality--!=0 && x0<xm && xm<x1) {
            var vm:Float = ISO(iso,xm,y);
            if(vm==0) break;
            if(v0*vm<0) { x1 = xm; v1 = vm; }
            else        { x0 = xm; v0 = vm; }
            xm = lerp(x0,x1,v0,v1);
        }
        return xm;
    }
    function ylerp(y0:Float,y1:Float,x:Float,v0:Float,v1:Float,iso:IsoFunctionDef,quality:Int) {
        var ym = lerp(y0,y1,v0,v1);
        while(quality--!=0 && y0<ym && ym<y1) {
            var vm:Float = ISO(iso,x,ym);
            if(vm==0) break;
            if(v0*vm<0) { y1 = ym; v1 = vm; }
            else        { y0 = ym; v0 = vm; }
            ym = lerp(y0,y1,v0,v1);
        }
        return ym;
    }

    inline static function ISO(iso:IsoFunctionDef, x:Float, y:Float) {
        return #if flash iso.iso(x, y) #else iso(x, y) #end;
    }
}
