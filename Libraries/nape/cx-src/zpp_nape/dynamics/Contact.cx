package zpp_nape.dynamics;
$(import);

class PR(Contact) {
    public var outer:Contact = null;
    public static var internal:Bool = false;
    public function wrapper() {
        if(outer==null) {
            internal = true;
            outer = new Contact();
            internal = false;
            outer.pr(inner) = this;
        }
        return outer;
    }

    vec_new(public,p);

    //previously lambdas
    private function position_validate() {
        DEBUG(if(inactiveme()) throw "Error: Contact not currently in use";)
        vec_set(wrap_position.pr(inner).,p);
    }

    public var wrap_position:Vec2 = null;
    public function getposition() {
        var me = this;
        wrap_position = Vec2.get();
        wrap_position.pr(inner)._inuse = true;
        wrap_position.pr(inner)._immutable = true;
        wrap_position.pr(inner)._validate = position_validate;
    }

    //----------------------------------------------------------------------------------------------
    //used in various parts of API

    public function inactiveme() {
        return !(active && arbiter!=null && !arbiter.inactiveme());
    }

    //----------------------------------------------------------------------------------------------

    public var arbiter:PR(Arbiter) = null;
    public var inner:PR(IContact) = null;

    //denotes contact is active, and not laying dormant to allow cached values to persist.
    public var active:Bool = false;
    public var posOnly:Bool = false;

    public var stamp:Int = 0; //updated when contact is injected
    public var hash:Int = 0; //based on features like vertex/edge etc to identify contact uniquely
    public var fresh:Bool = false; //set to true when contact is created/re-activated (*not to do with sleeping)

    public var dist:Float = 0.0; //penetration distance.

    public var elasticity:Float = 0.0; //only used to expose to API for interest sake.

    //----------------------------------------------------------------------------------------------

    public function new() {
        inner = new PR(IContact)();
    }
    flibmdel public inline function free() {
        arbiter = null;
    }
    flibmdel public inline function alloc() {
    }

    MixPoolNoNext(PR(Contact))
    MixListMixin(PR(Contact))
}

//--------------------------------------------------------------------------------------------------

//only contains fields needed by contact iterations
//these are not pooled and bound explicitly to a pooled full Contact.
class PR(IContact) {
    //velocity iterations
    vec_new(public,r1); //relative contact positions
    vec_new(public,r2);

    public var nMass:Float = 0.0; //effective mass
    public var tMass:Float = 0.0;

    public var bounce:Float = 0.0;   //per contact bounce/friction
    public var friction:Float = 0.0; //based on arbiter values and relative velocities.

    public var jnAcc:Float = 0.0; //cached impulse values
    public var jtAcc:Float = 0.0;

    //position iterations
    vec_new(public,lr1); //local reference point.
    vec_new(public,lr2);

    public function new() {}

    MixListMixin(PR(IContact))
}
