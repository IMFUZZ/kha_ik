package zpp_nape.constraint;
$(import);

withConstraint(
class PR(DistanceJoint) extends PR(Constraint) {
    public var outer_zn:DistanceJoint = null;

    public var jointMin:Float = 0.0;
    public var jointMax:Float = 0.0;
    public var slack:Bool = false;
    public var equal:Bool = false;
    //if limits are equal, treat constraint slightly differently for stability.

    $(mixin Cerr(r1,r2,n,slack) {
        n`x = (b2.posx+r2`x)-(b1.posx+r1`x);
        n`y = (b2.posy+r2`y)-(b1.posy+r1`y);
        var C = vec_lsq(n);
        if(C<Config.epsilon) {
            vec_set(n,0,0);
            C = 0;
            slack = true;
        } else {
            C = PR(Math).sqrt(C);
            vec_diveq(n,C);
            if(equal) {
                C -= jointMax;
                slack = false;
            }else {
                if(C<jointMin) {
                    C = jointMin-C;
                    vec_negate(n);
                    slack = false;
                } else if(C>jointMax) {
                    C -= jointMax;
                    slack = false;
                }else {
                    vec_set(n,0,0);
                    C = 0;
                    slack = true;
                }
            }
        }
        C;
    });
    flibmdel public inline function is_slack() {
        var slack;
        validate_anchor(b1,a1);
        validate_anchor(b2,a2);
        vec_new(n);

        Cerr(a1rel,a2rel,n,slack);
        return slack;
    }

    vec_new(public, n);
    public var cx1:Float = 0.0;
    public var cx2:Float = 0.0;

    $(mixin Verr() {
        n`x*(b2.velx+b2.kinvelx-b1.velx-b1.kinvelx) + n`y*(b2.vely+b2.kinvely-b1.vely-b1.kinvely) + (b2.angvel+b2.kinangvel)*cx2 - (b1.angvel+b1.kinangvel)*cx1;
    });

    $(mixin Keff(r1,r2,n,cx1,cx2) {
        cx1 = vec_cross(r1,n);
        cx2 = vec_cross(r2,n);
        b1.smass + b2.smass + cx1*cx1*b1.sinertia + cx2*cx2*b2.sinertia;
    });

    $(mixin Imp(r1,r2,n,cx1,cx2,j,bias) {
        if(bias) {
            vec_subeq(b1.pos, n, b1.imass*j);
            vec_addeq(b2.pos, n, b2.imass*j);
            b1.delta_rot(-cx1*b1.iinertia*j);
            b2.delta_rot( cx2*b2.iinertia*j);
        }else {
            vec_subeq(b1.vel, n, b1.imass*j);
            vec_addeq(b2.vel, n, b2.imass*j);
            b1.angvel -= cx1*b1.iinertia*j;
            b2.angvel += cx2*b2.iinertia*j;
        }
    });

    public function bodyImpulse(b:PR(Body)) {
        if(stepped) {
            if(b==b1) return Vec3.get(-jAcc*nx,-jAcc*ny,-cx1*jAcc);
            else      return Vec3.get( jAcc*nx, jAcc*ny, cx2*jAcc);
        }else return Vec3.get(0,0,0);
    }

    //---------------------------------------------------

    public override function activeBodies() {
        active_body(b1);
        if(b2!=b1)
            active_body(b2);
    }

    public override function inactiveBodies() {
        inactive_body(b1);
        if(b2!=b1)
            inactive_body(b2);
    }

    //---------------------------------------------------

    public var b1:PR(Body) = null; anchor_new(a1);
    public var b2:PR(Body) = null; anchor_new(a2);

    public var kMass:Float = 0.0;
    public var jAcc:Float = 0.0;
    public var jMax:Float = 0.0;

    public var gamma:Float = 0.0;
    public var bias:Float = 0.0;

    public var stepped:Bool = false;

    //---------------------------------------------------

    public override function copy(dict:Array<PR(CopyHelper)>=null,todo:Array<PR(CopyHelper)>=null):Constraint {
        var ret = new DistanceJoint(null,null,outer_zn.anchor1,outer_zn.anchor2,jointMin,jointMax);
        copyto(ret);

        copybody(ret.pr(inner_zn),b1,dict,todo);
        copybody(ret.pr(inner_zn),b2,dict,todo);
        return ret;
    }

    public function new() {
        super();

        anchor_init(a1);
        anchor_init(a2);

        jAcc = 0;
        jMax = PR(Const).POSINF();
        stepped = false;
        cx1 = cx2 = 0;
    }

    public override function validate() {
        if(b1==null || b2==null) throw "Error: DistanceJoint cannot be simulated null bodies";
        if(b1==b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
        if(b1.space != space || b2.space != space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
        if(jointMin>jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
        if(!b1.isDynamic() && !b2.isDynamic()) throw "Error: Constraints cannot have both bodies non-dynamic";
    }

    public override function wake_connected() {
        if(b1!=null && b1.isDynamic()) b1.wake();
        if(b2!=null && b2.isDynamic()) b2.wake();
    }

    public override function forest() {
        if(b1.isDynamic()) DSF(union(b1.component,component));
        if(b2.isDynamic()) DSF(union(b2.component,component));
    }

    public override function pair_exists(id:Int,di:Int) {
        return (b1.id==id && b2.id==di) || (b1.id==di && b2.id==id);
    }

    public override function clearcache() {
        jAcc = 0;
        pre_dt = -1.0;
    }

    //---------------------------------------------------

    public override function preStep(dt:Float) {
        if(pre_dt==-1.0) pre_dt = dt;
        var dtratio = dt/pre_dt;
        pre_dt = dt;

        stepped = true;
        equal = jointMin == jointMax;
        validate_anchor(b1,a1);
        validate_anchor(b2,a2);

        var C = Cerr(a1rel,a2rel,n,slack);
        if(!slack) {
            //effective mass
            kMass = Keff(a1rel,a2rel,n,cx1,cx2);
            if(kMass!=0) kMass = 1/kMass;
            else jAcc = 0;

            if(!stiff) {
                if(breakUnderError && C*C>maxError*maxError) return true;
                var biasCoef;
                kMass *= soft_gamma(frequency,damping,dt,gamma,biasCoef);
                bias = -C*biasCoef;
                clamp(bias,maxError);
            }else {
                bias = 0;
                gamma = 0;
            }
            jAcc *= dtratio;
            jMax = maxForce*dt;
        }

        return false;
    }

    public override function warmStart() {
        if(!slack)
            Imp(a1rel,a2rel,n,cx1,cx2,jAcc,false);
    }

    public override function applyImpulseVel() {
        if(slack) return false;

        //velocity corrections
        var E = Verr;
        var j = kMass*(bias - E) - jAcc*gamma;
        accum(jAcc,j, {
            if (!equal && jAcc > 0) jAcc = 0;
            if (breakUnderForce && jAcc < -jMax) return true;
            if (!stiff) {
                if (jAcc < -jMax) jAcc = -jMax;
            }
        });
        Imp(a1rel,a2rel,n,cx1,cx2,j,false);

        return false;
    }

    public override function applyImpulsePos() {
        var E; var j;
        //positional corrections
        vec_new(r1); bias_xform(b1,a1local,r1);
        vec_new(r2); bias_xform(b2,a2local,r2);

        var slack; vec_new(n);
        E = Cerr(r1,r2,n,slack);
        if(!slack) {
            if(breakUnderError && E*E > maxError*maxError) return true;

            if(E*E < Config.constraintLinearSlop * Config.constraintLinearSlop) return false;
            E *= 0.5;

            //handle large detachment
            if(E*E > 6) {
                var k = b1.smass + b2.smass;
                if(k>Config.epsilon) {
                    k = 0.75/k; //don't completely solve error
                    j = -E*k;
                    if(equal || j<0) {
                        vec_subeq(b1.pos, n,j*b1.imass);
                        vec_addeq(b2.pos, n,j*b2.imass);

                        //recalculate error
                        E = Cerr(r1,r2,n,slack);
                        E *= 0.5;
                    }
                }
            }

            var cx1, cx2;
            var k = Keff(r1,r2,n,cx1,cx2);
            if(k!=0) k = 1/k;
            j = -E*k;
            if(equal || j<0)
                Imp(r1,r2,n,cx1,cx2,j,true);
        }

        return false;
    }

    //----------------------------------------------

    public override function draw(g:Debug) {
    #if (flash9||openfl||nme)
        var me = outer_zn;
        var a1 = me.body1.localPointToWorld(me.anchor1);
        var a2 = me.body2.localPointToWorld(me.anchor2);

        var n = a2.sub(a1);
        var nl = n.length;
        if(nl!=0) {
            n.muleq(1/nl);

            var mid = a1.add(a2).muleq(0.5);
            var min1 = mid.sub(n.mul(jointMin*0.5,true));
            var min2 = mid.add(n.mul(jointMin*0.5,true));
            var max1 = mid.sub(n.mul(jointMax*0.5,true));
            var max2 = mid.add(n.mul(jointMax*0.5,true));

            g.drawLine(min1,min2,0xffff00);
            g.drawLine(max1,min1,0x00ffff);
            g.drawLine(max2,min2,0x00ffff);

            if(!stiff) {
                if(nl>jointMax) {
                    g.drawSpring(max1,a1,0x00ffff);
                    g.drawSpring(max2,a2,0x00ffff);
                }else if(nl<jointMin) {
                    g.drawSpring(min1,a1,0xffff00);
                    g.drawSpring(min2,a2,0xffff00);
                }
            }

            mid.dispose();
            min1.dispose();
            min2.dispose();
            max1.dispose();
            max2.dispose();
        }

        g.drawFilledCircle(a1,2,0xff);
        g.drawFilledCircle(a2,2,0xff0000);

        a1.dispose();
        a2.dispose();
        n.dispose();
    #end
    }
}

)
