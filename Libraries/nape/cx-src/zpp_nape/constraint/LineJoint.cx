package zpp_nape.constraint;
$(import);

withConstraint(
class PR(LineJoint) extends PR(Constraint) {
    public var outer_zn:LineJoint = null;

    public var scale:Float = 0.0;
    public var jointMin:Float = 0.0;
    public var jointMax:Float = 0.0;
    public var equal:Bool = false;

    public var dot1:Float = 0.0;
    public var dot2:Float = 0.0;
    public var cx1:Float = 0.0;
    public var cx2:Float = 0.0;

    //---------------------------------------------------

    $(mixin Cerr(r1,r2,n,d, C) {
        d`x = b2.posx+r2`x - b1.posx-r1`x;
        d`y = b2.posy+r2`y - b1.posy-r1`y;

        C`x = vec_cross(n,d);
        C`y = vec_dot(n,d);
        if (equal) {
            C`y -= jointMin;
            scale = 1.0;
        }
        else if(C`y > jointMax) {
            C`y -= jointMax;
            scale = 1.0;
        }else if(C`y < jointMin) {
            C`y = jointMin - C`y;
            scale = -1.0;
        }else {
            C`y = 0;
            scale = 0;
        }
    });

    $(mixin Verr(V,n) {
        vec_new(dv); vec_sub(b2.vel,b1.vel,dv);
        dvx += (b2.kinvelx-b1.kinvelx);
        dvy += (b2.kinvely-b1.kinvely);

        V`x = vec_cross(n,dv) + (b2.angvel+b2.kinangvel)*dot2 - (b1.angvel+b1.kinangvel)*dot1;
        V`y = scale*(vec_dot(n,dv) - (b2.angvel+b2.kinangvel)*cx2 + (b1.angvel+b1.kinangvel)*cx1);
    });

    $(mixin Keff(r1,r2,n,d, K) {
        vec_new(dr); vec_add(d,r1,dr);
        dot1 = vec_dot(n,dr); cx1 = vec_cross(n,dr);
        dot2 = vec_dot(n,r2); cx2 = vec_cross(n,r2);
        K`a = b1.smass + b2.smass + dot1*dot1*b1.sinertia + dot2*dot2*b2.sinertia;
        K`b = -scale*(dot1*cx1*b1.sinertia + dot2*cx2*b2.sinertia);
        K`c = scale*scale*(b1.smass + b2.smass + cx1*cx1*b1.sinertia + cx2*cx2*b2.sinertia);
    });

    $(mixin Imp(r1,r2,n, j,bias) {
        vec_new(J2, scale*n`x*j`y - n`y*j`x, n`x*j`x + scale*n`y*j`y);
        if(bias) {
            vec_subeq(b1.pos, J2, b1.imass);
            vec_addeq(b2.pos, J2, b2.imass);
            b1.delta_rot((scale*cx1*j`y - dot1*j`x) * b1.iinertia);
            b2.delta_rot((dot2*j`x - scale*cx2*j`y) * b2.iinertia);
        }else {
            vec_subeq(b1.vel, J2, b1.imass);
            vec_addeq(b2.vel, J2, b2.imass);
            b1.angvel += (scale*cx1*j`y - dot1*j`x) * b1.iinertia;
            b2.angvel += (dot2*j`x - scale*cx2*j`y) * b2.iinertia;
        }
    });

    public function bodyImpulse(b:PR(Body)) {
        if(stepped) {
            vec_new(j, scale*nrelx*jAccy - nrely*jAccx, nrelx*jAccx + scale*nrely*jAccy);
            if(b==b1) return Vec3.get(-jx,-jy,(scale*cx1*jy - dot1*jx));
            else      return Vec3.get( jx, jy,(scale*cx1*jy - dot1*jx));
        }else return Vec3.get(0,0,0);
    }

    //---------------------------------------------------

    public override function activeBodies() {
        active_body(b1);
        if(b2!=b1)
            active_body(b2);
    }

    public override function inactiveBodies() {
        inactive_body(b1);
        if(b2!=b1)
            inactive_body(b2);
    }

    //---------------------------------------------------

    public var b1:PR(Body); anchor_new(a1);
    public var b2:PR(Body); anchor_new(a2);

    public var inv(n):Bool;
    anchor_new(n,{inv(n) = true;});
    public function validate_norm() {
        if(inv(n)) {
            inv(n) = false;
            vec_normalise_slow(nlocal);
        }
    }

    mat2_new(public,kMass);
    vec_new(public,jAcc);
    public var jMax:Float;

    public var gamma:Float;
    vec_new(public,bias);

    public var stepped:Bool;

    //---------------------------------------------------

    public override function copy(dict:Array<PR(CopyHelper)>=null,todo:Array<PR(CopyHelper)>=null):Constraint {
        var ret = new LineJoint(null,null,outer_zn.anchor1,outer_zn.anchor2,outer_zn.direction,jointMin,jointMax);
        copyto(ret);

        copybody(ret.pr(inner_zn),b1,dict,todo);
        copybody(ret.pr(inner_zn),b2,dict,todo);
        return ret;
    }

    public function new() {
        super();
        anchor_init(a1);
        anchor_init(a2);
        anchor_init(n);

        vec_set(jAcc,0,0);
        jMax = PR(Const).POSINF();
        jointMin = PR(Const).NEGINF();
        jointMax = PR(Const).POSINF();
        stepped = false;
    }

    public override function validate() {
        if(b1==null || b2==null) throw "Error: AngleJoint cannot be simulated null bodies";
        if(b1==b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
        if(b1.space != space || b2.space != space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
        if(jointMin>jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
        if(vec_lsq(nlocal)<Config.epsilon) throw "Error: DistanceJoint direction must be non-degenerate";
        if(!b1.isDynamic() && !b2.isDynamic()) throw "Error: Constraints cannot have both bodies non-dynamic";
    }

    public override function wake_connected() {
        if(b1!=null && b1.isDynamic()) b1.wake();
        if(b2!=null && b2.isDynamic()) b2.wake();
    }

    public override function forest() {
        if(b1.isDynamic()) DSF(union(b1.component,component));
        if(b2.isDynamic()) DSF(union(b2.component,component));
    }

    public override function pair_exists(id:Int,di:Int) {
        return (b1.id==id && b2.id==di) || (b1.id==di && b2.id==id);
    }

    public override function clearcache() {
        vec_set(jAcc,0,0);
        pre_dt = -1.0;
    }

    //---------------------------------------------------

    public override function preStep(dt:Float) {
        if(pre_dt==-1.0) pre_dt = dt;
        var dtratio = dt/pre_dt;
        pre_dt = dt;

        equal = (jointMin == jointMax);
        stepped = true;

        validate_norm();
        validate_anchor(b1,a1); validate_anchor(b1,n);
        validate_anchor(b2,a2);

        //calculate positional error now to find d + scale
        vec_new(d); vec_new(C);
        Cerr(a1rel,a2rel,nrel,d, C);
        //effective mass
        Keff(a1rel,a2rel,nrel,d, kMass);
        var flag = mat2_invert(kMass);
        if((flag&1)!=0) jAccx = 0;
        if((flag&2)!=0) jAccy = 0;

        if(!stiff) {
            if(breakUnderError && vec_lsq(C) > maxError*maxError) return true;

            var biasCoef;
            mat2_scaleq(kMass, soft_gamma(frequency,damping,dt,gamma,biasCoef));
            vec_set(bias,C);
            vec_muleq(bias,-biasCoef);
            vec_clamp(bias,maxError);
        }else {
            gamma = 0;
            vec_set(bias,0,0);
        }
        vec_muleq(jAcc,dtratio);
        jMax = maxForce*dt;

        return false;
    }

    public override function warmStart() {
        Imp(a1rel,a2rel,nrel, jAcc,false);
    }

    public override function applyImpulseVel() {
        //velocity corrections
        vec_new(E); Verr(E,nrel);
        vec_new(J); vec_sub(bias,E, J);

        mat2_xform(kMass,J);
        vec_subeq(J,jAcc,gamma);

        accum2(jAcc,J,{
            if(jAccy > 0) jAccy = 0;
            if(breakUnderForce) {
                if(vec_lsq(jAcc) > jMax*jMax)
                    return true;
            }else if(!stiff)
                vec_clamp(jAcc,jMax);
        });
        Imp(a1rel,a2rel,nrel, J,false);

        return false;
    }

    public override function applyImpulsePos() {
        //positional corrections (stiff)
        vec_new(n); bias_xform(b1,nlocal,n);
        vec_new(r1); bias_xform(b1,a1local,r1);
        vec_new(r2); bias_xform(b2,a2local,r2);

        vec_new(d); var scale;
        vec_new(E);
        Cerr(r1,r2,n,d,E);

        if(breakUnderError && vec_lsq(E) > maxError*maxError) return true;
        if(vec_lsq(E) < Config.constraintLinearSlop*Config.constraintLinearSlop) return false;

        vec_new(J);
        vec_muleq(E,0.5);

        //however for VERY large detachment it is necessary to help.
        if(vec_lsq(E) > 6) {
            var k = b1.smass + b2.smass;
            if(k>Config.epsilon) {
                k = 0.8/k; //don't completely solve error
                vec_new(J, k*(n`y*E`x-scale*n`x*E`y), k*(n`x*E`x*scale-n`y*E`x));

                vec_subeq(b1.pos, J,b1.imass);
                vec_addeq(b2.pos, J,b2.imass);

                //recalculate error
                Cerr(r1,r2,n,d,E);
                vec_muleq(E,0.5);
            }
        }

        var dot1, dot2, cx1, cx2;
        mat2_new(K); Keff(r1,r2,n,d,K);
        vec_set(J,-Ex,-Ey);
        mat2_solve(K,J);

        if(Jy>0) Jy = 0;

        Imp(r1,r2,n, J,true);

        return false;
    }

    //----------------------------------------------

    public override function draw(g:Debug) {
    #if (flash9||openfl||nme)
        var me = outer_zn;
        var a1 = me.body1.localPointToWorld(me.anchor1);
        var a2 = me.body2.localPointToWorld(me.anchor2);
        var dir = me.body1.localVectorToWorld(me.direction);
        dir.muleq(1/dir.length);

        var min = me.jointMin;
        var max = me.jointMax;
        if(min<=PR(Const).NEGINF()) min = -1000;
        if(max>=PR(Const).POSINF()) max =  1000;

        var del = a2.sub(a1);
        var pn = del.dot(dir);
        del.dispose();

        var e1 = a1.add(dir.mul(min,true));
        var e2 = a1.add(dir.mul(max,true));

        if(pn>min)
            g.drawLine(e1,a1.add(dir.mul(min(pn,max),true),true),0xffff00);
        if(pn<max)
            g.drawLine(a1.add(dir.mul(max(pn,min),true),true),e2,0xffff);

        if(!stiff) {
            var anch =
            if  (pn<jointMin) e1.copy();
            elif(pn>jointMax) e2.copy();
            else              a1.add(dir.mul(pn,true));

            g.drawSpring(anch,a2,0xff00ff);
            anch.dispose();
        }

        g.drawFilledCircle(a1,2,0xff);
        g.drawFilledCircle(a2,2,0xff0000);

        a1.dispose();
        a2.dispose();
        e1.dispose();
        e2.dispose();
    #end
    }

}

)
