package zpp_nape.constraint;
$(import);

withConstraint(
class PR(PulleyJoint) extends PR(Constraint) {
    public var outer_zn:PulleyJoint = null;

    public var ratio:Float = 1.0;
    public var jointMin:Float = 0.0;
    public var jointMax:Float = 0.0;
    public var slack:Bool = false;
    public var equal:Bool = false;
    // if limits are equal, treat constraint slightly differently for stability.

    $(mixin Cerr(r1, r2, r3, r4, n12, n34, slack) {
        vec_new(t12); vec_new(t34);
        t12`x = (b2.posx + r2`x) - (b1.posx + r1`x);
        t12`y = (b2.posy + r2`y) - (b1.posy + r1`y);
        t34`x = (b4.posx + r4`x) - (b3.posx + r3`x);
        t34`y = (b4.posy + r4`y) - (b3.posy + r3`y);
        var C12 = vec_length(t12);
        var C34 = vec_length(t34);

        // re-use old normal if necessary
        if (C12 != 0) {
            vec_div(t12, C12, n12);
        }

        // re-use old normal if necessary
        if (C34 != 0) {
            vec_div(t34, C34, n34);
            vec_muleq(n34, ratio);
        }
        else {
            vec_muleq(n34, ratio / vec_length(n34));
        }

        var C = C12 + (ratio * C34);
        if (equal) {
            C -= jointMax;
            slack = false;
        }
        else {
            if (C < jointMin) {
                C = jointMin - C;
                vec_negate(n12);
                vec_negate(n34);
                slack = false;
            }
            else if (C > jointMax) {
                C -= jointMax;
                slack = false;
            }
            else {
                vec_set(n12, 0, 0);
                vec_set(n34, 0, 0);
                C = 0;
                slack = true;
            }
        }
        C;
    });

    flibmdel public inline function is_slack() {
        var slack;
        validate_anchor(b1, a1);
        validate_anchor(b2, a2);
        validate_anchor(b3, a3);
        validate_anchor(b4, a4);
        vec_new(n12); vec_new(n34);
        Cerr(a1rel,a2rel,a3rel,a4rel,n12,n34,slack);
        return slack;
    }

    vec_new(public, n12);
    vec_new(public, n34);
    public var cx1:Float = 0.0;
    public var cx2:Float = 0.0;
    public var cx3:Float = 0.0;
    public var cx4:Float = 0.0;

    $(mixin Verr() {
        n12`x * (b2.velx + b2.kinvelx - b1.velx - b1.kinvelx) + n12`y * (b2.vely + b2.kinvely - b1.vely - b1.kinvely)
      + n34`x * (b4.velx + b4.kinvelx - b3.velx - b3.kinvelx) + n34`y * (b4.vely + b4.kinvely - b3.vely - b3.kinvely)
      + (b2.angvel + b2.kinangvel) * cx2
      - (b1.angvel + b1.kinangvel) * cx1
      + (b4.angvel + b4.kinangvel) * cx4
      - (b3.angvel + b3.kinangvel) * cx3;
    });

    $(mixin Keff(r1,r2,r3,r4,n12,n34,cx1,cx2,cx3,cx4) {
        cx1 = vec_cross(r1,n12);
        cx2 = vec_cross(r2,n12);
        cx3 = vec_cross(r3,n34);
        cx4 = vec_cross(r4,n34);
        var ratioSq = ratio * ratio;
        var K = b1.smass + b2.smass
              + ratioSq * (b3.smass + b4.smass)
              + b1.sinertia * cx1 * cx1
              + b2.sinertia * cx2 * cx2
              + b3.sinertia * cx3 * cx3
              + b4.sinertia * cx4 * cx4;
        if (b1 == b4) K -= 2 * ((vec_dot(n12,n34) * b1.smass) + (cx1 * cx4 * b1.sinertia));
        if (b1 == b3) K += 2 * ((vec_dot(n12,n34) * b1.smass) + (cx1 * cx3 * b1.sinertia));
        if (b2 == b3) K -= 2 * ((vec_dot(n12,n34) * b2.smass) + (cx2 * cx3 * b2.sinertia));
        if (b2 == b4) K += 2 * ((vec_dot(n12,n34) * b2.smass) + (cx2 * cx4 * b2.sinertia));
        K;
    });

    $(mixin Imp(r1,r2,r3,r4,n12,n34,cx1,cx2,cx3,cx4,j,bias) {
        if (bias) {
            vec_subeq(b1.pos, n12, b1.imass * j);
            vec_addeq(b2.pos, n12, b2.imass * j);
            vec_subeq(b3.pos, n34, b3.imass * j);
            vec_addeq(b4.pos, n34, b4.imass * j);
            b1.delta_rot(-cx1 * b1.iinertia * j);
            b2.delta_rot( cx2 * b2.iinertia * j);
            b3.delta_rot(-cx3 * b3.iinertia * j);
            b4.delta_rot( cx4 * b4.iinertia * j);
        }
        else {
            vec_subeq(b1.vel, n12, b1.imass * j);
            vec_addeq(b2.vel, n12, b2.imass * j);
            vec_subeq(b3.vel, n34, b3.imass * j);
            vec_addeq(b4.vel, n34, b4.imass * j);
            b1.angvel -= cx1 * b1.iinertia * j;
            b2.angvel += cx2 * b2.iinertia * j;
            b3.angvel -= cx3 * b3.iinertia * j;
            b4.angvel += cx4 * b4.iinertia * j;
        }
    });

    public function bodyImpulse(b:PR(Body)) {
        if(stepped) {
            var ret = Vec3.get();
            if (b == b1) { ret.x -= jAcc*n12x; ret.y -= jAcc*n12y; ret.z -= cx1*jAcc; }
            if (b == b2) { ret.x += jAcc*n12x; ret.y += jAcc*n12y; ret.z += cx2*jAcc; }
            if (b == b3) { ret.x -= jAcc*n34x; ret.y -= jAcc*n34y; ret.z -= cx3*jAcc; }
            if (b == b4) { ret.x += jAcc*n34x; ret.y += jAcc*n34y; ret.z += cx4*jAcc; }
            return ret;
        }else return Vec3.get(0,0,0);
    }

    // ---------------------------------------

    public override function activeBodies() {
        active_body(b1);
        if (b2 != b1) active_body(b2);
        if (b3 != b1 && b3 != b2) active_body(b3);
        if (b4 != b1 && b4 != b2 && b4 != b3) active_body(b4);
    }

    public override function inactiveBodies() {
        inactive_body(b1);
        if (b2 != b1) inactive_body(b2);
        if (b3 != b1 && b3 != b2) inactive_body(b3);
        if (b4 != b1 && b4 != b2 && b4 != b3) inactive_body(b4);
    }

    // ---------------------------------------

    public var b1:PR(Body) = null; anchor_new(a1);
    public var b2:PR(Body) = null; anchor_new(a2);
    public var b3:PR(Body) = null; anchor_new(a3);
    public var b4:PR(Body) = null; anchor_new(a4);

    public var kMass:Float = 0.0;
    public var jAcc:Float = 0.0;
    public var jMax:Float = 0.0;

    public var gamma:Float = 0.0;
    public var bias:Float = 0.0;

    public var stepped:Bool = false;

    // ---------------------------------------

    public override function copy(dict:Array<PR(CopyHelper)>=null, todo:Array<PR(CopyHelper)>=null):Constraint {
        var ret = new PulleyJoint(
            null,null,null,null,
            outer_zn.anchor1,outer_zn.anchor2,outer_zn.anchor3,outer_zn.anchor4,
            jointMin,jointMax,ratio);

        copyto(ret);
        copybody(ret.pr(inner_zn),b1,dict,todo);
        copybody(ret.pr(inner_zn),b2,dict,todo);
        copybody(ret.pr(inner_zn),b3,dict,todo);
        copybody(ret.pr(inner_zn),b4,dict,todo);
        return ret;
    }

    public function new() {
        super();

        anchor_init(a1);
        anchor_init(a2);
        anchor_init(a3);
        anchor_init(a4);

        vec_set(n12, 1, 0);
        vec_set(n34, 1, 0);

        jAcc = 0;
        jMax = PR(Const).POSINF();
        stepped = false;
        cx1 = cx2 = cx3 = cx4 = 0;
    }

    public override function validate() {
        if (b1 == null || b2 == null || b3 == null || b4 == null) throw "Error: PulleyJoint cannot be simulated with null bodies";
        if (b1 == b2 || b3 == b4) throw "Error: PulleyJoint cannot have body1==body2 or body3==body4";
        if (b1.space != space || b2.space != space || b3.space != space || b4.space != space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
        if (jointMin > jointMax) throw "Error: PulleyJoint must have jointMin <= jointMax";
        if (!b1.isDynamic() && !b2.isDynamic()) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
        if (!b3.isDynamic() && !b4.isDynamic()) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
    }

    public override function wake_connected() {
        if(b1!=null && b1.isDynamic()) b1.wake();
        if(b2!=null && b2.isDynamic()) b2.wake();
        if(b3!=null && b3.isDynamic()) b3.wake();
        if(b4!=null && b4.isDynamic()) b4.wake();
    }

    public override function forest() {
        if(b1.isDynamic()) DSF(union(b1.component,component));
        if(b2.isDynamic()) DSF(union(b2.component,component));
        if(b3.isDynamic()) DSF(union(b3.component,component));
        if(b4.isDynamic()) DSF(union(b4.component,component));
    }

    public override function pair_exists(id:Int,di:Int) {
        return (b1.id==id && (b2.id==di || b3.id==di || b4.id==di))
            || (b2.id==id && (b3.id==di || b4.id==di || b1.id==di))
            || (b3.id==id && (b4.id==di || b1.id==di || b2.id==di))
            || (b4.id==id && (b1.id==di || b2.id==di || b3.id==di));
    }

    public override function clearcache() {
        jAcc = 0;
        pre_dt = -1.0;
    }

    // ---------------------------------------

    public override function preStep(dt:Float) {
        if(pre_dt==-1.0) pre_dt = dt;
        var dtratio = dt/pre_dt;
        pre_dt = dt;

        stepped = true;
        equal = jointMin == jointMax;
        validate_anchor(b1,a1);
        validate_anchor(b2,a2);
        validate_anchor(b3,a3);
        validate_anchor(b4,a4);

        var C = Cerr(a1rel,a2rel,a3rel,a4rel,n12,n34,slack);
        if(!slack) {
            //effective mass
            kMass = Keff(a1rel,a2rel,a3rel,a4rel,n12,n34,cx1,cx2,cx3,cx4);
            if(kMass!=0) kMass = 1/kMass;
            else jAcc = 0;

            if(!stiff) {
                if(breakUnderError && C*C>maxError*maxError) return true;
                var biasCoef;
                kMass *= soft_gamma(frequency,damping,dt,gamma,biasCoef);
                bias = -C*biasCoef;
                clamp(bias,maxError);
            }else {
                bias = 0;
                gamma = 0;
            }
            jAcc *= dtratio;
            jMax = maxForce*dt;
        }

        return false;
    }

    public override function warmStart() {
        if(!slack)
            Imp(a1rel,a2rel,a3rel,a4rel,n12,n34,cx1,cx2,cx3,cx4,jAcc,false);
    }

    public override function applyImpulseVel() {
        if(slack) return false;

        //velocity corrections
        var E = Verr;
        var j = kMass*(bias - E) - jAcc*gamma;
        accum(jAcc,j, {
            if (!equal && jAcc > 0) jAcc = 0;
            if (breakUnderForce && jAcc < -jMax) return true;
            if (!stiff) {
                if (jAcc < -jMax) jAcc = -jMax;
            }
        });
        Imp(a1rel,a2rel,a3rel,a4rel,n12,n34,cx1,cx2,cx3,cx4,j,false);

        return false;
    }

    public override function applyImpulsePos() {
        var E; var j;
        //positional corrections
        vec_new(r1); bias_xform(b1,a1local,r1);
        vec_new(r2); bias_xform(b2,a2local,r2);
        vec_new(r3); bias_xform(b3,a3local,r3);
        vec_new(r4); bias_xform(b4,a4local,r4);

        var slack; vec_new(n12); vec_new(n34);
        // so we can re-use normal if necessary
        vec_set(n12, this.n12);
        vec_set(n34, this.n34);

        E = Cerr(r1,r2,r3,r4,n12,n34,slack);
        if(!slack) {
            if(breakUnderError && E*E > maxError*maxError) return true;

            if(E*E < Config.constraintLinearSlop * Config.constraintLinearSlop) return false;
            E *= 0.5;

            //handle large detachment
            if(E*E > 6) {
                var k = b1.smass + b2.smass;
                if(k>Config.epsilon) {
                    k = 0.75/k; //don't completely solve error
                    j = -E*k;
                    if(equal || j<0) {
                        vec_subeq(b1.pos, n12, j*b1.imass);
                        vec_addeq(b2.pos, n12, j*b2.imass);
                        vec_subeq(b3.pos, n34, j*b3.imass);
                        vec_addeq(b4.pos, n34, j*b4.imass);

                        //recalculate error
                        E = Cerr(r1,r2,r3,r4,n12,n34,slack);
                        E *= 0.5;
                    }
                }
            }

            var cx1, cx2, cx3, cx4;
            var k = Keff(r1,r2,r3,r4,n12,n34,cx1,cx2,cx3,cx4);
            if(k!=0) k = 1/k;
            j = -E*k;
            if(equal || j<0)
                Imp(r1,r2,r3,r4,n12,n34,cx1,cx2,cx3,cx4,j,true);
        }

        return false;
    }

    //----------------------------------------------

    public override function draw(g:Debug) {
    #if (flash9||openfl||nme)
        var me = outer_zn;
        var a1 = me.body1.localPointToWorld(me.anchor1);
        var a2 = me.body2.localPointToWorld(me.anchor2);
        var a3 = me.body3.localPointToWorld(me.anchor3);
        var a4 = me.body4.localPointToWorld(me.anchor4);

        var n12 = a2.sub(a1);
        var n34 = a4.sub(a3);
        var nl12 = n12.length;
        var nl34 = n34.length;

        drawLink(g, a1, a2, n12, nl12, nl34 * ratio, 1.0, 0xffff00, 0x00ffff);
        drawLink(g, a3, a4, n34, nl34, nl12, (1 / ratio), 0x00ffff, 0xff00ff);

        g.drawFilledCircle(a1,2,0xff);
        g.drawFilledCircle(a2,2,0xff0000);
        g.drawFilledCircle(a3,2,0xff00);
        g.drawFilledCircle(a4,2,0xff00ff);

        a1.dispose();
        a2.dispose();
        a3.dispose();
        a4.dispose();
        n12.dispose();
        n34.dispose();
    #end
    }

    #if (flash9||openfl||nme)
    public function drawLink(g:Debug, a1:Vec2, a2:Vec2, n:Vec2, nl:Float, bias:Float, scale:Float, ca:Int, cb:Int) {
        if (nl != 0) {
            n.muleq(1 / nl);

            var mid = a1.add(a2).muleq(0.5);
            var cmin = (jointMin - bias) * scale;
            if (cmin < 0) cmin = 0;
            var cmax = (jointMax - bias) * scale;
            if (cmax < 0) cmax = 0;

            var min1 = mid.sub(n.mul(cmin * 0.5, true));
            var min2 = mid.add(n.mul(cmin * 0.5, true));
            var max1 = mid.sub(n.mul(cmax * 0.5, true));
            var max2 = mid.add(n.mul(cmax * 0.5, true));

            g.drawLine(min1, min2, ca);
            g.drawLine(max1, min1, cb);
            g.drawLine(max2, min2, cb);

            if (!stiff) {
                if (nl > cmax) {
                    g.drawSpring(max1, a1, cb);
                    g.drawSpring(max2, a2, cb);
                }
                else if (nl < cmin) {
                    g.drawSpring(min1, a1, ca);
                    g.drawSpring(min2, a2, ca);
                }
            }

            mid.dispose();
            min1.dispose();
            min2.dispose();
            max1.dispose();
            max2.dispose();
        }
    }
    #end
}

)
