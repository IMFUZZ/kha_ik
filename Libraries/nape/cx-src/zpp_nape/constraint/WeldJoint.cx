package zpp_nape.constraint;
$(import);

withConstraint(
class PR(WeldJoint) extends PR(Constraint) {
    public var outer_zn:WeldJoint = null;

    $(mixin Cerr(r1,r2,C) {
        C`x = (b2.posx+r2`x)-(b1.posx+r1`x);
        C`y = (b2.posy+r2`y)-(b1.posy+r1`y);
        C`z = b2.rot-b1.rot-phase;
    });
    $(mixin Verr(V) {
        V`x = (b2.velx+b2.kinvelx-a2rely*(b2.angvel+b2.kinangvel))-(b1.velx+b1.kinvelx-a1rely*(b1.angvel+b1.kinangvel));
        V`y = (b2.vely+b2.kinvely+a2relx*(b2.angvel+b2.kinangvel))-(b1.vely+b1.kinvely+a1relx*(b1.angvel+b1.kinangvel));
        V`z = b2.angvel+b2.kinangvel - b1.angvel-b1.kinangvel;
    });
    $(mixin Keff(r1,r2,K) {
        var m = b1.smass + b2.smass;
        mat3_set(K, m,
                    0,m,
                    0,0,0);
        $(mixin body(b,r) if(b.sinertia!=0) {
            var X = r`x*b.sinertia;
            var Y = r`y*b.sinertia;
            mat3_addeq(K, Y*r`y,
                         -Y*r`x, X*r`x,
                           -Y,       X, b.sinertia);
        });
        body(b1,r1);
        body(b2,r2);
    });
    $(mixin Imp(r1,r2,j,bias) {
        if(bias) {
            vec_subeq(b1.pos, j,b1.imass);
            vec_addeq(b2.pos, j,b2.imass);
            b1.delta_rot(-(vec_cross(r1,j)+j`z)*b1.iinertia);
            b2.delta_rot((vec_cross(r2,j)+j`z)*b2.iinertia);
        }else {
            vec_subeq(b1.vel, j,b1.imass);
            vec_addeq(b2.vel, j,b2.imass);
            b1.angvel -= (vec_cross(r1,j)+j`z)*b1.iinertia;
            b2.angvel += (vec_cross(r2,j)+j`z)*b2.iinertia;
        }
    });

    public function bodyImpulse(b:PR(Body)) {
        if(stepped) {
            if(b==b1) return Vec3.get(-jAccx,-jAccy,-(vec_cross(a1rel,jAcc)+jAccz));
            else      return Vec3.get( jAccx, jAccy,  vec_cross(a2rel,jAcc)+jAccz );
        }else return Vec3.get(0,0,0);
    }

    //---------------------------------------------------

    public override function activeBodies() {
        active_body(b1);
        if(b2!=b1)
            active_body(b2);
    }

    public override function inactiveBodies() {
        inactive_body(b1);
        if(b2!=b1)
            inactive_body(b2);
    }

    //---------------------------------------------------

    public var b1:PR(Body) = null; anchor_new(a1);
    public var b2:PR(Body) = null; anchor_new(a2);
    public var phase:Float = 0.0;

    mat3_new(public,kMass);
    vec3_new(public,jAcc);
    public var jMax:Float = 0.0;

    public var gamma:Float = 0.0;
    vec3_new(public,bias);

    public var stepped:Bool = false;

    //---------------------------------------------------

    public override function copy(dict:Array<PR(CopyHelper)>=null,todo:Array<PR(CopyHelper)>=null):Constraint {
        var ret = new WeldJoint(null,null,outer_zn.anchor1,outer_zn.anchor2);
        copyto(ret);

        copybody(ret.pr(inner_zn),b1,dict,todo);
        copybody(ret.pr(inner_zn),b2,dict,todo);
        return ret;
    }

    public function new() {
        super();

        phase = 0;
        vec3_set(jAcc,0,0,0);
        jMax = PR(Const).POSINF();
        stepped = false;

        anchor_init(a1);
        anchor_init(a2);
    }

    public override function validate() {
        if(b1==null || b2==null) throw "Error: AngleJoint cannot be simulated null bodies";
        if(b1==b2) throw "Error: WeldJoint cannot be simulated with body1 == body2";
        if(b1.space != space || b2.space != space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
        if(!b1.isDynamic() && !b2.isDynamic()) throw "Error: Constraints cannot have both bodies non-dynamic";
    }

    public override function wake_connected() {
        if(b1!=null && b1.isDynamic()) b1.wake();
        if(b2!=null && b2.isDynamic()) b2.wake();
    }

    public override function forest() {
        if(b1.isDynamic()) DSF(union(b1.component,component));
        if(b2.isDynamic()) DSF(union(b2.component,component));
    }

    public override function pair_exists(id:Int,di:Int) {
        return (b1.id==id && b2.id==di) || (b1.id==di && b2.id==id);
    }

    public override function clearcache() {
        vec3_set(jAcc,0,0,0);
        pre_dt = -1.0;
    }

    //---------------------------------------------------

    public override function preStep(dt:Float) {
        if(pre_dt==-1.0) pre_dt = dt;
        var dtratio = dt/pre_dt;
        pre_dt = dt;

        stepped = true;
        validate_anchor(b1,a1);
        validate_anchor(b2,a2);

        //effective mass
        Keff(a1rel,a2rel,kMass);
        var flag = mat3_invert(kMass);
        if((flag&1)!=0) jAccx = 0;
        if((flag&2)!=0) jAccy = 0;
        if((flag&4)!=0) jAccz = 0;

        if(!stiff) {
            var biasCoef;
            mat3_scaleq(kMass, soft_gamma(frequency,damping,dt,gamma,biasCoef));
            Cerr(a1rel,a2rel,bias);

            if(breakUnderError && vec3_lsq(bias) > maxError*maxError) return true;

            vec3_muleq(bias,-biasCoef);
            vec3_clamp(bias,maxError);
        }else {
            vec3_set(bias,0,0,0);
            gamma = 0;
        }
        vec3_muleq(jAcc,dtratio);
        jMax = maxForce*dt;

        return false;
    }

    public override function warmStart() {
        Imp(a1rel,a2rel,jAcc,false);
    }

    public override function applyImpulseVel() {
        //velocity corrections
        vec3_new(E); Verr(E);
        vec3_new(J); vec3_sub(bias,E, J);
        mat3_xform(kMass,J);
        vec3_subeq(J,jAcc,gamma);

        accum3(jAcc,J,{
            if(breakUnderForce) {
                if(vec3_lsq(jAcc) > jMax*jMax)
                    return true;
            }else if(!stiff)
                vec3_clamp(jAcc,jMax);
        });
        Imp(a1rel,a2rel,J,false);

        return false;
    }

    public override function applyImpulsePos() {
        vec_new(r1); bias_xform(b1,a1local,r1);
        vec_new(r2); bias_xform(b2,a2local,r2);
        vec3_new(E); Cerr(r1,r2,E);
        vec3_new(J);

        if(breakUnderError && vec3_lsq(E) > maxError*maxError) return true;

        var cont = true;
        if(vec_lsq(E) < Config.constraintLinearSlop * Config.constraintLinearSlop) {
            cont = false;
            vec_set(E,0,0);
        }
        if(PR(Math).sqr(Ez) < PR(Math).sqr(Config.constraintAngularSlop)) {
            if(!cont) return false;
            else Ez = 0;
        }
        vec3_muleq(E,0.5);

        //handle large detachment
        if(vec_lsq(E) > 6) {
            var k = b1.smass + b2.smass;
            if(k>Config.epsilon) {
                k = 0.75/k; //don't completely solve error
                vec_set(J,-Ex*k,-Ey*k);
                vec_clamp(J,20);

                vec_subeq(b1.pos, J,b1.imass);
                vec_addeq(b2.pos, J,b2.imass);

                //recalculate error
                Cerr(r1,r2,E);
                vec3_muleq(E,0.5);
            }
        }

        mat3_new(K); Keff(r1,r2,K);
        vec3_set(J,-Ex,-Ey,-Ez);
        vec_clamp(J,6); PR(Math).clamp2(Jz,0.25);
        mat3_solve(K,J);

        Imp(r1,r2,J,true);

        return false;
    }

    //----------------------------------------------

    public override function draw(g:Debug) {
    #if (flash9||openfl||nme)
        var me = outer_zn;
        var a1 = me.body1.localPointToWorld(me.anchor1);
        var a2 = me.body2.localPointToWorld(me.anchor2);

        if(!stiff) {
            var n = a2.sub(a1);
            var nl = n.length;
            if(nl!=0)
                g.drawSpring(a1,a2,0xff00ff);
            n.dispose();

            var minrad = 10;
            var delrad = 5/Math.PI/2;

            $(mixin dobody(b,target,col) {
                if(b!=b.space.world) {
                    var max = target;
                    var min = b.rotation;
                    if(min>max) swap(min,max);
                    $(mixin rad(ang) (minrad + (ang-min)*delrad));

                    PR(AngleDraw).drawSpiralSpring(g, b.position, min,max,rad(min),rad(max), col);
                    PR(AngleDraw).indicator(g, b.position, b.rotation, rad(b.rotation), col);
                }
            });
            dobody(me.body1,me.body2.rotation-me.phase,0xff0080);
            dobody(me.body2,me.phase+me.body1.rotation,0x8000ff);
        }

        g.drawFilledCircle(a1,2,0xff);
        g.drawFilledCircle(a2,2,0xff0000);

        a1.dispose();
        a2.dispose();
    #end
    }
}

)
