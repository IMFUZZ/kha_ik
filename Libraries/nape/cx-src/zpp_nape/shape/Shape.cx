package zpp_nape.shape;
$(import);

class PR(Shape) extends PR(Interactor) {
    public var outer:Shape = null;
    public var body:PR(Body) = null;

    public var type:Int = 0;
    public static var types:Array<ShapeType> = [ShapeType.CIRCLE, ShapeType.POLYGON];

    /**used by nape-hacks**/
    /*flibmdel */public inline function isCircle() { return type==Flag(ShapeType,CIRCLE); }
    /*flibmdel */public inline function isPolygon() { return type==Flag(ShapeType,POLYGON); }

    //----------------------------------------------------------------------------------------------

    public var area:Float = 0.0; public var inv(area_inertia):Bool = false;
    public var inertia:Float = 0.0;
    public var angDrag:Float = 0.0; public var inv(angDrag):Bool = false;

    //----------------------------------------------------------------------------------------------

    vec_new(public,localCOM); public var inv(localCOM):Bool = false;
    vec_new(public,worldCOM); public var inv(worldCOM):Bool = false;
    public var wrap_localCOM:Vec2 = null;
    public var wrap_worldCOM:Vec2 = null;

    // Maximum radius of shape for sweep tests.
    public var sweepRadius:Float = 0.0; public var inv(sweepRadius):Bool = false;
    public var sweepCoef:Float = 0.0; //less the min radius. paired with sweepRadius

    flibmdel public inline function invalidate_sweepRadius() {
        //dependancy checked
        inv(sweepRadius) = true;
    }
    public function validate_sweepRadius() {
        if (inv(sweepRadius)) {
            inv(sweepRadius) = false;
            if (isCircle()) circle.__validate_sweepRadius();
            else            polygon.__validate_sweepRadius();
        }
    }

    //----------------------------------------------------------------------------------------------

    public var circle:PR(Circle) = null;
    public var polygon:PR(Polygon) = null;

    //changes for memory reasons means that Material's now only track 'active' shapes
    //and so this reference material is used to check for changes when things like 'mass' etc are verified.
    //as the material may not have been able to notify the shape of changes.
    //
    //changes elsewhere in this file are marked with #
    public var refmaterial:PR(Material) = null;
    public var material:PR(Material) = null;

    //the same changes are true for these, but there are no dependant properties
    //that need notifying; only waking of sleeping objects, but in these cases
    //the shape is deemed active and is known to these objects.
    public var filter:PR(InteractionFilter) = null;
    public var fluidProperties:PR(FluidProperties) = null;

    public var fluidEnabled:Bool = false;
    public var sensorEnabled:Bool = false;

    //----------------------------------------------------------------------------------------------

    //for sweep and prune
    public var sweep:PR(SweepData) = null;
    //for dynamic aaabb
    public var node:PR(AABBNode) = null;
    public var pairs:List(PR(AABBPair)) = null;

    //----------------------------------------------------------------------------------------------

    public function clear() {
        if(isCircle()) circle.__clear();
        else          polygon.__clear();
    }

    //----------------------------------------------------------------------------------------------

    public var aabb:PR(AABB) = null; public var inv(aabb):Bool = false;
    flibmdel public inline function validate_aabb() {
        //dependancy checked
        if(inv(aabb)) {
            if(body!=null) {
                inv(aabb) = false;
                if(isCircle()) circle.__validate_aabb();
                else           polygon.__validate_aabb();
            }
        }
    }
    flibmdel public inline function force_validate_aabb() {
        if (isCircle()) circle._force_validate_aabb();
        else            polygon._force_validate_aabb();
    }
    flibmdel public inline function invalidate_aabb() {
        //dependancy checked
        inv(aabb) = true;
        if(body!=null) body.invalidate_aabb();
    }

    //----------------------------------------------------------------------------------------------

    public function validate_area_inertia() {
        //dependancy checked
        if(inv(area_inertia)) {
            inv(area_inertia) = false;
            if(isCircle()) circle.__validate_area_inertia();
            else           polygon.__validate_area_inertia();
        }
    }
    public function validate_angDrag() {
        //dependancy checked
        if(inv(angDrag)
        // # changes mean inv(angDrag) may not be 'correct'
           || refmaterial.dynamicFriction != material.dynamicFriction
        // #
        ) {
            inv(angDrag) = false;
            // # no other properties depend on dyn_fric.
            //   so no invalidation needed.
            refmaterial.dynamicFriction = material.dynamicFriction;
            // #
            if(isCircle()) circle.__validate_angDrag();
            else           polygon.__validate_angDrag();
        }
    }
    flibmdel public inline function validate_localCOM() {
        //dependancy checked
        if(inv(localCOM)) {
            inv(localCOM) = false;

            if(isPolygon()) polygon.__validate_localCOM();
            if (wrap_localCOM != null)
                vec_set(wrap_localCOM.pr(inner)., localCOM);
        }
    }
    flibmdel public inline function validate_worldCOM() {
        //dependancy checked
        if(inv(worldCOM)) {
            if(body!=null) {
                inv(worldCOM) = false;
                validate_localCOM();
                body.validate_axis();
                vec_localglobal(body.axis,body.pos, localCOM,worldCOM);
            }
        }
    }
    public function getworldCOM() {
        DEBUG(if(body==null) throw "Error: worldCOM only makes sense when Shape belongs to a Body";)
        validate_worldCOM();
        vec_set(wrap_worldCOM.pr(inner)., worldCOM);
    }

    //----------------------------------------------------------------------------------------------

    public function invalidate_area_inertia() {
        //dependancy checked
        inv(area_inertia) = true;
        if(body!=null) {
            body.invalidate_localCOM();
            body.invalidate_mass();
            body.invalidate_inertia();
        }
    }
    public function invalidate_angDrag() {
        //dependancy checked
        inv(angDrag) = true;
    }
    public function invalidate_localCOM() {
        //dependancy checked
        inv(localCOM) = true;
        invalidate_area_inertia(); //specificaly inertia
        if (isCircle()) invalidate_sweepRadius();
        invalidate_angDrag();
        invalidate_worldCOM();
        if(body!=null) body.invalidate_localCOM();
    }
    public function invalidate_worldCOM() {
        //dependancy checked
        inv(worldCOM) = true;
        invalidate_aabb();
    }

    //----------------------------------------------------------------------------------------------

    // # things like waking are still valid
    //   as this shape will currently be active
    //   if wake would perform any side effect.
    public function invalidate_material(flags:Int) {
        if((flags&PR(Material).WAKE)!=0)
            wake();

        if((flags&PR(Material).ARBITERS)!=0) {
            if(body!=null) body.refreshArbiters();
        }

        // # these are not strictly needed any more
        //   but may aswell keep them.
        if((flags&PR(Material).PROPS)!=0) {
            //dependancy checked
            if(body!=null) {
                body.invalidate_localCOM();
                body.invalidate_mass();
                body.invalidate_inertia();
            }
        }

        if((flags&PR(Material).ANGDRAG)!=0) {
            //dependancy checked
            invalidate_angDrag();
        }

        // #
        refmaterial.set(material);
        // #
    }

    // # again things like waking are still valid
    //   as these are called for active shapes
    //   for which wake() will have a side effect.
    public function invalidate_filter() {
        wake();
    }
    public function invalidate_fluidprops() {
        if(fluidEnabled)
            wake();
    }

    //----------------------------------------------------------------------------------------------

    //previously lambda
    private function aabb_validate() {
        DEBUG(if(body==null) throw "Error: bounds only makes sense when Shape belongs to a Body";)
        validate_aabb();
    }

    function new(type:Int) {
        super();
        pairs = new List(PR(AABBPair))();
        ishape = this;

        this.type = type;
        aabb = PR(AABB).get(0,0,0,0);
        aabb._immutable = true;
        var me = this;
        aabb._validate = aabb_validate;
        inv(area_inertia) = inv(angDrag) = inv(localCOM) = inv(sweepRadius) = true;

        vec_set(localCOM,0,0);
        vec_set(worldCOM,0,0);

        fluidEnabled = false;
        sensorEnabled = false;
        fluidProperties = null;
        body = null;

        // #
        refmaterial = new PR(Material)();
        // #

        sweepRadius = sweepCoef = 0;
    }

    //----------------------------------------------------------------------------------------------

    public function setMaterial(material:PR(Material)) {
        if(this.material!=material) {
            if(body!=null && body.space!=null) {
                if(this.material!=null) this.material.remShape(this);
            }
            this.material = material;
            if(body!=null && body.space!=null)
                material.addShape(this);

            wake();
            if(body!=null) body.refreshArbiters();
        }
    }

    public function setFilter(filter:PR(InteractionFilter)) {
        if(this.filter!=filter) {
            if(body!=null && body.space!=null) {
                if(this.filter!=null) this.filter.remShape(this);
            }
            this.filter = filter;
            if(body!=null && body.space!=null)
                filter.addShape(this);

            wake();
        }
    }

    public function setFluid(fluid:PR(FluidProperties)) {
        if(fluidProperties != fluid) {
            if(body!=null && body.space!=null) {
                if(fluidProperties!=null) fluidProperties.remShape(this);
            }
            fluidProperties = fluid;
            if(body!=null && body.space!=null)
                fluid.addShape(this);

            if(fluidEnabled)
                wake();
        }
    }

    public function __immutable_midstep(name:String) {
        DEBUG(if(body!=null && body.space!=null && body.space.midstep)
            throw "Error: "+name+" cannot be set during a space step()";
        )
    }

    //----------------------------------------------------------------------------------------------

    public function addedToBody() {
        //dependancy checked
        invalidate_worldCOM();
        invalidate_aabb();
    }
    public function removedFromBody() {
    }

    public function addedToSpace() {
        __iaddedToSpace();
        material.addShape(this);
        filter.addShape(this);
        if(fluidProperties!=null)
            fluidProperties.addShape(this);
    }
    public function removedFromSpace() {
        __iremovedFromSpace();
        material.remShape(this);
        filter.remShape(this);
        if(fluidProperties!=null)
            fluidProperties.remShape(this);
    }

    public function copy() {
        var ret:PR(Shape) = null;
        if(isCircle()) ret = circle.__copy();
        else ret = polygon.__copy();

        if(!inv(area_inertia)) {
            ret.area = area;
            ret.inertia = inertia;
        }else ret.invalidate_area_inertia();

        if (!inv(sweepRadius)) {
            ret.sweepRadius = sweepRadius;
            ret.sweepCoef = sweepCoef;
        }else ret.invalidate_sweepRadius();

        if(!inv(angDrag))
            ret.angDrag = angDrag;
        else ret.invalidate_angDrag();

        if(!inv(aabb)) {
            vec_set(ret.aabb.min,aabb.min);
            vec_set(ret.aabb.max,aabb.max);
        }else ret.invalidate_aabb();

        //copied shape has default material/filter allocated, don't need it!
        Free(PR(Material),ret.material);
        Free(PR(InteractionFilter),ret.filter);

        ret.material = material;
        ret.filter = filter;
        if(fluidProperties!=null)
            ret.fluidProperties = fluidProperties;
        ret.fluidEnabled = fluidEnabled;
        ret.sensorEnabled = sensorEnabled;

        if (userData != null)
            ret.userData = Reflect.copy(userData);

        copyto(ret.outer);
        return ret.outer;
    }
}
